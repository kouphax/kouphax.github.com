<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><id>urn:yobriefca-se:feed:cloud</id><updated>Thu Sep 13 00:00:00 UTC 2012</updated><title type="text">Yo! Briefcase: cloud</title><link rel="self" href="https://yobriefca.se/feed/cloud.xml"></link><entry><title>StackMob: Baas meets PaaS</title><updated>Thu Sep 13 00:00:00 UTC 2012</updated><author><name>James Hughes</name></author><link href="/presentations/stackmob.pdf"></link><id>urn:yobriefca-se:feed:post:StackMob: Baas meets PaaS</id><content type="html"></content></entry><entry><title>StackMob Lightning Talk</title><updated>Wed Sep 12 23:00:00 UTC 2012</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2012/09/12/stackmob-lightning-talk/"></link><id>urn:yobriefca-se:feed:post:StackMob Lightning Talk</id><content type="html">&lt;p&gt;So I finally found an opportunity to deliver a quick lightning talk on &lt;a href="http://stackmob.com"&gt;StackMob&lt;/a&gt; at our monthly CodeSlice sessions in work. Knocked it up today over lunch and presented it tonight. Would like to pull this one out into a more in depth and interactive look... just waiting for someone to ask :)&lt;/p&gt;&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/49405807?title=0&amp;amp;byline=0&amp;amp;portrait=0&amp;amp;color=ffffff" width="600" height="450" frameborder="0" webkitallowfullscreen="webkitallowfullscreen" mozallowfullscreen="mozallowfullscreen" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;script async="async" class="speakerdeck-embed" data-id="5051d07ffe08c30002031d18" data-ratio="1.3333333333333333" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;</content></entry><entry><title>Securely Serving Static Files on Heroku</title><updated>Mon Aug 20 23:00:00 UTC 2012</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2012/08/20/securely-serving-static-files-on-heroku/"></link><id>urn:yobriefca-se:feed:post:Securely Serving Static Files on Heroku</id><content type="html">&lt;p&gt;More than once I've had a need to host what is essentially static content on Heroku. For example when building a simple internal web app for my company that used an existing API or Parse. Invariably in this situation I have also needed to secure this app - nothing to drastic, no need for multiple user accounts or roles or any such nonsense (we generally run our non-essential systems on the honour system). Basic auth is more than enough.&lt;/p&gt;&lt;p&gt;So, static content plus basic auth. Heroku itself doesn't offer basic auth as an option (why would it?) and so you'd need to roll it into your app. Once I hosted my static stuff inside a Scala/Play! app, once a Sinatra app and the other a Rails app - variety is the spice of life. But each time I did it I felt a little dirty - it was noticeably slower serving this content from within an app and it seemed rather wasteful. So, in a bid to stamp out technical debt, I've ripped out all those web frameworks an replaced them with good old Apache.&lt;/p&gt;&lt;p&gt;Now anyone with any knowledge of Apache will already be able to deduce the steps required here - but I want to note it for posterity, for myself, when I forget, in about a week.&lt;/p&gt;&lt;h2&gt;BuildPack&lt;/h2&gt;&lt;p&gt;First things first you'll want to get your hands on a custom &lt;a href="https://devcenter.heroku.com/articles/buildpacks"&gt;Heroku BuildPack&lt;/a&gt; - these are the things that prepare your app instance with all the software and support it needs to run.&lt;/p&gt;&lt;p&gt;I recommend you fork and clone the &lt;a href="https://github.com/pearkes/heroku-buildpack-static"&gt;heroku-buildpack-static&lt;/a&gt; buildpack available from pearkes on GitHub.&lt;/p&gt;&lt;h2&gt;.htpassword&lt;/h2&gt;&lt;p&gt;Next you need to generate your &lt;code&gt;.htpasswd&lt;/code&gt; file that will serve as your store for your Basic Auth credentials. The two simplest ways to generate one of these is to either use &lt;a href="http://www.htaccesstools.com/htpasswd-generator/"&gt;htaccesstools.com's htpasswd generator&lt;/a&gt; or generate on via the command line.&lt;/p&gt;&lt;p&gt;The simplest command to generate one is this,&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;htpasswd -cb &amp;lt;password_file&amp;gt; &amp;lt;username&amp;gt; &amp;lt;password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For example,&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;htpasswd -cb .htpasswd james password
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Will generate a file in the current directory called .htpasswd (the standard name for these files) with a single entry of username = james and password = password.&lt;/p&gt;&lt;h2&gt;Updating the BuildPack&lt;/h2&gt;&lt;p&gt;Either run the above command in the &lt;code&gt;heroku-buildpack-static/conf&lt;/code&gt; folder or move your &lt;code&gt;.htpasswd&lt;/code&gt; file into the that folder.&lt;/p&gt;&lt;p&gt;Next up you want to configure apache to authenticate against that generate password file. Adding the following lines to the &lt;code&gt;httpd.conf&lt;/code&gt; file in the &lt;code&gt;heroku-buildpack-static/conf&lt;/code&gt; will lock all assets under your apps site down,&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="apache "&gt;    &lt;span class="nb"&gt;AuthType&lt;/span&gt;      Basic
    &lt;span class="nb"&gt;AuthName&lt;/span&gt;      &lt;span class="s2"&gt;"Authentication Required"&lt;/span&gt;
    &lt;span class="nb"&gt;AuthUserFile&lt;/span&gt;  &lt;span class="s2"&gt;"/app/apache/conf/.htpasswd"&lt;/span&gt;
    &lt;span class="nb"&gt;Require&lt;/span&gt;       valid-user
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This block should be added to the configuration section starting &lt;code&gt;&amp;lt;Directory /&amp;gt;&lt;/code&gt; i.e.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="apache "&gt;  &lt;span class="nt"&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nb"&gt;Options&lt;/span&gt; FollowSymLinks
      &lt;span class="nb"&gt;AllowOverride&lt;/span&gt; &lt;span class="k"&gt;None&lt;/span&gt;

      &lt;span class="nb"&gt;AuthType&lt;/span&gt;      Basic
      &lt;span class="nb"&gt;AuthName&lt;/span&gt;      &lt;span class="s2"&gt;"Authentication Required"&lt;/span&gt;
      &lt;span class="nb"&gt;AuthUserFile&lt;/span&gt;  &lt;span class="s2"&gt;"/app/apache/conf/.htpasswd"&lt;/span&gt;
      &lt;span class="nb"&gt;Require&lt;/span&gt;       valid-user

      &lt;span class="nb"&gt;Order&lt;/span&gt; deny,allow
      &lt;span class="nb"&gt;Deny&lt;/span&gt; from &lt;span class="k"&gt;all&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You'll notice the &lt;code&gt;AuthUserFile&lt;/code&gt; points to the correct absolute path for our custom .htpasswd file. If you called it anything else please update this line accordingly.&lt;/p&gt;&lt;p&gt;Commit and push that to your forked repo.&lt;/p&gt;&lt;h2&gt;Using the BuildPack&lt;/h2&gt;&lt;p&gt;Finally we need to tell Heroku to use the custom buildpack. If you have yet to create an app then you can specify the buildpack during creation,&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;heroku create &amp;lt;app name&amp;gt; --buildpack &amp;lt;url to your repo&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you have created you app already you can add the buildpack through an additional config setting&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;heroku config:add BUILDPACK_URL=&amp;lt;url to your repo&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Push your new or updated site to Heroku and watch in awe as your site is that bit more secure.&lt;/p&gt;</content></entry><entry><title>Backend as a Service - Part One</title><updated>Tue Aug 07 23:00:00 UTC 2012</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2012/08/07/backend-as-a-service-part-one/"></link><id>urn:yobriefca-se:feed:post:Backend as a Service - Part One</id><content type="html">&lt;p&gt;I recently wrote an article for &lt;a href="http://cloudspring.com/"&gt;CloudSpring&lt;/a&gt; (a part of the &lt;a href="http://www.sitepoint.com/"&gt;SitePoint&lt;/a&gt; family) around what you can expect and what you should think about when going for one of the "Backend as a Service" offerings on the market. &lt;/p&gt;&lt;p&gt;The article is &lt;a href="http://cloudspring.com/backend-as-a-service-part-1/"&gt;now live&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;a href="http://cloudspring.com/backend-as-a-service-part-1/"&gt;CloudSpring: Backend as a Service Part 1&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Part 2, the one where I look at whats actually out there, will be ready within the next week.&lt;/p&gt;</content></entry><entry><title>Azure Website Workflow for Bosses</title><updated>Wed Jul 11 23:00:00 UTC 2012</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2012/07/11/azure-website-workflow-for-bosses/"></link><id>urn:yobriefca-se:feed:post:Azure Website Workflow for Bosses</id><content type="html">&lt;blockquote&gt;&lt;p&gt;So consider my indefinite hiatus suspended definitely. I suck at quitting! But we wont dive into the whys and wherefores around that now.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;I've a confession to make, the "new" Azure, I like it. Yeah I do, s'nice. I like the way it blends PaaS with IaaS (though I do feel that adding 1st class node.js and PHP support is a bit of a tacked on marketing ploy). So you dont have the "Add-On" model you get from Appharbor and Heroku but thats fine because this blending of "as a Services" gives you an alternate approach. For a start you can just use the external services without them having to be "Add-Ons". Sure you lose out on the nice automatic integration points for managing your services but it's not the end of the world and what happens when you want something that isn't available as an Add-On or worse not available as a cloudy SaaS thing? Well I guess you need to go off to EC2 or similar and host your own (assuming you want to stick with the cloudy infrastructure). But with Azure you also get another option - you want to use Mongo or some huge enterprisey platform that isn't SaaSified? Stick it on an Azure VM. Everything managed under one cloud provider. Thats such a nice thing to have at your disposal.&lt;/p&gt;&lt;p&gt;But thats not the point of this post. Most posts out there cover a workflow for Azure WebSites that make use of the portal to provision new sites (and then usually &lt;code&gt;git&lt;/code&gt; to deploy) but that's weak sauce (the portal part at least - gits still aces). No, no no - You want hyper-productivity, you want automated provisioning, you want to be hip; node.js hip; and you want to feel like a boss hanging out on your command line while other "lesser people" click stuff with a silly little rodent. I just read your mind, didn't I? Well then - you got that with Azure.&lt;/p&gt;&lt;h2&gt;Setting Up&lt;/h2&gt;&lt;p&gt;First things first you need to install a few things.&lt;/p&gt;&lt;h3&gt;Installing node.js + NPM&lt;/h3&gt;&lt;p&gt;&lt;a href="http://nodejs.org/#download"&gt;Download&lt;/a&gt; &lt;/p&gt;&lt;p&gt;The tools are built and deployed in node via NPM, the node package manager so just run the one click installer and you'll be all setup.&lt;/p&gt;&lt;h3&gt;Installing Azure CLI Tools&lt;/h3&gt;&lt;p&gt;Install these via NPM so fire up your terminal/command prompt/whatever and type&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;npm install azure -g
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then let NPM install all the dependencies and what not (the &lt;code&gt;-g&lt;/code&gt; option just tells NPM to install the tools globally so they are accessible from the command line)&lt;/p&gt;&lt;h3&gt;Adding your account&lt;/h3&gt;&lt;p&gt;Next up you need to tell azure what account to use so fire this command into you command line&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;azure account download
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You'll then be taken to the Azure website and it should (assuming you're logged in already) download a &lt;code&gt;publishsettings&lt;/code&gt; file. Next up you need to import this file into your azure toolchain.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;azure account import YOUR_DOWNLOADED_FILE.publishsettings
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After some scrolling text you'll be all set up and ready to deploy. You'll be asked to delete the file you downloaded - probably best to do this :)&lt;/p&gt;&lt;h2&gt;Creating the app&lt;/h2&gt;&lt;p&gt;OK then lets create an app - what we create is irrelevant here so lets just create the default ASP.NET MVC website and use that as our sample app. Remeber though, if you're a cutting edge awesome-addict to switch from .NET 4.5 to 4 or else you'll get some issues when deploying your site to Azure.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt; : The next few steps can be condensed, thanks to the feedback from Glenn Block (@gblock), &lt;/p&gt;&lt;blockquote class="twitter-tweet" data-in-reply-to="224800579388575744"&gt;&lt;p&gt;@&lt;a href="https://twitter.com/kouphax"&gt;kouphax&lt;/a&gt; oh dude, you don't need all those steps! Do "azure site create my site --git" It will create the repo for you and add the remote!&lt;/p&gt;— Glenn Block (@gblock) &lt;a href="https://twitter.com/gblock/status/224855192800215040" data-datetime="2012-07-16T13:17:10+00:00"&gt;July 16, 2012&lt;/a&gt;&lt;/blockquote&gt; &lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; This sets up your git repo during creation of the site, adds the remote endpoint and even generates a .gitignore file (which you need to edit yourelf for .NET projects. WIN!!!!&lt;p&gt;Anyway.... on with the old post.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Once you've created you app and saved it then you'll want to intialise an empty repo at the root of the solution,&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then we need to create a site on Azure we can push to.&lt;/p&gt;&lt;h2&gt;Creating a new site&lt;/h2&gt;&lt;p&gt;Back to the command line now,&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;azure site create SITE_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If we execute this, again at the root of our solution, it will do a number of things,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Validate the request (site name availability and what not)&lt;/li&gt;
  &lt;li&gt;Create a new site on Azure&lt;/li&gt;
  &lt;li&gt;Add a new git &lt;code&gt;remote&lt;/code&gt; to your &lt;code&gt;.git\config&lt;/code&gt; file&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;Pushing site&lt;/h2&gt;&lt;p&gt;As I've said the last command actually added a remote repo to our git configuration so if we do the usual gitty stuff (you'll want to, for neatness sake, set up your &lt;code&gt;.gitignore&lt;/code&gt; but we can skip this for brevity),&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;git add -A
git commit -m "Boring commit message"
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we push,&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;git push azure master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Done!&lt;/p&gt;&lt;h2&gt;Viewing your site&lt;/h2&gt;&lt;p&gt;You could just browse to your new site but thats just not hip enough, hell no. Instead lets launch it from the command line...&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;azure site browse
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That will launch our new site without having to touch a silly old, out of date rodent.&lt;/p&gt;&lt;h2&gt;Wrapping up&lt;/h2&gt;&lt;p&gt;Ok so thats the basic workflow for using CLI tools to manage Azure sites. You can do this with most of the Azure services (VMs, Certs, Cloud Services etc.) aswell.&lt;/p&gt;&lt;p&gt;So apart from making you look all hackery working in the terminal it does have other uses, specifically around the fact terminal command can be easily executed in a headless automated environment. Think of creating new sites as part of your CI's deployment pipeline, or as part of some disaster recovery process. The possibilities are endless... heck even write your own UI for managing sites or deploying new sites/VM/whatever!&lt;/p&gt;&lt;p&gt;So lets see - &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;CLI hackery coolness... ✓&lt;/li&gt;
  &lt;li&gt;Node.js hipster bragging rights... ✓&lt;/li&gt;
  &lt;li&gt;Azure website created and deployed with about 6 commands... ✓&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Not bad for a few minutes work!&lt;/p&gt;</content></entry><entry><title>Technology in the Cloud</title><updated>Wed Jul 11 23:00:00 UTC 2012</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2012/07/11/technology-in-the-cloud/"></link><id>urn:yobriefca-se:feed:post:Technology in the Cloud</id><content type="html">&lt;p&gt;The Cloud. As much as the term has been pummelled into meaningless marketing sputum by the guys in expensive suits and fake smiles it does exist and is distinct from a typical "throw all your stuff in a data center" setup.&lt;/p&gt;&lt;p&gt;The Cloud is distinct, as well, in terms of how you think about your solution architecture. The typical old school approach would be to just create big monoliths to process your data but that doesn't work out so well in the cloud. Of course the considerations for the cloud aren't new, hell no - things like SOA have been around for an age, but if you want to harness the benefits of the cloud as the internet intended you will be narrowing your options. No more just cobbling common bits together and crossing your fingers. &lt;/p&gt;&lt;p&gt;So fine - architecting for the cloud has some special considerations but thats not what I want to talk about - there are better people than me to cover that.&lt;/p&gt;&lt;p&gt;What I want to talk about is use of technology within that architecture. I've never been a fan of the one-size-fits-all-painful-or-not technology stack driven almost solely by a need to avoid unnecessary education of developers. And, now I feel the cloud is strengthening my view that a default stack is more trouble than it's worth. More importantly it's really adding momentum to the whole polyglot architecture, or simply using the right tools for the job.&lt;/p&gt;&lt;p&gt;Let me explain. Any default stack, by definition, needs to cater to many user cases and as such brings a certain amount of sacrifice with it. Sacrifices come in many forms but usually in performance, memory footprint and/or verbose configuration. In the cloud you are, in essence, in a Pay-As-You-Go model, every clock cycle and every bit of storage costs. Now that heavy ORM with its less than ideal queries and slow relationship mapping is starting to cost you money EVERY request. In fact, it's probably backed by that storage heavy relational database for all your non-relational data. Same for that rather large web framework you've got there.... every time to deal with a spike and scale that badboy out and you're having to use medium instances rather than small. That SOAP based webservice that requires triple the bandwidth to service a request... ugh you get the point.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;In the cloud the default stack can easily bleed money.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;I guess this is less about the default stack and more about just using the right tools to get the job done in the most effective manner - afterall you're paying for this stuff now. You kind of were before but in such a coarse grained manner it didn't matter - it does now.&lt;/p&gt;&lt;p&gt;In summary - the cloud has started to make technology decisions more accountable and we need to ensure that those decisions aren't costing our stakeholders more money than necessary.&lt;/p&gt;&lt;p&gt;PS.&lt;/p&gt;&lt;p&gt;I'm not going to sit here and preach about the which specific technologies to use but come on - if your storing Session State in a Oracle database, switch to Riak, or Redis. If you're building a nice scalable API then use something like Scala which promotes immutable state and concurrency out of the box over something like vanilla Java (or perhaps just a better framework Spring-WS vs Dropwizard for example). JSON over XML or a binary format (Protobuf for example) for machine to machine communication. A small node.js web site over ASP.NET Webforms for simple sites. The list goes on. That is to say consider this advice against the other factors driving technical decisions - dont JUST go for the smallest, lightest tools because it MIGHT be cheaper. Do the research.&lt;/p&gt;&lt;p&gt;Finally, perhaps you've got another IT team needing to support this new solution? Bring them along this journey too, educate them as you educate yourself, dont just throw the finished thing over the wall with a 1 week handover and a pat on the back.&lt;/p&gt;&lt;p&gt;Don't be afraid - it's a super fun world we live in!&lt;/p&gt;</content></entry></feed>