<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><id>urn:yobriefca-se:feed:docker</id><updated>Fri May 22 00:00:00 UTC 2015</updated><title type="text">Yo! Briefcase: docker</title><link rel="self" href="https://yobriefca.se/feed/docker.xml"></link><entry><title>Provisioning Postgres via Docker</title><updated>Fri May 22 00:00:00 UTC 2015</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2015/05/22/provisioning-postgres-via-docker/"></link><id>urn:yobriefca-se:feed:post:Provisioning Postgres via Docker</id><content type="html">&lt;p&gt;&lt;a href="/blog/2015/05/20/provisioning-postgres-via-vagrant-and-ansible/"&gt;Previously&lt;/a&gt; we looked at &lt;a href="/blog/2015/05/20/provisioning-postgres-via-vagrant-and-ansible/"&gt;provisioning Postgres via Vagrant and Ansible&lt;/a&gt; and in the spirit of trying something a bit different lets do the same thing using &lt;a href="http://docker.io"&gt;Docker&lt;/a&gt;. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;This was new territory for me but this guide will get you far enough for hacking around on a project. If this is an awful way of doing things let me know.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Same rules apply - we want to provision a project level Postgres instance listening on host port &lt;code&gt;5432&lt;/code&gt; with a new database and user. &lt;/p&gt;&lt;h2&gt;boot2docker&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;If you're not using &lt;code&gt;boot2docker&lt;/code&gt; (if you're on a supported Linux platform) you can skip this bit&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Docker is primarily a Linux based tool but there are wrappers for Windows and OSX. Since I'm using a Mac I'll also use &lt;a href="http://boot2docker.io/"&gt;boot2docker&lt;/a&gt; that uses a Linux VM and proxies requests to the VM.&lt;/p&gt;&lt;p&gt;I'm going to assume that at this point we have &lt;code&gt;docker&lt;/code&gt; and, if necessary, &lt;code&gt;boot2docker&lt;/code&gt; installed. If you're using OSX &lt;code&gt;brew&lt;/code&gt; is your friend (&lt;code&gt;brew install boot2docker&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;With &lt;code&gt;boot2docker&lt;/code&gt; installed we need to start it.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;boot2docker init # only need this the first time
boot2docker up
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After this has started you should see an information message about setting the necessary environment variables to allow docker and boot2docker to talk correctly. There is a quick way to do all this provided by &lt;code&gt;boot2docker&lt;/code&gt;&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;$(boot2docker shellinit)
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Dockerfile&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;Dockerfile&lt;/code&gt; specifies the rules for building a docker image that we can use to create container instances from. I'll just dump ours here and break it down after.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;FROM ubuntu

# add postgresql release repository to apt
RUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8
RUN echo "deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main" &amp;gt; /etc/apt/sources.list.d/pgdg.list

# install the necesarry packages
RUN apt-get update &amp;amp;&amp;amp; \
  apt-get install -y \
    python-software-properties \
    software-properties-common \
    postgresql-9.4

# run the rest as the postgres user
USER postgres

# create the database and user
RUN /etc/init.d/postgresql start &amp;amp;&amp;amp; \
    psql --command "CREATE USER docker WITH SUPERUSER PASSWORD 'docker';" &amp;amp;&amp;amp; \
    createdb -O docker docker

# ensure host can connect to postgres correctly
RUN echo "host all  all    0.0.0.0/0  md5" &amp;gt;&amp;gt; /etc/postgresql/9.4/main/pg_hba.conf
RUN echo "listen_addresses='*'" &amp;gt;&amp;gt; /etc/postgresql/9.4/main/postgresql.conf

# expose the 5432 port to outside the container
EXPOSE 5432

# set the default command to run when starting the container
CMD ["/usr/lib/postgresql/9.4/bin/postgres", \
      "-D", "/var/lib/postgresql/9.4/main",  \
      "-c", "config_file=/etc/postgresql/9.4/main/postgresql.conf"]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The flow is somewhat similar to the &lt;a href="/blog/2015/05/20/provisioning-postgres-via-vagrant-and-ansible/"&gt;previous&lt;/a&gt; post,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;We want to use the latest version of Postgres so we add the offical Postgres repo (and pgp-key) to the &lt;code&gt;apt&lt;/code&gt; catalogue.&lt;/li&gt;
  &lt;li&gt;We install all the necessary packages&lt;/li&gt;
  &lt;li&gt;Then we switch to the newly created &lt;code&gt;postgres&lt;/code&gt; user to perform the rest of the operations&lt;/li&gt;
  &lt;li&gt;In &lt;code&gt;RUN&lt;/code&gt; we start the database, create the user &lt;code&gt;docker&lt;/code&gt; with password &lt;code&gt;docker&lt;/code&gt; and finally create the &lt;code&gt;docker&lt;/code&gt; database.&lt;/li&gt;
  &lt;li&gt;We then update the necessary &lt;code&gt;*.conf&lt;/code&gt; files to allow us to connect to the Postgres instance outside of the container.&lt;/li&gt;
  &lt;li&gt;Next we &lt;code&gt;EXPOSE&lt;/code&gt; the 5432 port to the outside world (in a &lt;code&gt;boot2docker&lt;/code&gt; world this exposes it from the container to the VM, we still have a bit of work to do to get it exposed to the actual host.&lt;/li&gt;
  &lt;li&gt;Finally we stipulate how to start the Postgres instance when the container starts.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Running&lt;/h2&gt;&lt;p&gt;So now we have specified the rules in the &lt;code&gt;Dockerfile&lt;/code&gt; (this is somewhat similar to the Ansible playbook concept, sort of, but not quite) we want to build a versioned image from this,&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;docker build --tag postgres:9.4 --rm  .
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Running this from the same directory as the &lt;code&gt;Dockerfile&lt;/code&gt; will build an image called &lt;code&gt;postgres&lt;/code&gt; tagged with &lt;code&gt;9.4&lt;/code&gt;. The &lt;code&gt;--rm&lt;/code&gt; command tells docker to remove the intermediary images created.&lt;/p&gt;&lt;p&gt;We can see that our image has been created using the &lt;code&gt;docker images&lt;/code&gt; command&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt;  docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
postgres            9.4                 f25b0a52a81b        26 minutes ago      358.8 MB
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next we need to take this image and run it as a container,&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;docker run -p 5432:5432 --name postgres-instance -d postgres:9.4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Lets have a look at the option here,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-p 5432:5432&lt;/code&gt; publishes the &lt;code&gt;EXPOSE&lt;/code&gt;d &lt;code&gt;5432&lt;/code&gt; port effectively making it accessible outside the container.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;--name postgres-instance&lt;/code&gt; is the friendly name we want to give the container&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-d postgres:9.4&lt;/code&gt; is the image name and tag to create the container from&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We can verify the container instance is running using the &lt;code&gt;docker ps&lt;/code&gt; command&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; docker ps
CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS                    NAMES
f54de34e1308        postgres:9.4        "/usr/lib/postgresql   22 minutes ago      Up 22 minutes       0.0.0.0:5432-&amp;gt;5432/tcp   postgres-instance
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At this point we should be able to access the Postgres instance via the IP of the VM. To ge the IP we can use the &lt;code&gt;ip&lt;/code&gt; command of &lt;code&gt;boot2docker&lt;/code&gt;&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; boot2docker ip
192.168.59.103
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;boot2docker Port Forwarding&lt;/h2&gt;&lt;p&gt;If we are using &lt;code&gt;boot2docker&lt;/code&gt; we still wont be able to access the instance via localhost. As already mentioned &lt;code&gt;boot2docker&lt;/code&gt; transparently uses a Linux VM (via VirtualBox) to run docker within. By default this VM doesn't forward any ports to the host so we need to tell &lt;code&gt;boot2docker&lt;/code&gt; (via &lt;code&gt;VBoxManage&lt;/code&gt;) to open that port.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;VBoxManage modifyvm "boot2docker-vm" --natpf1 "postgres-port,tcp,127.0.0.1,5432,,5432"
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This command tells VirtualBox to forward the 5432 TCP port of the &lt;code&gt;boot2docker&lt;/code&gt; VM to the host.&lt;/p&gt;&lt;p&gt;At this point we should be able to access the Postgres instance via &lt;code&gt;localhost&lt;/code&gt; on the host as well as the VMs IP address directly.&lt;/p&gt;</content></entry></feed>