<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><id>urn:yobriefca-se:feed:dot-net</id><updated>Fri Jun 08 00:00:00 UTC 2012</updated><title type="text">Yo! Briefcase: dot-net</title><link rel="self" href="https://yobriefca.se/feed/dot-net.xml"></link><entry><title>MonoTouch - C# + iOS = Good Times</title><updated>Fri Jun 08 00:00:00 UTC 2012</updated><author><name>James Hughes</name></author><link href="/presentations/monotouch.pdf"></link><id>urn:yobriefca-se:feed:post:MonoTouch - C# + iOS = Good Times</id><content type="html"></content></entry><entry><title>.NET On a Diet</title><updated>Fri Jun 08 00:00:00 UTC 2012</updated><author><name>James Hughes</name></author><link href="/presentations/dotnet-on-a-diet.pdf"></link><id>urn:yobriefca-se:feed:post:.NET On a Diet</id><content type="html"></content></entry><entry><title>Monotouch: C# + iOS = Good Times</title><updated>Wed Jun 06 23:00:00 UTC 2012</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2012/06/06/monotouch-c-number-plus-ios-equals-good-times/"></link><id>urn:yobriefca-se:feed:post:Monotouch: C# + iOS = Good Times</id><content type="html">&lt;h2&gt;Slides&lt;/h2&gt;
&lt;script async="async" class="speakerdeck-embed" data-id="4fd0fb533bb27c0022030674" data-ratio="1.3333333333333333" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;&lt;h2&gt;Code&lt;/h2&gt;&lt;p&gt;&lt;a href="https://github.com/kouphax/monotouch-samples-ndc2012"&gt;https://github.com/kouphax/monotouch-samples-ndc2012&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Description&lt;/h2&gt;&lt;p&gt;MonoTouch allows you to harness all those C# skills and most of those handy .NET/Mono libraries to create truly native apps for iOS with a sprinkle of cross-platform support. But why not just use objective-c you cry? Choice is nice, so is C# and so is the range of libraries available for mono!&lt;/p&gt;&lt;p&gt;In this talk I will dive in to what makes MonoTouch so compelling for .NET developers wanting to break into iOS development and even how these skills can be harnessed to create cross platform native applications for iOS, Android and WP7 through a shared codebase.&lt;/p&gt;</content></entry><entry><title>.NET on a Diet</title><updated>Wed Jun 06 23:00:00 UTC 2012</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2012/06/06/dot-net-on-a-diet/"></link><id>urn:yobriefca-se:feed:post:.NET on a Diet</id><content type="html">&lt;h2&gt;Slides&lt;/h2&gt;
&lt;script async="async" class="speakerdeck-embed" data-id="4fd0fb8d3bb27c001f0309b7" data-ratio="1.3333333333333333" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;&lt;h2&gt;Description&lt;/h2&gt;&lt;p&gt;There are plenty of framework options in .NET. We have the big mainstream web frameworks like ASP.NET WebForms and MVC, the ORM abstractions and DataMappers in the form of Entity Framework, NHibernate and iBatis and services such as WCF requiring large amounts of careful configuration to get right. Unfortunately these frameworks can get in the way, abstractions breakdown and leak and eventually we end up fighting against the frameworks limitations.&lt;/p&gt;&lt;p&gt;This session will take a look at the feature-fit lightweight alternatives and how they can be used to compose a technology stack that is cruft-free and fit for purpose.&lt;/p&gt;</content></entry><entry><title>Behaviour Driven (Development|Design) in .NET</title><updated>Wed Mar 28 00:00:00 UTC 2012</updated><author><name>James Hughes</name></author><link href="/presentations/bdd-in-dotnet.pdf"></link><id>urn:yobriefca-se:feed:post:Behaviour Driven (Development|Design) in .NET</id><content type="html"></content></entry><entry><title>Speaking at NDC Oslo</title><updated>Mon Mar 19 00:00:00 UTC 2012</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2012/03/19/speaking-at-ndc-oslo/"></link><id>urn:yobriefca-se:feed:post:Speaking at NDC Oslo</id><content type="html">&lt;p&gt;&lt;img src="/images/blog/ndc.png" style="border:none; box-shadow:none; -webkit-box-shadow:none; width:100%;" /&gt;&lt;/p&gt;&lt;p&gt;Mike Cohn, Dan North, Robert C. Martin, Udi Dahan, Gojko Adzic, Billy Hollis, Laurent Bugnion, Venkat Subramaniam, Brad Wilson, Phil Haack, Rob Conery, Greg Young, Zach Holman..... and then me. So someone was drinking when deciding the line up for NDC Oslo right?&lt;/p&gt;&lt;p&gt;Seriously though I've been given one of the best opportunites of my career to talk alongside some of the shining lights of our industry at NDC Oslo so I better not drop the ball. Thank you to whoever gave me the opportunity. But hey if I mess up I've got another 2 shots at it... thats right I'm speaking not once, not twice but thrice.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://ndcoslo.oktaset.com/t-4960"&gt;.NET On a Diet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://ndcoslo.oktaset.com/t-4961"&gt;MonoTouch - C# + iOS = Good Times&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://ndcoslo.oktaset.com/t-4872"&gt;Mobile, How Do I Develop Thee? Let Me Count the Ways&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Still blown away by this, if you can't tell - given the calibre of people talking this is going to be a highlight of the year for sure. Also it couldn't have come at a better time - there is so much I've wanted to say about things like the OSS world in .NET, Mono and mobile development. Now I've got the perfect opportunity.&lt;/p&gt;&lt;p&gt;Now whats this .NET thing I keep hearing about :)&lt;/p&gt;</content></entry><entry><title>Using Parse in .NET and WP7</title><updated>Thu Jan 05 00:00:00 UTC 2012</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2012/01/05/using-parse-in-net-and-wp7/"></link><id>urn:yobriefca-se:feed:post:Using Parse in .NET and WP7</id><content type="html">&lt;blockquote&gt;&lt;p&gt;UPDATE: Being completely wrong in assuming WP7 supports &lt;code&gt;dynamic&lt;/code&gt; which apparently it doesn't the current build wont run in WP7. So another item on the list is a version that doesn't rely on &lt;code&gt;dynamic&lt;/code&gt; I guess. Sorry for misleading anyone on that front - I did say it was rough and mostly untested right?&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;&lt;a href="https://www.parse.com/"&gt;Parse&lt;/a&gt; is a site aimed at providing a simple service for pushing and pulling data on mobile devices. You can create applications and store your mobile data there, create users, provide logon/off mechanisms and even achieve push notifications. There are 2 ways to access &lt;a href="https://www.parse.com/"&gt;Parse&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Via its natively compiled binaries (on iOS and Android)&lt;/li&gt;
  &lt;li&gt;Via a its Rest API (for all non iOS/Android devices and desktops)&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Now I wanted to try and create bindings for the iOS library so I could use it for a Monotouch application I've been playing with but truth be told the whole process confused the hell out of me. Thing was the REST API gave me everything I needed so I started recently to write a dynamic wrapper around the API. Currently built on .NET in Visual Studio (Mono on my list) with a few sanity tests it works well enough to put it out there incase anyone was wanting to do something similar and could extract value from it.&lt;/p&gt;&lt;p&gt;It's pretty early at the minute - in fact all you can do with this first spike is basic object CRUD. No querying yet, no special user management features etc. But they will come. So what could you use it for? Well a number of things,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;WP7 Cloud Storage&lt;/li&gt;
  &lt;li&gt;Monotouch (and Monodroid) storage until someone smarter than me creates proper bindings to the actual iOS frameworks&lt;/li&gt;
  &lt;li&gt;It's an object store so why not use it to store data on any web app?&lt;/li&gt;
  &lt;li&gt;Just for tinkering.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;It makes use of &lt;code&gt;dynamic&lt;/code&gt; from .NET 4 so you can kind of pass it arbitrary stuff and get arbitrary stuff back (Parse is schemaless so this makes sense for me). It also means you wont have to create concrete classes for every single thing you want to store.&lt;/p&gt;&lt;p&gt;If you want to run the tests you'll need to sign up for Parse, create an app and update the &lt;code&gt;consts&lt;/code&gt; in &lt;code&gt;describe_Parsely&lt;/code&gt; to point to your new app (and authenticate).&lt;/p&gt;&lt;h2&gt;Sample Uses&lt;/h2&gt;
&lt;pre class="highlight"&gt;&lt;code class="csharp "&gt;&lt;span class="c1"&gt;// create your parsley API&lt;/span&gt;
&lt;span class="n"&gt;Parsley&lt;/span&gt; &lt;span class="n"&gt;parsley&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Parsley&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;applicationId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;masterKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// create new class&lt;/span&gt;
&lt;span class="kt"&gt;dynamic&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parsley&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MyClass"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;CoolProperty&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// do other cool stuff&lt;/span&gt;
&lt;span class="n"&gt;parsley&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MyClass"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objectId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;CoolProperty&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="n"&gt;dyanmic&lt;/span&gt; &lt;span class="n"&gt;myObject&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parsley&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MyClass"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objectId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;parsley&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objectId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Outstanding Tasks&lt;/h2&gt;&lt;p&gt;Lots. But here is the main ones I see right now.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Compile on Mono and show MonoTouch some Parse love.&lt;/li&gt;
  &lt;li&gt;Samples (for WP7, Monotouch, possibly Monodroid)&lt;/li&gt;
  &lt;li&gt;Add Queries&lt;/li&gt;
  &lt;li&gt;Add User Management&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;It's probably fairly rough right now and could do with some TLC if anyone wants to pitch in? I've given it a name (Parsley) but that in no way implies this is going to be a long running project or anything. I just like naming things. Get it while it's hot, the code is in my &lt;a href="https://bitbucket.org/kouphax/parsley"&gt;usual place&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;Pre-Post Update&lt;/h2&gt;&lt;p&gt;Rather than update this blog post I decided to tack this on here. With BitBucket experiencing some issues at present I spent about 10 minutes hacking in the user management features. No tests written yet (oh no I have broken all the rules and must be beaten with oversized crayons) so lets just say that it's very edge, very experimental at the minute. Also bonus - returning a collection of objects is implemented as &lt;code&gt;Query&lt;/code&gt; but again totally untested (fast and loose - it's how I roll son). There be dragons there therebe!&lt;/p&gt;&lt;p&gt;Happy hacking.&lt;/p&gt;&lt;p&gt;Can I have my WP7 MVP now please? &lt;strong&gt;Kidding&lt;/strong&gt;&lt;/p&gt;</content></entry><entry><title>A Nancy Module that Behaves like a Rails Controller... Mother of God</title><updated>Fri Dec 30 00:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/12/30/a-nancy-module-that-behaves-like-a-rails-controller-dot-dot-dot-mother-of-god/"></link><id>urn:yobriefca-se:feed:post:A Nancy Module that Behaves like a Rails Controller... Mother of God</id><content type="html">&lt;p&gt;If &lt;a href="http://nancyfx.org"&gt;Nancy&lt;/a&gt; is inspired by Sinatra I thought I'd have a little fun a create an abstract class that created modules that kind of mimic the behaviour of Rails controllers. Code first, ask questions later...&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="csharp "&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RailslikeControllerFor&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TEntity&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NancyModule&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;TEntity&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;RailslikeControllerFor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEntity&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"s"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;@"/"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;@"/new"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;@"/"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;@"/(?&amp;lt;id&amp;gt;[\d])"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;@"/(?&amp;lt;id&amp;gt;[\d])/edit"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Edit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;Put&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;@"/(?&amp;lt;id&amp;gt;[\d])"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;@"/(?&amp;lt;id&amp;gt;[\d])"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Destroy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;Nancy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt; &lt;span class="n"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;dynamic&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;Nancy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt; &lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;dynamic&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;Nancy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt; &lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;dynamic&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;Nancy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt; &lt;span class="n"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;dynamic&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;Nancy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt; &lt;span class="n"&gt;Edit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;dynamic&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;Nancy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt; &lt;span class="n"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;dynamic&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;Nancy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt; &lt;span class="n"&gt;Destroy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;dynamic&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;Nancy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt; &lt;span class="n"&gt;AsView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StackTrace&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;GetFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;GetMethod&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEntity&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{0}/{1}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To use it you just subclass the class and override the necessary methods. Like so.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="csharp "&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;QuestionModule&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;RailslikeControllerFor&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;IQuestionsRepository&lt;/span&gt; &lt;span class="n"&gt;questions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;QuestionModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IQuestionsRepository&lt;/span&gt; &lt;span class="n"&gt;questions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;questions&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;questions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt; &lt;span class="nf"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;dynamic&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;AsView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;questions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetAll&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What the base class does is create the necessary CRUDdy urls with a base route starting with the name of the entity you pass in, pluralised in the easiest way possible. In this case &lt;code&gt;/questions&lt;/code&gt;. The rules match what you wold get for a controller in Rails.&lt;/p&gt;
&lt;table style="width:100%" border="1"&gt;
    &lt;tbody&gt;
        &lt;tr style="background-color: #666;color:#fff;"&gt;
            &lt;th style="padding:4px;font-weight:bold;"&gt;Verb &lt;/th&gt;
            &lt;th style="padding:4px;font-weight:bold;"&gt;Path&lt;/th&gt;
            &lt;th style="padding:4px;font-weight:bold;"&gt;Action &lt;/th&gt;
            &lt;th style="padding:4px;font-weight:bold;"&gt;&lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style="padding:4px;"&gt;&lt;span class="caps"&gt;GET&lt;/span&gt;     &lt;/td&gt;
            &lt;td style="padding:4px;"&gt;/questions           &lt;/td&gt;
            &lt;td style="padding:4px;"&gt;index    &lt;/td&gt;
            &lt;td style="padding:4px;"&gt;display a list of all questions&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr style="background-color: #fff;"&gt;
            &lt;td style="padding:4px;"&gt;&lt;span class="caps"&gt;GET&lt;/span&gt;     &lt;/td&gt;
            &lt;td style="padding:4px;"&gt;/questions/new       &lt;/td&gt;
            &lt;td style="padding:4px;"&gt;new      &lt;/td&gt;
            &lt;td style="padding:4px;"&gt;return an &lt;span class="caps"&gt;HTML&lt;/span&gt; form for creating a new question&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style="padding:4px;"&gt;&lt;span class="caps"&gt;POST&lt;/span&gt;    &lt;/td&gt;
            &lt;td style="padding:4px;"&gt;/questions           &lt;/td&gt;
            &lt;td style="padding:4px;"&gt;create   &lt;/td&gt;
            &lt;td style="padding:4px;"&gt;create a new question&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr style="background-color: #fff;"&gt;
            &lt;td style="padding:4px;"&gt;&lt;span class="caps"&gt;GET&lt;/span&gt;     &lt;/td&gt;
            &lt;td style="padding:4px;"&gt;/questions/:id       &lt;/td&gt;
            &lt;td style="padding:4px;"&gt;show     &lt;/td&gt;
            &lt;td style="padding:4px;"&gt;display a specific question&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style="padding:4px;"&gt;&lt;span class="caps"&gt;GET&lt;/span&gt;     &lt;/td&gt;
            &lt;td style="padding:4px;"&gt;/questions/:id/edit  &lt;/td&gt;
            &lt;td style="padding:4px;"&gt;edit     &lt;/td&gt;
            &lt;td style="padding:4px;"&gt;return an &lt;span class="caps"&gt;HTML&lt;/span&gt; form for editing a question&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr style="background-color: #fff;"&gt;
            &lt;td style="padding:4px;"&gt;&lt;span class="caps"&gt;PUT&lt;/span&gt;     &lt;/td&gt;
            &lt;td style="padding:4px;"&gt;/questions/:id       &lt;/td&gt;
            &lt;td style="padding:4px;"&gt;update   &lt;/td&gt;
            &lt;td style="padding:4px;"&gt;update a specific question&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style="padding:4px;"&gt;&lt;span class="caps"&gt;DELETE&lt;/span&gt;  &lt;/td&gt;
            &lt;td style="padding:4px;"&gt;/questions/:id       &lt;/td&gt;
            &lt;td style="padding:4px;"&gt;destroy  &lt;/td&gt;
            &lt;td style="padding:4px;"&gt;delete a specific question&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;There is a teeny-tiny bit of sugar in the &lt;code&gt;AsView&lt;/code&gt; method that will look up the corresponding view. So the module above would resolve its &lt;code&gt;Index&lt;/code&gt; method to &lt;code&gt;questions/index&lt;/code&gt; and the view engine would find the correct file (eg. for Razor - &lt;code&gt;questions/index.cshtml&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;I've already said it's a bit of fun but I have actually used this at least once - there is probably more that could be added but it'll do for a first spike at least. Any use to anyone?&lt;/p&gt;</content></entry><entry><title>Wednesday Tip: C# Type aliases</title><updated>Wed Nov 16 00:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/11/16/wednesday-tip-c-number-type-aliases/"></link><id>urn:yobriefca-se:feed:post:Wednesday Tip: C# Type aliases</id><content type="html">&lt;p&gt;Ever written code that looks quite like this?&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="csharp"&gt;&lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;KeyValuePair&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;KeyValuePair&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I have. Ugly and noisy isn't it! &lt;!--more--&gt; OK you could make it &lt;em&gt;slightly&lt;/em&gt; less noisy by using &lt;code&gt;var&lt;/code&gt;&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="csharp"&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;KeyValuePair&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or I suppose you could ahead and create yet another random type to abstract the implementation out of the way but thats just too much work for something internal to a class.&lt;/p&gt;&lt;p&gt;Turns out you can make use of alises. I've always known about using alises for namespaces to either resolve possible type conflicts or to make code a bit more understandable&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="csharp"&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;CoreWeb&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Web&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CoreWeb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So this works with namespaces &lt;strong&gt;AND&lt;/strong&gt; types.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="csharp"&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Cache&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;KeyValuePair&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This allows us to make the declaration above in a much nicer manner,&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="csharp"&gt;&lt;span class="n"&gt;Cache&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Cache&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;OK so there are way to many uses of the word cache there but you get the gist. Handy to know. Never knew this until today #youlearnsomethingneweveryday&lt;/p&gt;</content></entry><entry><title>Nancy JSONP Hook</title><updated>Tue Nov 01 00:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/11/01/nancy-jsonp-hook/"></link><id>urn:yobriefca-se:feed:post:Nancy JSONP Hook</id><content type="html">&lt;blockquote&gt;&lt;p&gt;3 Nov 2011: As of Nancy v0.9 this is part of the core (same logic applies)&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;I needed to write a simple JSONP capable service recently and decided to run with &lt;a href="http://nancyfx.org"&gt;Nancy&lt;/a&gt;. Turns out Nancy doesn't give us a way to do JSONP so I set about creating something that fitted my use case. The fruits of my very very short labour (thanks to the super-hyper-flexible-powerfulness of the Nancy Pipeline) can be seen here. The full source is available in the &lt;a href="https://github.com/kouphax/nancy-jsonp"&gt;Github repo&lt;/a&gt; and hopefully we can get this pushed into the core of Nancy shortly (or at least part of the official repo one way or another) - just for the geek cred of course :)&lt;/p&gt;
&lt;!--more--&gt;&lt;h2&gt;Implementation Rundown&lt;/h2&gt;&lt;p&gt;I took the same approach as the existing hooks (using the SassAndCoffee one as my implementation pattern) so created a static &lt;code&gt;Hooks&lt;/code&gt; class with an &lt;code&gt;Enable&lt;/code&gt; method that simply adds a new item to the end of the pipeline&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="csharp"&gt;&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;/// Enable JSONP support in the application&lt;/span&gt;
&lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;/// &amp;lt;param name="pipeline"&amp;gt;Application Pipeline to Hook into&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Enable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IApplicationPipelines&lt;/span&gt; &lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AfterRequest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddItemToEndOfPipeline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PrepareJsonp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The meat of the work lies in the &lt;code&gt;PrepareJsonp&lt;/code&gt; method&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="csharp "&gt;&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;/// Transmogrify original response and apply JSONP Padding&lt;/span&gt;
&lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;/// &amp;lt;param name="context"&amp;gt;Current Nancy Context&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;PrepareJsonp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NancyContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;isJson&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"application/json"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;hasCallback&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"callback"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;HasValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isJson&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;hasCallback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// grab original contents for running later&lt;/span&gt;
        &lt;span class="n"&gt;Action&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;original&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Contents&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"callback"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// set content type to application/javascript so browsers can handle it by default&lt;/span&gt;
        &lt;span class="c1"&gt;// http://stackoverflow.com/questions/111302/best-content-type-to-serve-jsonp&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"application/javascript"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Contents&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// disposing of stream is handled elsewhere&lt;/span&gt;
            &lt;span class="n"&gt;StreamWriter&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StreamWriter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;AutoFlush&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;

            &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{0}("&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;original&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;");"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let me highlight a few of the key areas here.&lt;/p&gt;&lt;h3&gt;Determine if Response need JSONP Padded&lt;/h3&gt;&lt;p&gt;I decided to take a basic approach to determining if the request should return a JSONP response,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If the content type of the current response is &lt;code&gt;application/json&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;If there is a query string parameter called &lt;code&gt;callback&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Here is what we need to satisfy that,&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="csharp "&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;isJson&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"application/json"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;hasCallback&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"callback"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;HasValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isJson&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;hasCallback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I am sure this could be refined and open to suggestion (perhaps more applicable content types or extra possible configuration for the callback parameter). I wonder if it is a bit safer to restrict requests that are GET requests seeing as that is the only way to do JSONP? Hmmmm.&lt;/p&gt;&lt;p&gt;Next thing I set the content type to &lt;code&gt;application/javascript&lt;/code&gt; as that makes perfect sense&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="csharp "&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"application/javascript"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally I wrap the original responses content in the JSONP "padding" (the callback function) and write everything out.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="csharp "&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Contents&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// disposing of stream is handled elsewhere&lt;/span&gt;
    &lt;span class="n"&gt;StreamWriter&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StreamWriter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;AutoFlush&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{0}("&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;original&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;");"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So all in all very simple but damn I'm proud that I got off my arse and contributed to such a stellar community. hopefully someone finds this useful.&lt;/p&gt;</content></entry><entry><title>Tinyweb.FluentSecurity v0.1 Released</title><updated>Tue Oct 18 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/10/18/tinyweb-dot-fluentsecurity-v0-dot-1-released/"></link><id>urn:yobriefca-se:feed:post:Tinyweb.FluentSecurity v0.1 Released</id><content type="html">&lt;blockquote&gt;&lt;p&gt;Slight change here - FluentSecurity is now FluentAuth to avoid any confusion with a similarly named product of which there is some inspiration taken. Anyway on with the original post....&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;I have procrastinated long enough on this and it was blocking some of the other work I wanted to get on with. I have just pushed v0.1 to Nuget and launched the &lt;a href="http://yobriefca.se/projects/fluentauth/"&gt;site sans documentation&lt;/a&gt;.&lt;/p&gt;
&lt;!--more--&gt;&lt;p&gt;Not a great deal has changed since my last announcement, well it has but it hasn't been documented as it should be backwards compatible. Just a few more configuration options that I'll explain once I get the documentation rolled out.&lt;/p&gt;
&lt;script type="text/javascript"&gt;
    (function () {
        var nb = document.createElement('script'); nb.type = 'text/javascript'; nb.async = true;
        nb.src = 'http://s.prabir.me/nuget-button/0.2.1/nuget-button.min.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(nb, s);
    })();
&lt;/script&gt;
&lt;pre class="nuget-button"&gt;Install-Package Tinyweb.FluentAuth&lt;/pre&gt;&lt;p&gt;So go check it out and hopefully you'll find it useful - plenty of plans for expansion to other frameworks and some more API changes coming too. Now back to procrastinating.&lt;/p&gt;</content></entry><entry><title>refORM: Death to ORMs in .NET</title><updated>Mon Oct 17 00:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="/presentations/reform-death-to-orms.pdf"></link><id>urn:yobriefca-se:feed:post:refORM: Death to ORMs in .NET</id><content type="html"></content></entry><entry><title>refORM: Death to ORMs in .NET</title><updated>Sun Oct 09 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/10/09/reform-death-to-orms-in-net/"></link><id>urn:yobriefca-se:feed:post:refORM: Death to ORMs in .NET</id><content type="html">&lt;p&gt;Data Access is a difficult area to master. There are plenty of frameworks such as Entity Framework, NHibernate, i/myBatis. These frameworks attempt to make data access simpler but while these products are widely used they can lead to leaky abstractions forcing us to work around constraints of the technology or introduce the nightmare of trying to figure out what is happening deep down in the frameworks internals.&lt;/p&gt;&lt;p&gt;In this session we will look at the various lightweight alternatives and the advantages they offer as well as provide rationale about why the more heavyweight approach isn't always the best approach.&lt;/p&gt;&lt;p&gt;&lt;a href="https://bitbucket.org/kouphax/ddd-data-access/"&gt;Demo Code and Examples&lt;/a&gt;&lt;/p&gt;
&lt;script src="http://speakerdeck.com/embed/4eb7ebb05040b9005400eb4f.js"&gt;&lt;/script&gt;</content></entry><entry><title>DDDNorth Retrospective</title><updated>Sat Oct 08 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/10/08/dddnorth-retrospective/"></link><id>urn:yobriefca-se:feed:post:DDDNorth Retrospective</id><content type="html">&lt;p&gt;So its the day after DDD North and I'm more or less getting packed and ready to do the long boring travel bit home, which is really less travelling and more waiting around. Anyway DDD North was pretty special. Excellent turn out, great location and above all some great talks. My talk (refORM: Death to ORMs in .NET) had a technical problem with the projector which meant the live demo section I wove in since last weeks talk had to be abandoned, shit happens. It also went very fast, the talk was over in about 35 minutes but at least there was plenty of banter and questions - so at least the people seemed to be engaged. Enough about my woes. I'll have the slides and the (super secret) demo code available as soon as get back home.&lt;/p&gt;&lt;p&gt;So what about the rest of the talks?&lt;/p&gt;&lt;h2&gt;Commercial Software Development - Writing Software Is Easy, Not Going Bust is the Hard Bit - Liam Westley&lt;/h2&gt;&lt;p&gt;Liam took us through some of his personal experience of working in the industry as a sole(ish) trader. He highlighted some of the things that you should really be doing to ensure you aren't "wasting time" and raised a very valid point - every time you take a support call you are bleeding money. Makes sense but I initially rebelled against this premise. I had wrongly jumped to the conclusion that if you don't get support calls you don't need a support contract - which in hindsight is pretty stupid of me.&lt;/p&gt;&lt;p&gt;He also highlighted that if the phone does ring, or a support issue is raised then you need to make sure you have all the information at hand. Detailed logging of crucial areas of your system, automated emails or tweets when the system detects something is wrong and generally making sure you don't need to rely on the end user to tell you what has went wrong. Again makes perfect sense. Obviously writing good code that is well tested prior to release is another winner in this area.&lt;/p&gt;&lt;p&gt;In terms of releases he re-iterated the old "release early" mantra. You don't want to waste time writing features that no one is going to use and you aren't really going to know this until users have the product in their hands - the minimum viable product.&lt;/p&gt;&lt;p&gt;All in all a great session, nothing massively new for me here but I love hearing this stuff from people with real experience in it - it really helps solidify my beliefs in good code and early release.&lt;/p&gt;&lt;h2&gt;"The Happy Programmer" - Is It a Myth? - Andy Gibson&lt;/h2&gt;&lt;p&gt;Looking the various aspects of a developers life that determine if it is truly possible to have a "happy developer". A fair amount of audience participation looking at the best office type, the rationale for having the best hardware and all that other stuff.&lt;/p&gt;&lt;h2&gt;Continuous Delivery - Paul Stack&lt;/h2&gt;&lt;p&gt;Certainly the highlight of the day for me. Many people I work with believe that CD is a long way off for many projects but there was so much hard evidence at this talk that debunked this theory. If it can be scripted or automated in anyway it should be. This includes HTML, JS, CSS, and C# code analysis, unit tests, acceptance tests, environment configuration, document generation, Sharepoint config and setup (yep that to), VM rollout, DB upgrades and backups. Everything really.&lt;/p&gt;&lt;p&gt;A great example of this was a massive search engine in Norway that turned their 2 1/2 year release cycle into once every 4 hours. This wasn't some big massive leap, it was done by gradually shortening the release cycle and tightening up the processes bit by bit till they got there.&lt;/p&gt;&lt;p&gt;A good point was raised on this topic later in the evening - CI/CD scripts should be the very first thing you do on a project. Then you build them up gradually as and when you need to. No point in waiting till the end of the first release do this - it'll hurt way too much and never get done.&lt;/p&gt;&lt;h2&gt;The 10 Habits of Highly Effective Programmers - Dennis Doomen&lt;/h2&gt;&lt;p&gt;The last session, and after being up since 4AM I was wrecked. But you know what? Even with the tiredness and the heat of the room I remained engaged. Again a lot of the topics in this talk I was already very familiar with but it was great to get a different perspective and new techniques for achieving them. Also managed to increase my "To Read" list with a few books from this session. Nice way to finish off the day.&lt;/p&gt;&lt;h2&gt;Grok Talks&lt;/h2&gt;&lt;p&gt;Through lunchtime there were a number of quick, informal grok talks. The one I want to mention was on "teaching your kids to code" and showed various tools/games like LightBot and SmallBasic - my son is still a tiny bit young for this sort of thing but he'll probably be forced to do some of this with me being his dad. I'd also have liked to have seen Scratch (from MIT) mentioned as this is a similar technology.&lt;/p&gt;&lt;p&gt;Overall the day was beyond my expectations - plenty of refreshments, goodies, decent food and great people. To be honest I really felt like a small fish presenting though - after seeing the other guys I felt my delivery was decidedly amateur. But hey thats why I am doing this - to get better. Looking forward to the next one! Thanks everyone.&lt;/p&gt;&lt;p&gt;Next up I have GOTOAmsterdam (this Wednesday). Funnily enough I need to find my passport ASAP as 2 minutes after jokingly saying "Wouldn't it be funny if I couldn't find my passport?" to my wife, well, you can probably guess what happened. So not only did I look like a dick in-front of my lovely wife I also managed to put my GOTO conf attendance in jeopardy - hell I really am a dick!&lt;/p&gt;</content></entry><entry><title>DDDBelfast Retrospective</title><updated>Sun Oct 02 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/10/02/dddbelfast-retrospective/"></link><id>urn:yobriefca-se:feed:post:DDDBelfast Retrospective</id><content type="html">&lt;p&gt;So I'm no longer a conference speaker virgin. It was so good I did it twice in the same day. How'd it go? Went good I guess. From a conference stand point it seemed to fly by. There was a kind of laid back atmosphere about the whole thing and the numbers, while lower than expected were high enough to make all the talks feel comfortably occupied. I skipped the first block to get my talk prepared but managed to pull in a few talks after I got my first one over.&lt;/p&gt;&lt;h1&gt;Other Peoples Talks&lt;/h1&gt;&lt;h2&gt;Behavioural Driven Development (BDD) with F# - Phillip Trelford&lt;/h2&gt;&lt;p&gt;Big toss up here as I wanted to attend &lt;a href="http://developerdeveloperdeveloper.com/dddie11/ViewSession.aspx?SessionID=871"&gt;Andrea's Code Kata&lt;/a&gt; as well but this talk won out. It was a decent talk - a nice mix of theory and practise. Interesting to see Phils testing framework, &lt;a href="http://tickspec.codeplex.com"&gt;TickSpec&lt;/a&gt;, in action, I must revisit this again some time soon (a promise I'll probably never keep :( ).&lt;/p&gt;&lt;h2&gt;CQRS - Bringing Elegance to "Normal" Applications - Ashic Mahtab&lt;/h2&gt;&lt;p&gt;The last CQRS talk I attended flew right over my head in terms of complexity. Since then I've done a bit of research and came prepared. I really didn't need to though. Ashic did a really good job of taking something that appears quite complex and conveying the message quite nicely. Interested to see his 250 LOC CQRS framework as well!&lt;/p&gt;&lt;h1&gt;My Talks&lt;/h1&gt;&lt;h2&gt;refORM: Death to ORMs in .NET&lt;/h2&gt;&lt;p&gt;Went quite well. I played it safe in terms of not going for any live coding but I think it would have been much better if I had (and plan to next time week at DDDNorth) as it was more dry than I would have liked. Lots of good discussion after the presentation that I might try and bring in next time too.&lt;/p&gt;&lt;h2&gt;Coffeescript the Awesome&lt;/h2&gt;&lt;p&gt;Slight technical problem resulted in the majority of the code samples being nearly unreadable for a lot of the presentation which was a total fail. I think I flew through the whole thing too - perhaps a bit of live coding would have improved this one too. That said the discussion lasted as long as the talk more or less which is good. Another problem was a number of people came in quite late and missed the first lot of slides which meant I was repeating the content at the end but hey thats fine.&lt;/p&gt;</content></entry><entry><title>Tinyweb Fluent Security</title><updated>Sun Sep 25 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/09/25/tinyweb-fluent-security/"></link><id>urn:yobriefca-se:feed:post:Tinyweb Fluent Security</id><content type="html">&lt;p&gt;I've been working on a little project recently that is using Tinyweb. It's a typical little CRUDdy app and makes use of typical security features in a web app. Tinyweb itself doesn't provide any sort of custom security features out of the box but as it sits on top of ASP.NET you can avail of all the normal membership stuff. Problem is though - the default membership stuff, when working directly with it, is a bit cumbersome. I recently tinkered with a project for ASP.NET MVC called &lt;a href="http://www.fluentsecurity.net/"&gt;FluentSecurity&lt;/a&gt; that added a fluent syntax to configuring security for ASP.NET MVC applications. Taking a healthy dose of inspiration from this project I rolled a lightweight Tinyweb version of my own. I figure this might be useful to someone else so I have now created a new project specifically for this. It's probably totally broken in areas but the areas I've written tests around appear to work. &lt;/p&gt;&lt;p&gt;The source is available in a &lt;a href="https://bitbucket.org/kouphax/tinyweb-fluentsecurity"&gt;BitBucket repository&lt;/a&gt; so feel free to critique. Once I get it tested better, documents written up and generally applied a bit of sipt and polish I'll push it to Nuget and the fun can really begin.&lt;/p&gt;&lt;h1&gt;Tinyweb.FluentSecurity&lt;/h1&gt;&lt;p&gt;FluentSecurity comes as a 2 part solution&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The &lt;code&gt;Security&lt;/code&gt; class is the main entry point for configuring FluentSecurity and authenticating users&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;SecurityFilter&lt;/code&gt; class is a Tinyweb filter that performs auth tests on the current request&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Security --&lt;/p&gt;&lt;p&gt;The &lt;code&gt;Security&lt;/code&gt; class provides a central location to configure FluentSecurity. &lt;code&gt;Security&lt;/code&gt; is also responsible for executing the auth tests you pass to it.&lt;/p&gt;&lt;h3&gt;Security.Configure(Action&lt;Configurator&gt; configurator)&lt;/Configurator&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Configure&lt;/code&gt; lets you define the configuration for you module. It accepts an Action that can be used to define rules for each handler. For example&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;Security.Configure(c =&amp;gt;
{
    c.For&amp;lt;RootHandler&amp;gt;().DenyAnonymousAccess();
    c.For&amp;lt;AdminHandler&amp;gt;().RequireRoles("Admin");
    c.For&amp;lt;UserHandler&amp;gt;().DenyRoles("Admin");
    c.For&amp;lt;SecretHandler&amp;gt;().AllowVerbs(Security.AllowedVerbs.GET | Security.AllowedVerbs.POST);
});

Tinyweb.Init();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We call &lt;code&gt;Security.Configure&lt;/code&gt; just before we Init Tinyweb (though it can be done at anytime realistically speaking). The configuration block shows off most of the ways you can configure handlers e.g.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;DenyAnonymousAccess&lt;/code&gt; will prevent, as the name suggests, all anonymous users from accessing this handler&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;RequireRoles&lt;/code&gt; specifes 1..N roles that are required to access this handler&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;DenyRoles&lt;/code&gt; specifies 1..N roles that aren't permitted to access this handler&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;AllowVerbs&lt;/code&gt; restricts the HTTP Verbs that can be used to access this handler (PUT, POST, GET etc.)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;WithCustomRule&lt;/code&gt; (not listed) allows you to specify a function that can be used to apply a custom rule to each request&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Each method returns the configuration object so it is possible to chain the calls to create more complex rules.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;Security.Configure(c =&amp;gt;
    c.For&amp;lt;EditHandler&amp;gt;()
        .DenyAnonymousAccess()
        .RequireRoles("Author")
        .DenyRoles("Reader")
        .AllowVerbs(Security.AllowedVerbs.POST);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Obviously some combinations will not make sense, in fact AllowedVerbs needs to be tweaked as it may only apply to certain roles (so the combinations don't make sense right now). Currently FluentSecurity doesn't care and it probably never will if you try and create illogical combinations.&lt;/p&gt;&lt;h3&gt;bool Security.Test(RequestContext req, HandlerData d)&lt;/h3&gt;&lt;p&gt;This will run all pre-configured rules against the current request to determine if the request is authorised to continue. It will return a true/false result depengin on whether the rules pass or not.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;bool granted = Security.Test(context, data);
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;IResult Security.Validate(RequestContext req, HandlerData d)&lt;/h3&gt;&lt;p&gt;Implements the typical SecurityFilter use case. This function will call the &lt;code&gt;Test&lt;/code&gt; method and returns &lt;code&gt;Result.None()&lt;/code&gt; if the test passes (may be configurable in the future) otherwise it executes the &lt;code&gt;Security.OnAccessDenied&lt;/code&gt; function and returns the &lt;code&gt;IResult&lt;/code&gt;. If no &lt;code&gt;OnAccessDenied&lt;/code&gt; is defined &lt;code&gt;Result.None()&lt;/code&gt; will be returned.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;IResult result = Security.Validate(context, data);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is simply shorthand for now but may be expanded with some custom logic in the near future.&lt;/p&gt;&lt;h3&gt;Security.OnAccessDenied&lt;/h3&gt;&lt;p&gt;This property is used to define a function that can be used to return a result should access been denied. This is done lazily as it allows you access to the &lt;code&gt;RequestContext&lt;/code&gt; and &lt;code&gt;HandlerData&lt;/code&gt; so you could implement per-request handling of the Result (redirects or return URLs etc.)&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;Security.OnAccessDenied = (c, d) =&amp;gt; Result.Redirect&amp;lt;AccessDeniedHandler&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;SecurityFilter --&lt;/p&gt;&lt;p&gt;The &lt;code&gt;SecurityFilter&lt;/code&gt; class is simply a Tinyweb filter that performs the request validation for authentication. Nothing special here move along now.&lt;/p&gt;&lt;h1&gt;For Now and Up Next&lt;/h1&gt;&lt;p&gt;So thats all there is for now. Code is, as I've said, available at the &lt;a href="https://bitbucket.org/kouphax/tinyweb-fluentsecurity"&gt;BitBucket repository&lt;/a&gt;. I'm starting to build up some docs and stuff now and maybe tweak and add useful features. If there is anything you would like to see raise it as an &lt;a href="https://bitbucket.org/kouphax/tinyweb-fluentsecurity/issues?status=new&amp;amp;status=open"&gt;issue&lt;/a&gt; and I'll get around to it.&lt;/p&gt;</content></entry><entry><title>Windows 8</title><updated>Tue Sep 13 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/09/13/windows-8/"></link><id>urn:yobriefca-se:feed:post:Windows 8</id><content type="html">&lt;p&gt;Where WebForms was an attempt to bring the desktop paradigm to web development Windows 8 attempts to do the exact opposite by bringing web to the desktop. More so in fact Windows 8 appears to be effectivley deprecating the desktop idea over time. It's a bold move but trying to cater to every platform is surely a recipe for disaster but you know what I can't help but like it. &lt;/p&gt;&lt;p&gt;I'm not convinced by the Vista v2 arguments either but then I do most of my "poweruser" stuff via a command prompt and thats not going to change - when I hit the desktop I am looking for a nice experience and I feel, so far, I get that with Windows 8.&lt;/p&gt;&lt;p&gt;Being an idiot I managed to grab the ISO without VS11/Blend 5 on it so I am waiting for that one to download before sharing opinions on them (Blend 5 surely must be just like Dreamweaver but I stand to be proven wrong). I am told, however, the first options on the New Project dialog in VS11 are JavaScript projects - I like that. :-)&lt;/p&gt;</content></entry><entry><title>Tinkering with Agility: Honorable Mentions</title><updated>Thu Sep 01 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/09/01/tinkering-with-agility-honorable-mentions/"></link><id>urn:yobriefca-se:feed:post:Tinkering with Agility: Honorable Mentions</id><content type="html">&lt;p&gt;In the process of &lt;a href="/blog/2011/09/01/tinkering-with-agility/"&gt;researching Agility&lt;/a&gt; I needed to throw together a quick serverside stack to accept the RESTful calls from Agility. I went with my current framework de jour &lt;a href="https://github.com/martinrue/Tinyweb"&gt;Tinyweb&lt;/a&gt; and I must admit it was a great call. For more basic info on Tinyweb check out my &lt;a href="/blog/2011/07/18/micro-web-frameworks-in-net-101-tinyweb/"&gt;blog post&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Agility by default routes the RESTful requests to &lt;code&gt;api/model/{id}&lt;/code&gt; and Tinyweb let me create a handler associated with this sort of url by way of areas.&lt;/p&gt;&lt;p&gt;Areas --&lt;/p&gt;&lt;p&gt;Tinyweb has a feature I wasn;t aware of before. It is possible to register a handlers namespace as an "area" (if you have experience with ASP.NET MVC you'll know what that means).&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;Tinyweb.Areas.Add("Agility.Tinkerings.Web.Handlers.Api", "api");
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This means that even though my handler is call &lt;code&gt;TodoHandler&lt;/code&gt; the url would map to the one above without having to sacrifice naming style of the handler or force us to create a custom route variable in each handler that had to map to this area. Flippin clever stuff&lt;/p&gt;&lt;p&gt;WebActivator&lt;/p&gt;&lt;p&gt;Another excellent Nuget package is the &lt;a href="http://nuget.org/List/Packages/WebActivator"&gt;WebActivator&lt;/a&gt; and I have been charmed by it's slickness recently. WebActivator allows you to attribute a class/namespace and specify what code should be run when the application starts. So rather than having to put in a load of lines for configuring different aspects of your stack into &lt;code&gt;Global.asax.cs&lt;/code&gt; you can break them into distinct classes and avoid breaking &lt;a href="http://en.wikipedia.org/wiki/Single_responsibility_principle"&gt;SRP&lt;/a&gt; more than you have too. Here is the example I used in the Agility.js source&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;[assembly: WebActivator.PostApplicationStartMethod(typeof(TinywebActivator), "Activate")]
namespace Agility.Tinkerings.Web.Activators
{
    public class TinywebActivator
    {
        public static void Activate()
        {
            Tinyweb.Areas.Add("Agility.Tinkerings.Web.Handlers.Api", "api");
            Tinyweb.Init();
        }
    }
} 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I don't even have a &lt;code&gt;Global.asax&lt;/code&gt; defined at all.&lt;/p&gt;&lt;p&gt;Feel free to poke around the source to get a better picture of how I threw the backend together. Thanks go to &lt;a href="https://github.com/martinrue/Tinyweb"&gt;Tinyweb&lt;/a&gt; and &lt;a href="http://twitter.com/#!/martinrue"&gt;@martinrue&lt;/a&gt;&lt;/p&gt;</content></entry><entry><title>An Opinionated Project Structure</title><updated>Mon Aug 15 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/08/15/an-opinionated-project-structure/"></link><id>urn:yobriefca-se:feed:post:An Opinionated Project Structure</id><content type="html">
&lt;p&gt;Choice and flexibility are good, in fact they a super smashing awesome.  Sort of.  I mean if you go over the top and offer people "all the choices" they are going to get all stressed and probably procrastinate until someone else makes the decision for them.  Also if you give them so much flexibility they will probably do things differently each time - again that is not a great thing either - for many things in life and IT you shouldn't have to make a conscious decision (it's probably waste of time in this case).&lt;/p&gt;&lt;p&gt;I've recently been reviewing my companies default project structure and it's full of choice and flexibility and while this can cater for the vast array of different project types in our company it also imposes a certain level of cognitive-tax prior to kicking off any development to get the solution in a position that can be farmed out to the team.  It imposes this tax across &lt;span class="caps"&gt;ALL&lt;/span&gt; projects even the 99% of the time typical project, with their typical project structure.  It's not a costly tax but it's unnecessary.  Why not just push it onto the non-standard projects who will likely need to spend time setting things up correctly anyway?  Suck it, weird projects!  Thats what I say.&lt;/p&gt;&lt;p&gt;To this end I've been trying to build a fairly opinionated project structure (along with some handy tools during the development stage).  Right now it's in the early stages and open to abuse/commentary (in fact I'd welcome it, please) but I thought it makes sense to share it&lt;sup id="fnr1" class="footnote"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt; - for the benefit of myself and others (or selfishly unselfish as I like to call it).&lt;/p&gt;&lt;h1&gt;Folder Structure&lt;/h1&gt;&lt;p&gt;I didn't want to break from tradition here.  There is exists a fairly standard project structure that is common across many languages and environments and rather than create a clever, verbose structure I reckon it's probably best to stick with the tried and tested approach.  That way new developers, regardless of background, shouldn't have to wrestle with heavily nested folders or obscure names for folders (SolutionSource vs src) when navigating our solution.&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;|_ &amp;lt;MySolution&amp;gt;
    |_ &amp;lt;lib&amp;gt;
   |_ repositories.config
    |_ &amp;lt;src&amp;gt;
    |_ &amp;lt;test&amp;gt;
 |_ .gitignore   
  |_ default.ps1  
  |_ MySolution.sln
 |_ nuget.config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Most of this will be fairly self-explanatory&lt;sup id="fnr2" class="footnote"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt; but whats the harm in a little clarification?&lt;/p&gt;&lt;ul&gt;	&lt;li&gt;&lt;code&gt;lib&lt;/code&gt; this is the place either myself or Nuget (see nuget.config and default.ps1) will dump any DLLs, tools or other dependencies required by the solution.  As I will talk about later the only file I ever check in here is the repositories.config and have nuget resolve the rest (still some decisions need made around manually referenced files etc.).&lt;/li&gt;	&lt;li&gt;&lt;code&gt;src&lt;/code&gt; hold all the projects that are actually going to be released as part of the final solution.  This folder doesn't contain any of the test projects you create for the solution - no point in muddyinbg the waters.&lt;/li&gt;	&lt;li&gt;&lt;code&gt;test&lt;/code&gt; holds all the solutions projects that we create for running tests (unit, integration etc) to validate the solution.&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;Special Files&lt;/h1&gt;&lt;p&gt;My default project comes with a number of files that help make developing and building the solution form scratch as easy as it should be.  These files are open to be tweaked to suit the needs of the project as and when necessary.&lt;/p&gt;&lt;h2&gt;repositories.config&lt;/h2&gt;&lt;p&gt;This is a file that is used by &lt;a href="http://nuget.org"&gt;Nuget&lt;/a&gt; to resolve the location of all the package configuration files associated with the projects in a solution (packages.config).  When I start this file is empty but as dependencies are added via &lt;a href="http://nuget.org"&gt;Nuget&lt;/a&gt; this file is updated to the location of packages.config files within each project (which in turn is used to resolved the necessary &lt;a href="http://nuget.org"&gt;Nuget&lt;/a&gt; packages that need to be downloaded).  I include this file along with a download task in my &lt;a href="https://github.com/JamesKovacs/psake"&gt;psake&lt;/a&gt; build file (see later) so that we we don't have to check-in all those, potentially large, dlls and tools into our &lt;acronym title="Version Control System"&gt;&lt;span class="caps"&gt;VCS&lt;/span&gt;&lt;/acronym&gt; - it's slow and annoying.  As a bonus when using some VCS's (e.g. git) this file will ensure the lib folder is committed to source control even thought it is technically empty - keeping our project structure intact.&lt;/p&gt;&lt;h2&gt;.gitignore&lt;/h2&gt;&lt;p&gt;Used to ignore certain generated and user specific files when using the git version control system.  Keeps things nice and clean and reduces annoying unnecessary conflicts.  As with most solutions out there I ignore the following patterns by default,&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;bin
obj
*.suo
*.csproj.user
*.cache
lib/*/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;nuget.config&lt;/h2&gt;&lt;p&gt;I'll jump onto the meat of the files, default.ps1, shortly but first as you can probably guess by now I assume the use of &lt;a href="http://nuget.org"&gt;Nuget&lt;/a&gt;.  It's there, it's great and thats all I want to say on that matter.  &lt;code&gt;nuget.config&lt;/code&gt; is a simple file that tells &lt;a href="http://nuget.org"&gt;Nuget&lt;/a&gt; (even within Visual Studio) to put all it's downloaded files into the lib directory rather than the default &lt;code&gt;packages&lt;/code&gt; folder.  Everyone understands what &lt;code&gt;lib&lt;/code&gt; is, less people - packages.&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;repositoryPath&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;repositoryPath&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;default.ps1&lt;/h2&gt;&lt;p&gt;I've decided to run with &lt;a href="https://github.com/JamesKovacs/psake"&gt;psake&lt;/a&gt; to coordinate and perform my builds.  MSBuild, while useful, is ridden with sickeness I call &lt;span class="caps"&gt;XML&lt;/span&gt; (&lt;span class="caps"&gt;BTW&lt;/span&gt; everyone else calls it &lt;span class="caps"&gt;XML&lt;/span&gt; too &lt;span class="caps"&gt;AFAIK&lt;/span&gt;).  It's a beast to get right.  &lt;a href="https://github.com/JamesKovacs/psake"&gt;Psake&lt;/a&gt; on the other hand is pure script.  It's more succinct and you can even debug it - how awesome is that?  So &lt;code&gt;default.ps1&lt;/code&gt; is my &lt;a href="https://github.com/JamesKovacs/psake"&gt;psake&lt;/a&gt; based build file.  What does it look like currently?  Glad you asked.....&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="c"&gt;# --&lt;/span&gt;
&lt;span class="c"&gt;#                     S C R I P T   P R O P E R T I E S &lt;/span&gt;
&lt;span class="c"&gt;# --&lt;/span&gt;
&lt;span class="n"&gt;Properties&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nv"&gt;$solution&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Get-ChildItem&lt;/span&gt; &lt;span class="p"&gt;*.&lt;/span&gt;&lt;span class="n"&gt;sln&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;
  &lt;span class="nv"&gt;$solutionname&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$solution&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$solution&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LastIndexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I assume that the majority of projects are based on a single solution held at the root of our folder structure (as described above).  So I dynamically grab the name and relative path of the solution file for use later.&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="c"&gt;# --&lt;/span&gt;
&lt;span class="c"&gt;#                      H E L P E R   F U N C T I O N S&lt;/span&gt;
&lt;span class="c"&gt;# --&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nb"&gt;Write-LineBreak&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nb"&gt;Write-Host&lt;/span&gt; &lt;span class="s2"&gt;"-"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Set of helper functions currently only provides a simple function to print out a flowerboxing line to make output a bit cleaner.&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="c"&gt;# Set the default framework (3.5 by default)&lt;/span&gt;
&lt;span class="nv"&gt;$framework&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4.0'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Assume that we are all living in the present (as much as possible) so switch to .&lt;span class="caps"&gt;NET&lt;/span&gt; 4.&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="c"&gt;# Declare default task&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="k"&gt;Default&lt;/span&gt; &lt;span class="n"&gt;-depends&lt;/span&gt; &lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default &lt;a href="https://github.com/JamesKovacs/psake"&gt;psake&lt;/a&gt; should do a &lt;code&gt;Build&lt;/code&gt; and &lt;code&gt;Test&lt;/code&gt;.&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="c"&gt;# Resolves all the requires nuget dependecies so they don't need checked in&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="n"&gt;Resolve&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;Push-Location&lt;/span&gt; &lt;span class="s1"&gt;'.\lib\'&lt;/span&gt;
  &lt;span class="nb"&gt;Get-Content&lt;/span&gt; &lt;span class="s1"&gt;'.\repositories.config'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
 &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;-match&lt;/span&gt; &lt;span class="s1"&gt;'path="(.*)"'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  
      &lt;span class="nb"&gt;Write-LineBreak&lt;/span&gt;
     &lt;span class="nb"&gt;Write-Host&lt;/span&gt; &lt;span class="s2"&gt;"Resolving Dependencies for "&lt;/span&gt; &lt;span class="n"&gt;-nonewline&lt;/span&gt;
     &lt;span class="nb"&gt;Write-Host&lt;/span&gt; &lt;span class="nv"&gt;$matches&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'\'&lt;/span&gt;&lt;span class="p"&gt;)[-&lt;/span&gt;&lt;span class="n"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;-ForegroundColor&lt;/span&gt; &lt;span class="n"&gt;Green&lt;/span&gt;
      &lt;span class="nb"&gt;Write-LineBreak&lt;/span&gt;
 
      &lt;span class="n"&gt;nuget&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="nv"&gt;$matches&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
   
      &lt;span class="nb"&gt;Write-LineBreak&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nb"&gt;Pop-Location&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Resolve is the function mentioned earlier that finds the location of the repositories.config files and asks &lt;a href="http://nuget.org"&gt;Nuget&lt;/a&gt; to resolve all the external dependencies of the solution.  This should be done when you have pulled from a repository that included new dependencies.&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="c"&gt;# Build the first solution file you find&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="n"&gt;Build&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  
  &lt;span class="nb"&gt;Write-LineBreak&lt;/span&gt;
  &lt;span class="nb"&gt;Write-Host&lt;/span&gt; &lt;span class="s2"&gt;"Building Solution "&lt;/span&gt; &lt;span class="n"&gt;-nonewline&lt;/span&gt;
  &lt;span class="nb"&gt;Write-Host&lt;/span&gt; &lt;span class="nv"&gt;$solutionname&lt;/span&gt; &lt;span class="n"&gt;-ForegroundColor&lt;/span&gt; &lt;span class="n"&gt;Green&lt;/span&gt;
  &lt;span class="nb"&gt;Write-LineBreak&lt;/span&gt;
      
  &lt;span class="n"&gt;Exec&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;msbuild&lt;/span&gt;   &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;quiet&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Rebuild&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
  
  &lt;span class="nb"&gt;Write-LineBreak&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Performs a basic, quiet build of the default solution.&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="c"&gt;# Run the project tests&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;Executes all the tests in the solution.  Currently empty I intend to flesh this out with a default unit testing approach.&lt;/p&gt;&lt;h1&gt;Baby Steps&lt;/h1&gt;&lt;p&gt;So this is just the beginning and I hope this evolves based on observations made in our real world projects rather than a bunch of nice to haves.  It will also be nice to automate the creation of projects and solutions but thats certainly for another time.  Recommendations, comments and all that stuff welcome.  I'll try and get this basic structure up on Github too.&lt;/p&gt;&lt;p id="fn1" class="footnote"&gt;&lt;a href="#fnr1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I mean, it has been a while since I blogged so it's about time I get back to it.  That said this isn't a "filler post".  I'm not doing this under some random contract.  Thought I wish I was - imagine that - how fun.&lt;/p&gt;&lt;p id="fn2" class="footnote"&gt;&lt;a href="#fnr2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; Cracker idea, right?  Who'd have thought it??! I'm a total genius and you can bow at my feet at will please.  kthnxbai.&lt;/p&gt;&lt;p id="fn3" class="footnote"&gt;&lt;a href="#fnr3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; All subfolders in lib - as mentioned in the previous section.&lt;/p&gt;</content></entry><entry><title>Micro Web Frameworks in .NET 101: Tinyweb</title><updated>Sun Jul 17 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/07/17/micro-web-frameworks-in-net-101-tinyweb/"></link><id>urn:yobriefca-se:feed:post:Micro Web Frameworks in .NET 101: Tinyweb</id><content type="html">
&lt;p&gt;Tinyweb takes a slightly different view than the other web frameworks I have talked about.  In fact it takes a fairly opinionated approach to the way your structure your applications code and forces you to think in terms of resource endpoints rather then big monolithic modules or controllers.  It's certainly true that projects based on the other frameworks such as Nancy and Jessica can be architected in such a way but Tinyweb ensures that you don't start cutting corners and making allowances for lazy code by simply not providing the ability to do it!&lt;/p&gt;&lt;h2&gt;Getting Started - Hello World&lt;/h2&gt;&lt;p&gt;Lets get Tinyweb first from good old reliable Nuget,&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;Install-Package&lt;/span&gt; &lt;span class="n"&gt;Tinyweb&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;With Tinyweb installed we can go ahead and create a &lt;code&gt;RootHandler&lt;/code&gt; this name is the one exception to the Tinyweb handler naming convention which I'll touch on in a minute.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RootHandler&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IResult&lt;/span&gt; &lt;span class="nf"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In our handler I also defined the a &lt;code&gt;Get&lt;/code&gt; method which returns an IResult this will act as our endpoint.  One last thing before we magic up a web page is to initialise Tinyweb via our &lt;code&gt;Global.asax.cs&lt;/code&gt; so Tinyweb can do its bootstrapping discovery voodoo stuffs.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Global&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HttpApplication&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Application_Start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;EventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Tinyweb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Et voila! Run the app and once again we have a hello world.&lt;/p&gt;&lt;h2&gt;Tinyweb Features&lt;/h2&gt;&lt;p&gt;Even in that small Hello World example there are plenty of Tinyweb features but you'll also notice that Tinyweb really doesn't get in the way at all.&lt;/p&gt;&lt;h3&gt;Handlers&lt;/h3&gt;&lt;p&gt;Each Tinyweb Handler represents a single resource endpoint.  With the exception of &lt;code&gt;RootHandler&lt;/code&gt; the &lt;span class="caps"&gt;URL&lt;/span&gt; endpoint for each handler is inferred from the name of the handler.  For example a handler named &lt;code&gt;HelloHandler&lt;/code&gt; will react to &lt;code&gt;/hello&lt;/code&gt;, &lt;code&gt;HelloWorldHandler&lt;/code&gt; will react to &lt;code&gt;/hello/world&lt;/code&gt;.  You can see from these examples that casing of the handler name is important in terms of the url endpoint generation.&lt;/p&gt;&lt;p&gt;The next thing about handlers is that they respond to 4 methods each one corresponding to the 4 main Http Verbs - &lt;code&gt;Get()&lt;/code&gt;, &lt;code&gt;Post()&lt;/code&gt;, &lt;code&gt;Put()&lt;/code&gt; and &lt;code&gt;Delete&lt;/code&gt; - the only requirement of these is that they return an &lt;code&gt;IResult&lt;/code&gt;&lt;/p&gt;&lt;h3&gt;Model Binding and Arguments&lt;/h3&gt;&lt;p&gt;Model binding is also provided by handlers actions - just pass in an object and Tinyweb will do it's best to bind request values to this object (accepts primitives, collections and plain C# objects).&lt;/p&gt;&lt;p&gt;Alternatively if you want to do some work under the hood you can make sure the &lt;code&gt;RequestContext&lt;/code&gt; is passed in by simply passing it instead.  This gives you access to the bowels of the request to do with what you please.&lt;/p&gt;&lt;h3&gt;Advanced Routes&lt;/h3&gt;&lt;p&gt;It's also possible to override the default routing convention by declaring a handler level variable called &lt;code&gt;route&lt;/code&gt; of type &lt;code&gt;Route&lt;/code&gt;.  This example shows how we can override handlers default route &lt;code&gt;/hello/world&lt;/code&gt; and go with the more understandable "/helloworld".&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloWorldHandler&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Route&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"helloworld"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IResult&lt;/span&gt; &lt;span class="nf"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Route Parameters&lt;/h3&gt;&lt;p&gt;In the spirit of RESTFulness you may also want to accept parameters as part of your &lt;span class="caps"&gt;URL&lt;/span&gt; and we can do that as well with this &lt;code&gt;route&lt;/code&gt; class as well as optionally suppling default values for parameters,&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloWorldHandler&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Route&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello/{name}"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// OR WITH A DEFAULT VALUE FOR PARAMS&lt;/span&gt;
    &lt;span class="n"&gt;Route&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello/{name}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"World"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IResult&lt;/span&gt; &lt;span class="nf"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello "&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A powerful little approach.&lt;/p&gt;&lt;h3&gt;Results&lt;/h3&gt;&lt;p&gt;All Tinyweb results (e.g. what the response returns) implement the &lt;code&gt;IResult&lt;/code&gt; interface so it's simple enough to implement your own custom result type though it is probably unnecessary for the most part as Tinyweb offers a range of result types straight away via the &lt;code&gt;Result&lt;/code&gt; classes static methods.&lt;/p&gt;&lt;ul&gt;	&lt;li&gt;String&lt;/li&gt;	&lt;li&gt;File&lt;/li&gt;	&lt;li&gt;Json&lt;/li&gt;	&lt;li&gt;&lt;span class="caps"&gt;XML&lt;/span&gt;&lt;/li&gt;	&lt;li&gt;JsonOrXml (returns either Json or &lt;span class="caps"&gt;XML&lt;/span&gt; depending on the request headers)&lt;/li&gt;	&lt;li&gt;Html&lt;/li&gt;	&lt;li&gt;Redirect (to a specific handler or &lt;span class="caps"&gt;URL&lt;/span&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Tinyweb also offers a &lt;code&gt;View&lt;/code&gt; class that can render views written with Spark and Razor so rendering a view can be as simple as&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloWorldHandler&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Route&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello/{name}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"World"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IResult&lt;/span&gt; &lt;span class="nf"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Razor&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"hello.cshtml"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Filters&lt;/h3&gt;&lt;p&gt;Filters allow us to intercept requests both before and after they are processed on both a per handler and global level.&lt;/p&gt;&lt;p&gt;Each handler can optionally contain an &lt;code&gt;After&lt;/code&gt; and/or a &lt;code&gt;Before&lt;/code&gt; method that will, not surprisingly, be called after and before each handler request (I'll let you guess which one does which) e.g.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RootHandler&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Before&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Before Executed"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IResult&lt;/span&gt; &lt;span class="nf"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;After&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"After Executed"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively if you want the same before or after filter applied across all handlers you can create a Filter class by creating a class appended with the word &lt;code&gt;Filter&lt;/code&gt;.  We can recreate the same handler above with a global filter for logging,&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LoggingFilter&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Before&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Before Executed"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;After&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"After Executed"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RootHandler&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IResult&lt;/span&gt; &lt;span class="nf"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Before&lt;/code&gt; and &lt;code&gt;After&lt;/code&gt; methods can also return &lt;code&gt;IResult&lt;/code&gt; objects if you want to work with the actual response.&lt;/p&gt;&lt;h3&gt;Error Handling and Debugging&lt;/h3&gt;&lt;p&gt;Not all of us write flawless code and so sometimes things go south and exceptions start throwing their weight around.  Tinyweb has a global hook that is useful for capturing such errors as they bubble up to the surface.  The TinyWeb class has a static property &lt;code&gt;OnError&lt;/code&gt; that accepts an Action that can be used to handle the exception e.g.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Application_Start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;EventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Tinyweb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;Tinyweb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnError&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another useful tool when debugging your app is the &lt;code&gt;Tinyweb.WhatHaveIGot()&lt;/code&gt;.  It's a convenience method that can be used to print out all the matched routes and filters.&lt;/p&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;On the surface the focus of Tinyweb may seem only moderately different from other frameworks but after playing with it for a while it become apparent that the opinionated approach really makes you think about your projects structure and &lt;span class="caps"&gt;API&lt;/span&gt;.  I'm certainly of the opinion that this is a damn good thing&lt;sup class="footnote" id="fnr1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;.  Tinyweb gives me just enough framework to do pretty much everything I need - which I would expect from a real micro-framework.  On top of that it's flexible and intuitive and another handy utility in my tool belt.&lt;/p&gt;&lt;p class="footnote" id="fn1"&gt;&lt;a href="#fnr1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I've already said that it is possible to make the likes of Nancy and Jessica behave in this, either by ensuring that all module adhere to this pattern, or creating an abstract base class that enforces this sort of structure so I am in no way bashing the alternatives.  I like choice.&lt;/p&gt;</content></entry><entry><title>Baler v0.4.1 Released</title><updated>Sat Jul 09 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/07/09/baler-v0-dot-4-1-released/"></link><id>urn:yobriefca-se:feed:post:Baler v0.4.1 Released</id><content type="html">&lt;p&gt;&lt;/p&gt;&lt;p&gt;Tiny release push out to &lt;a href="http://yobriefca.se/projects/baler"&gt;Baler&lt;/a&gt; that provides VS2008 specific project and solution files. No new stuff pushed to Nuget as it is source only this time.&lt;/p&gt;&lt;p&gt;Source available in the &lt;a href="https://github.com/kouphax/baler/"&gt;Github Repo&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;More on its way soon!&lt;/p&gt;</content></entry><entry><title>Debugging NSpec Tests: The DebuggerShim</title><updated>Mon Jul 04 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/07/04/debugging-nspec-tests-the-debuggershim/"></link><id>urn:yobriefca-se:feed:post:Debugging NSpec Tests: The DebuggerShim</id><content type="html">
&lt;p&gt;Busy busy busy.  I've been working away on a lot of projects and not had a lot of time to stick anything up on this blog in a while.  I've got a growing "To Blog" list but no time to do it, woe is me!!!&lt;br /&gt;&lt;img src="/images/woeisme.png" style="float:right;" /&gt;&lt;/p&gt;&lt;p&gt;Enough about my perfectly normal life, well almost.  Some of my current work has me going full tilt with &lt;span class="caps"&gt;TDD&lt;/span&gt; on a little C# project and I decided that &lt;a href="http://nspec.org"&gt;NSpec&lt;/a&gt; would help me with unit testing.  So I went about writing failing tests, writing code, passing tests on and on and on.  Things went along fairly well until I hit a little bit of a wall around a little edge case.  My tests kept failing and I couldn't understand why.  The stack trace made little to no sense and my code looked sound.  The problem I had was that &lt;a href="http://nspec.org"&gt;NSpec&lt;/a&gt;, out of the box at least, doesn't have any nice integration with Visual Studio or TestDriven.&lt;span class="caps"&gt;NET&lt;/span&gt;.  Initially I was using a throw away console application and debugging through it but as you can imagine that was time consuming.&lt;/p&gt;&lt;p&gt;It wasn't long though until I was pointed in the &lt;a href="http://twitter.com/#!/amirrajan/status/87174922782253056"&gt;right direction&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;!-- http://twitter.com/#!/amirrajan/status/87174922782253056 --&gt; &lt;style type="text/css"&gt;.bbpBox87174922782253056 {background:url(http://a0.twimg.com/images/themes/theme1/bg.png) #C0DEED;padding:20px;} p.bbpTweet{background:#fff;padding:10px 12px 10px 12px;margin:0;min-height:48px;color:#000;font-size:18px !important;line-height:22px;-moz-border-radius:5px;-webkit-border-radius:5px} p.bbpTweet span.metadata{display:block;width:100%;clear:both;margin-top:8px;padding-top:12px;height:40px;border-top:1px solid #fff;border-top:1px solid #e6e6e6} p.bbpTweet span.metadata span.author{line-height:19px} p.bbpTweet span.metadata span.author img{float:left;margin:0 7px 0 0px;width:38px;height:38px} p.bbpTweet a:hover{text-decoration:underline}p.bbpTweet span.timestamp{font-size:12px;display:block}&lt;/style&gt; &lt;/p&gt;&lt;div class="bbpBox87174922782253056"&gt;&lt;p class="bbpTweet"&gt;If you want to have debugger support for you NSpec specifications, use this: &lt;a href="http://t.co/6SwZcVL" rel="nofollow"&gt;http://t.co/6SwZcVL&lt;/a&gt; /cc @&lt;a class="tweet-url username" href="http://twitter.com/kouphax" rel="nofollow"&gt;kouphax&lt;/a&gt; @&lt;a class="tweet-url username" href="http://twitter.com/mattflo" rel="nofollow"&gt;mattflo&lt;/a&gt;&lt;span class="timestamp"&gt;&lt;a title="Sat Jul 02 15:04:55 +0000 2011" href="http://twitter.com/#!/amirrajan/status/87174922782253056"&gt;less than a minute ago&lt;/a&gt; via web &lt;a href="http://twitter.com/intent/favorite?tweet_id=87174922782253056"&gt;&lt;img src="http://si0.twimg.com/images/dev/cms/intents/icons/favorite.png" /&gt; Favorite&lt;/a&gt; &lt;a href="http://twitter.com/intent/retweet?tweet_id=87174922782253056"&gt;&lt;img src="http://si0.twimg.com/images/dev/cms/intents/icons/retweet.png" /&gt; Retweet&lt;/a&gt; &lt;a href="http://twitter.com/intent/tweet?in_reply_to=87174922782253056"&gt;&lt;img src="http://si0.twimg.com/images/dev/cms/intents/icons/reply.png" /&gt; Reply&lt;/a&gt;&lt;/span&gt;&lt;span class="metadata"&gt;&lt;span class="author"&gt;&lt;a href="http://twitter.com/amirrajan"&gt;&lt;img src="http://a2.twimg.com/profile_images/1326219901/1613d80124a605829d755d9df0fc8b9e_normal.jpeg" /&gt;&lt;/a&gt;&lt;strong&gt;&lt;a href="http://twitter.com/amirrajan"&gt;Amir Rajan&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;amirrajan&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;!-- end of tweet --&gt;&lt;p&gt;The gist, in full below, provides a simple debugger shim over nspec that allows you to hook into the Visual Studio debugger (through something like TestDriven.&lt;span class="caps"&gt;NET&lt;/span&gt; for example).  I simply right clicked on the shim and select "Run With Debugger" and boom my stupid mistake was displayed to me rather quickly.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;NUnit.Framework&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;NSpec.Domain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Reflection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;NSpec&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;DynamicBlog.Tests&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;    [TestFixture]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DebuggerShim&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;        [Test]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//the specification class you want to test&lt;/span&gt;
            &lt;span class="c1"&gt;//this can be a regular expression&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;testClassYouWantToDebug&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"describe_Blog"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="c1"&gt;//initialize NSpec's specfinder&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;finder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SpecFinder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;Assembly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetExecutingAssembly&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Reflector&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; 
                &lt;span class="n"&gt;testClassYouWantToDebug&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            
            &lt;span class="c1"&gt;//initialize NSpec's builder&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ContextBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;finder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;DefaultConventions&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

            &lt;span class="c1"&gt;//this line runs the tests you specified in the filter&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ContextRunner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ConsoleFormatter&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Handy until a more concrete solution appears.  One more thing - really enjoying nspec, it seems to be fitting well with the way I work.&lt;/p&gt;</content></entry><entry><title>Micro Web Frameworks in .NET 101: Anna</title><updated>Tue Jun 21 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/06/21/micro-web-frameworks-in-net-101-anna/"></link><id>urn:yobriefca-se:feed:post:Micro Web Frameworks in .NET 101: Anna</id><content type="html">
&lt;p&gt;It's been a while since I visited this subject (at least in my blog) and I've still to record a lot of screencasts around Nancy.  Anyway I thought I'd give a quick mention to &lt;a href="https://github.com/jfromaniello/Anna/"&gt;Anna&lt;/a&gt; that has just come up on my radar.  Now the project is still in the very early stages but it's possibly one of the best uses of &lt;a href="http://msdn.microsoft.com/en-us/data/gg577609"&gt;Rx&lt;/a&gt; and worth a quick look.  Now I am a bit rusty in the old Rx stuff so sorry if I say something stupid.&lt;/p&gt;&lt;h2&gt;Getting Started - Hello World&lt;/h2&gt;&lt;p&gt;&lt;a href="https://github.com/jfromaniello/Anna/"&gt;Anna&lt;/a&gt; aims to be an asynchronous event-driven &lt;span class="caps"&gt;HTTP&lt;/span&gt; server in a similar vein to &lt;a href="http://nodejs.org/"&gt;node.js&lt;/a&gt;.  At it's core is the &lt;code&gt;HttpServer&lt;/code&gt; object that allows us to wire up routes.&lt;/p&gt;&lt;p&gt;There is no configuration required - just install &lt;a href="https://github.com/jfromaniello/Anna/"&gt;Anna&lt;/a&gt;  from the Nuget Package Console via &lt;code&gt;Install-Package Anna&lt;/code&gt; and you are good to go.  Just create a console application with the infamous &lt;code&gt;Program.cs&lt;/code&gt; and a few lines of code gives you the &lt;code&gt;Hello World&lt;/code&gt; solution,&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HttpServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http://localhost:1234/"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; 
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Respond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadLine&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I added the &lt;code&gt;Console.ReadLine()&lt;/code&gt; to stop the console app exiting and cleaning things up.  Running the app and going to &lt;code&gt;http://localhost:1234&lt;/code&gt; gives you the result.  The &lt;code&gt;HttpServer&lt;/code&gt; object has a number of methods for the various &lt;span class="caps"&gt;HTTP&lt;/span&gt; verbs and these methods all return instances of &lt;code&gt;IObservable&lt;/code&gt; which means you can subscribe to them and apply all those filters, transforms etc. the Rx offers.&lt;/p&gt;&lt;h2&gt;Other Anna Features&lt;/h2&gt;&lt;p&gt;As I said &lt;a href="https://github.com/jfromaniello/Anna/"&gt;Anna&lt;/a&gt;  is still in the early stages so once you grab a route there isn't a &lt;span class="caps"&gt;MASSIVE&lt;/span&gt; amount you can do with but respond.  Responses however are chainable so you can create an almost middleware like stack for requests e.g.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Respond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello "&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Respond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"World"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This gives you the same output as the original Hello World sample.&lt;/p&gt;&lt;p&gt;But from what I can see thats about as far as you can get.  In &lt;a href="http://nodejs.org/"&gt;node.js&lt;/a&gt; there is a framework called &lt;a href="http://senchalabs.github.com/connect/"&gt;Connect&lt;/a&gt; now I'm not sure if &lt;a href="https://github.com/jfromaniello/Anna/"&gt;Anna&lt;/a&gt;  is intending to go in this sort of direction but I think it could be moulded into something like this with a bit of &lt;span class="caps"&gt;TLC&lt;/span&gt;.  The problem is at the minute I don't see any sort of object passed along the subscription chain e.g. a &lt;code&gt;dynamic&lt;/code&gt; bag or something. I don't even know how to easily manage response headers.&lt;/p&gt;&lt;h3&gt;Routes and Route Fragments&lt;/h3&gt;&lt;p&gt;&lt;a href="https://github.com/jfromaniello/Anna/"&gt;Anna&lt;/a&gt;  supports creating different routes including routes with dynamic sections &lt;code&gt;/name/{name}&lt;/code&gt; that are used to populated a &lt;code&gt;UriFragments&lt;/code&gt; property,&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/hello/{name}"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Respond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello {0}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UriArguments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Conditional Routes&lt;/h3&gt;&lt;p&gt;Thanks to the power of Rx and Linq it is possible to create conditional routes an create chains that have pre-response checks.  For example we can have a route that only triggers a response if the QueryString has a secret parameter.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Respond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueryString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secret&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"letmein"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Respond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;h2&amp;gt;Secret Message&amp;lt;/h2&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;So if you hit &lt;code&gt;http://localhost:1234/&lt;/code&gt; you get Hello World.  Hit that again with the param &lt;code&gt;?/secret=letmein&lt;/code&gt; and you get the super secret message.&lt;/p&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Thats about it for now but I think I'll be keeping an eye on this project and see were it goes.  Even though it's still early days I like the concept behind the library and the fresh approach it's taking.  I'll push some of my sample code up to Github and update this post in the next few days.  In the meantime Jose the creator of Anna has &lt;a href="http://joseoncode.com/2011/06/17/event-driven-http-server-in-c-with-rx-and-httplistener/"&gt;some nice examples&lt;/a&gt; of Rx based HttpServer stuff on his blog featuring a long polling example.&lt;/p&gt;</content></entry><entry><title>MicroORMs for .NET: Inserts, Updates &amp;amp; Delete</title><updated>Mon Jun 20 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/06/20/microorms-for-net-inserts-updates-and-delete/"></link><id>urn:yobriefca-se:feed:post:MicroORMs for .NET: Inserts, Updates &amp;amp; Delete</id><content type="html">
&lt;blockquote class="announce"&gt;This post is the is part of series of posts covering the various microORMs in the .&lt;span class="caps"&gt;NET&lt;/span&gt; world.  I intend to look at how each microORM meets certain data access and manipulation needs.  The current series includes,&lt;ul&gt;	&lt;li&gt;&lt;a href="http://yobriefca.se/blog/2011/06/15/microorms-for-net-obligatory-introduction-post"&gt;Obligatory Introduction Post&lt;/a&gt;&lt;/li&gt;	&lt;li&gt;&lt;a href="http://yobriefca.se/blog/2011/06/16/microorms-for-net-syntax-selects"&gt;Syntax - SELECTs&lt;/a&gt;&lt;/li&gt;	&lt;li&gt;&lt;a href="http://yobriefca.se/blog/2011/06/18/microorms-for-net-stored-procedures"&gt;Stored Procedures&lt;/a&gt;&lt;/li&gt;	&lt;li&gt;&lt;a href="http://yobriefca.se/blog/2011/06/21/microorms-for-net-inserts-updates-and-delete"&gt;Inserts, Updates &amp;amp; Deletes&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;Moving swiftly on, if all our solutions only used different way to select data then how would we ever get data into our solution?  So lets look at how these microORMs handle Inserts, Updates and Deletes&lt;sup class="footnote" id="fnr1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;.  These examples will follow on from previous ones so I am only going publish the key lines.  If you want the complete code you can grab them from the &lt;a href="https://github.com/kouphax/microorm-comparison"&gt;GitHub project&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;Dapper&lt;/h2&gt;&lt;h3&gt;Insert&lt;/h3&gt;&lt;p&gt;Nothing unexpected here.  More &lt;span class="caps"&gt;SQL&lt;/span&gt;.  Sam Saffron previously pointed me in the direction of &lt;a href="http://code.google.com/p/dapper-dot-net/source/browse/Dapper.Contrib/Extensions/SqlMapperExtensions.cs"&gt;Dapper.Contrib&lt;/a&gt; that has extra extension methods for doing things like &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; but at the time of trying I couldn't get it to work and have an &lt;a href="https://github.com/SamSaffron/dapper-dot-net/issues/8"&gt;open issue&lt;/a&gt; on GitHub.  If I get an update on this I'll post the slightly cleaner syntax.&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"INSERT Authors(Username, FullName, CreatedDate) "&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt;
    &lt;span class="s"&gt;"VALUES (@Username, @FullName, GETDATE())"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"james@dapper.net"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"James Hughes"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Update&lt;/h3&gt;&lt;p&gt;Update is very similar to insert.  The nice thing about this approach vs. using POCOs is that you only need to send the delta of the object up where as with the other approaches you may have to fetch the object before updating.&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"UPDATE Authors SET FullName = @FullName WHERE Id = @Id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"James Hughes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Delete&lt;/h3&gt;&lt;p&gt;Delete is pretty much what you'd expect.  I'll update these examples when I get my problems with Dapper.Contrib sorted but when you are so close to the &lt;span class="caps"&gt;SQL&lt;/span&gt; metal there isn't a massive amount to discuss.&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"DELETE FROM Authors WHERE Id = @Id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Massive&lt;/h2&gt;&lt;h3&gt;Insert&lt;/h3&gt;&lt;p&gt;Massive keeps things simple as usual.  &lt;code&gt;Insert&lt;/code&gt; can take POCOs as well as dynamic object (and a number of other types) and it uses the info found in the &lt;code&gt;Authors&lt;/code&gt; DynamicModel class to generate the &lt;span class="caps"&gt;SQL&lt;/span&gt; for you.&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;tbl&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tbl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"james@dapper.net"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"James Hughes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;CreatedDate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As a bonus feature Massive can wrap multiple inserts in a single transaction and perform multiple inserts at once.&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;tbl&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tbl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InsertMany&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"james@dapper.net"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"James Hughes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CreatedDate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"james@dapper.net"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"James Hughes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CreatedDate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"james@dapper.net"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"James Hughes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CreatedDate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Update&lt;/h3&gt;&lt;p&gt;Like Dapper, Massive allows us to send only a delta between the old and new object.&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;tbl&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tbl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;
                                 &lt;span class="p"&gt;{&lt;/span&gt;
                                     &lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"James Hughes"&lt;/span&gt;
                                 &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Massive also gets extra points for the &lt;code&gt;UpdateMany&lt;/code&gt; that, not suprisingly, behaves like the &lt;code&gt;InsertMany&lt;/code&gt; method mentioned above (except for updates of course).&lt;/p&gt;&lt;h3&gt;Delete&lt;/h3&gt;&lt;p&gt;Ultra simple approach to Deleting specific objects just pass in an id and you're done,&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;tbl&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tbl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;PetaPoco&lt;/h2&gt;&lt;h3&gt;Insert&lt;/h3&gt;&lt;p&gt;PetaPoco offers 2 main ways to insert your data&lt;sup class="footnote" id="fnr2"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt;.  You can pass in a plain &lt;span class="caps"&gt;POCO&lt;/span&gt; (or in our case on that uses attributes to normalise the difference between the schema and the C# class),&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;PetaPoco&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PetaPoco&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DefaultConnectionString"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"james@dapper.net"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"James Hughes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;CreatedDate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or you can pass in an anonymous object specifying the table and primary key field,&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Authors"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"james@dapper.net"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"James Hughes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;CreatedDate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Update&lt;/h3&gt;&lt;p&gt;There are plenty of ways to update data using PetaPoco.  The first one is to pass in your model object and the row will get updated.  I am creating a new object in this example but you could just fetch it from the database as you'd expect,&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;PetaPoco&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PetaPoco&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DefaultConnectionString"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"james@dapper.net"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"James Hughes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;CreatedDate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another approach is to just pass up a delta of the changes,&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Authors"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"James Hughes"&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively you can simply pass up the delta and specify the primary key value externally,&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Authors"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"James Hughes"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Variety is the spice of life in PetaPoco!&lt;/p&gt;&lt;h3&gt;Delete&lt;/h3&gt;&lt;p&gt;Thanks to the custom attribute on our Author class deleting a record is a matter of passing the Id to the &lt;code&gt;Delete&lt;/code&gt; method,&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;ServiceStack ORMLite&lt;/h2&gt;&lt;h3&gt;Insert&lt;/h3&gt;&lt;p&gt;ORMLite is pretty much inline with the other microORMs a simple &lt;code&gt;Insert&lt;/code&gt; method that accepts a &lt;span class="caps"&gt;POCO&lt;/span&gt; or an anonymous object and generates &lt;span class="caps"&gt;SQL&lt;/span&gt; based on the info given.  This can be done in one of two ways,&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IDbConnection&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OpenDbConnection&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IDbCommand&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateCommand&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Insert&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"james@dapper.net"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"James Hughes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;CreatedDate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;Or the factory approach discussed in the first article,&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;IDbConnectionFactory&lt;/span&gt; &lt;span class="n"&gt;dbFactory&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;OrmLiteConnectionFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;SqlServerOrmLiteDialectProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Instance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;dbFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dbCmd&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dbCmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Insert&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"james@dapper.net"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"James Hughes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;CreatedDate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Update&lt;/h3&gt;&lt;p&gt;ORMLite sticks with one approach for updating a row - passing in a &lt;span class="caps"&gt;POCO&lt;/span&gt; that it can map to a table/row,&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"james@dapper.net"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"James Hughes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;CreatedDate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you really don't want to fetch your row again and only want to send up a delta you'll have to roll your own approach (simple enough though).&lt;/p&gt;&lt;h3&gt;Delete&lt;/h3&gt;&lt;p&gt;ORMLite supports a number of neat ways to delete rows,&lt;/p&gt;&lt;ul&gt;	&lt;li&gt;&lt;code&gt;DeleteById(id)&lt;/code&gt;&lt;/li&gt;	&lt;li&gt;&lt;code&gt;Delete(where_clause, id)&lt;/code&gt;&lt;/li&gt;	&lt;li&gt;&lt;code&gt;Delete(object)&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DeleteById&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="s"&gt;"Id = @0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Simple.Data&lt;/h2&gt;&lt;h3&gt;Insert&lt;/h3&gt;&lt;p&gt;Guess what Simple.Data's approach is once again very fluent, clean and easy to understand.  OK I don't get Intellisense as the methods are dynamic but I didn't need it anyway.&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;Simple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"james@dapper.net"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"James Hughes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;CreatedDate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Update&lt;/h3&gt;&lt;p&gt;Simple.Data has 2 ways of updating.  &lt;code&gt;Update&lt;/code&gt; takes a &lt;span class="caps"&gt;POCO&lt;/span&gt; and maps the id to the specific row,&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;Simple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"james@dapper.net"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"James Hughes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;CreatedDate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively Simple.Data supports the delta approach too using &lt;code&gt;UpdateById&lt;/code&gt;&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;Simple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UpdateById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"James Hughes"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Delete&lt;/h3&gt;&lt;p&gt;Finally Simple.Data has 2 ways to delete a record,&lt;/p&gt;&lt;ul&gt;	&lt;li&gt;&lt;code&gt;DeleteById(id)&lt;/code&gt;&lt;/li&gt;	&lt;li&gt;&lt;code&gt;Delete(named_parameters)&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;Simple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DeleteById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Simple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;There We Have It&lt;/h2&gt;&lt;p&gt;OK OK I guess this post feels a bit rushed.  I started out throwing lots of details into selects and stuff but this one just isn't up to par.  I slowly discovered that I'd have to spend almost all my spare time covering all the aspects I wanted.  So I cut it back to a kind of "Starter for 10" approach.  Yeah thats right I'm leaving stuff up to you to ask and research :-P.  Anyway in these basic examples no one &lt;span class="caps"&gt;ORM&lt;/span&gt; really stands out too much.  Simple.Data is, as always, lovely and clean and PetaPoco offers a very flexible experience.  I like the ability to send deltas instead of full objects back (in case you hadn't guessed) and I had a few annoyances around updates using Massive and Dapper but I think it was my own stupidity (I'll update when I investigate).  If I had to choose between them I am still tending towards Simple.Data and PetaPoco (probably PetaPoco at this stage) but I do find all of them a much more pleasant experience vs. MyIbatis or NHibernate.&lt;/p&gt;&lt;p&gt;That should be enough to start anyone off on the right foot.&lt;/p&gt;&lt;p class="footnote" id="fn1"&gt;&lt;a href="#fnr1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Hehehehe IUDs&lt;/p&gt;&lt;p class="footnote" id="fn2"&gt;&lt;a href="#fnr2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; You can pass a &lt;span class="caps"&gt;SQL&lt;/span&gt; string or a &lt;span class="caps"&gt;SQL&lt;/span&gt; builder as well but it's fairly straightforward so I'll not cover it here.  See the original &lt;a href="http://yobriefca.se/blog/2011/06/16/microorms-for-net-syntax-selects"&gt;&lt;span class="caps"&gt;SELECT&lt;/span&gt; post&lt;/a&gt; for a &lt;span class="caps"&gt;SQL&lt;/span&gt; and &lt;span class="caps"&gt;SQL&lt;/span&gt; Builder example.&lt;/p&gt;</content></entry><entry><title>Baler v0.4 Released</title><updated>Sun Jun 19 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/06/19/baler-v0-dot-4-released/"></link><id>urn:yobriefca-se:feed:post:Baler v0.4 Released</id><content type="html">&lt;p&gt;&lt;/p&gt;&lt;p&gt;Just a quick note to say that Baler v0.4 has been released. Nothing new here I have simply compiled it (and the official extensions) against .NET3.5 just to make it more useable for people still stuck on old projects :-P&lt;/p&gt;&lt;p&gt;Everything is on Nuget already so go have fun.&lt;/p&gt;</content></entry><entry><title>MicroORMs for .NET: Stored Procedures</title><updated>Fri Jun 17 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/06/17/microorms-for-net-stored-procedures/"></link><id>urn:yobriefca-se:feed:post:MicroORMs for .NET: Stored Procedures</id><content type="html">
&lt;blockquote class="announce"&gt;This post is the is part of series of posts covering the various microORMs in the .&lt;span class="caps"&gt;NET&lt;/span&gt; world.  I intend to look at how each microORM meets certain data access and manipulation needs.  The current series includes,&lt;ul&gt;	&lt;li&gt;&lt;a href="http://yobriefca.se/blog/2011/06/15/microorms-for-net-obligatory-introduction-post"&gt;Obligatory Introduction Post&lt;/a&gt;&lt;/li&gt;	&lt;li&gt;&lt;a href="http://yobriefca.se/blog/2011/06/16/microorms-for-net-syntax-selects"&gt;Syntax - SELECTs&lt;/a&gt;&lt;/li&gt;	&lt;li&gt;&lt;a href="http://yobriefca.se/blog/2011/06/18/microorms-for-net-stored-procedures"&gt;Stored Procedures&lt;/a&gt;&lt;/li&gt;	&lt;li&gt;&lt;a href="http://yobriefca.se/blog/2011/06/21/microorms-for-net-inserts-updates-and-delete"&gt;Inserts, Updates &amp;amp; Deletes&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;As handy as running straight, fully-tailored SELECTs straight from your app code a lot of the time, especially in the "enterprise" world your &lt;span class="caps"&gt;DBA&lt;/span&gt; is going to insist that all operations go through tightly controlled stored procedures.  It's all for the greater good I'm sure but flipsake it's bloody annoying.&lt;/p&gt;&lt;div style="font-family:&amp;quot;Courier New&amp;quot;, Courier;color:#0b0;background-color:black; padding:1px 20px;font-size:0.9em;margin-left:20px;margin-right:20px;"&gt;&lt;p&gt;&lt;em&gt;You are standing at the edge of a forest.  Ahead of you an old wooden sign sits at a slight angle.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&amp;gt;&amp;gt; read sign&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;You squint your eyes as you approach the sign and read the fading writing.  The sign reads&lt;/em&gt;&lt;/p&gt;&lt;p style="padding-left:1em;"&gt;&lt;em&gt;"Welcome to the forest of microORMs.  You have nice eyes.  Have a &lt;span class="caps"&gt;GREAT&lt;/span&gt; day."&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&amp;gt;&amp;gt; enter forest&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;You walk, nay skip, into the forest.  A few minutes in you are confronted with a horribly gnarled beast.  The grumpy looking thing seems very out of place in this land of near tranquilty.  As you approach, it speaks&lt;/em&gt;&lt;/p&gt;&lt;p style="padding-left:1em;"&gt;&lt;em&gt;"&lt;span class="caps"&gt;GROAN&lt;/span&gt; &lt;span class="caps"&gt;GRUNT&lt;/span&gt; Control &lt;span class="caps"&gt;GROWL&lt;/span&gt; Best Practise &lt;span class="caps"&gt;WHEEZE&lt;/span&gt; Enterprise Ready &lt;span class="caps"&gt;SNARL&lt;/span&gt;.  Little being... you may not pass any way you please.  That is not how we do things &lt;span class="caps"&gt;GRUMBLE&lt;/span&gt; &lt;span class="caps"&gt;WHEEZE&lt;/span&gt;. No to pass this way meatbag you must, yes must, take this route I have planned for you.  If you need to change your route I must approve it and construct it &lt;span class="caps"&gt;COUGH&lt;/span&gt; &lt;span class="caps"&gt;GRUMBLE&lt;/span&gt;.  There is limited scenery and not too many points to have fun"&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&amp;gt;&amp;gt; kill beast&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;I'm afraid I can't do that&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&amp;gt;&amp;gt; fffffffffffffffffffff..&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;Fear not help is at hand.  So can we call sprocs using our microORMs, and if yes how?  Lets go see shall we?&lt;sup class="footnote" id="fnr1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;h2&gt;Dapper&lt;/h2&gt;&lt;p&gt;Dapper makes use of an extra parameter in its &lt;code&gt;Query&amp;lt;T&amp;gt;&lt;/code&gt; method to specify a specific command type.  In this way it's simply a matter of passing in the name of the sproc, the parameters and a &lt;code&gt;CommandType.StoredProcedure&lt;/code&gt; as a named parameter.&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"GetAuthorById"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;commandType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CommandType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StoredProcedure&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;First&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And boom thats it.  Same applies for multiple results.&lt;/p&gt;&lt;h2&gt;Massive&lt;/h2&gt;&lt;p&gt;Massive just works.&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="kt"&gt;dynamic&lt;/span&gt; &lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tbl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GetAuthorById @0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;First&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All I did was swap out the &lt;span class="caps"&gt;SELECT&lt;/span&gt; statement for the name of the sproc and Bobs Your Uncle.  Nice.&lt;/p&gt;&lt;h2&gt;PetaPoco&lt;/h2&gt;&lt;p&gt;PetaPoco has &lt;em&gt;some&lt;/em&gt; support for sprocs.  For my needs in this article it works fine but apparently it doesn't support output parameters &lt;span class="caps"&gt;ATM&lt;/span&gt;.  You need to prepend your call to the sproc with a DB specific command.&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="s"&gt;"EXECUTE GetAuthorById @0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;First&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;EXECUTE&lt;/code&gt; statement is database specific.  If you are using MySql you need to use &lt;code&gt;CALL&lt;/code&gt; instead which kind of starts breaking the abstraction a bit.  I wonder if we will see this support getting more solidified in future releases.&lt;/p&gt;&lt;h2&gt;ServiceStack ORMLite&lt;/h2&gt;&lt;p&gt;At the time of writing this I couldn't see any built in support for sprocs using ORMLite.  Either I am being my typical clueless self or we would just have to do it by hand.  Here is what I came up with,&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dbFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dbCmd&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;dbCmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CommandType&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CommandType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StoredProcedure&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;dbCmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SqlParameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"@id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;dbCmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CommandText&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"GetAuthorById"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dbCmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExecuteReader&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;ConvertTo&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;It's not exactly the worst thing in the world and I guess you could wrap this stuff in an extension method but still I feel spoilt by the other microORMs so far and this was a slight disappointment.  Perhaps someone could either confirm or deny sproc support in ORMLite?&lt;/p&gt;&lt;h2&gt;Simple.Data&lt;/h2&gt;&lt;p&gt;Simple.Data has lovely syntax for this.  You just call it as yet another dynamic method on the database object and Simple.Data just infers it for you.&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Simple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;GetAuthorById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;First&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yeah thats nice.&lt;/p&gt;&lt;h2&gt;Slightly Shorter and Summing Up&lt;/h2&gt;&lt;p&gt;So I didn't want this one to have too much waffle (bar the odd text adventure here and there).  I was concerned that perhaps calling sprocs might be one of those requirements were the whole microORM stuff starts falling apart but no.  They actually handle the whole thing in a nice, clean manner.&lt;/p&gt;&lt;p&gt;Simple.Data is certainly starting to look more appealing to me and the whole fact that it's not database specific (you've got NoSQL stores and even experimental things such as a Registry adapter - imagine this as part of Powershell).&lt;/p&gt;&lt;p&gt;Anyway some code snippets for this stuff are currently available in the &lt;a href="https://github.com/kouphax/microorm-comparison"&gt;project/series github repo&lt;/a&gt;&lt;/p&gt;&lt;p class="footnote" id="fn1"&gt;&lt;a href="#fnr1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Not a real game.&lt;/p&gt;</content></entry><entry><title>Baler v0.3 Released</title><updated>Thu Jun 16 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/06/16/baler-v0-dot-3-released/"></link><id>urn:yobriefca-se:feed:post:Baler v0.3 Released</id><content type="html">&lt;p&gt;&lt;/p&gt;&lt;p&gt;I've just pushed a new version of &lt;a href="http://yobriefca.se/projects/baler"&gt;Baler&lt;/a&gt;. It's current version of 0.3 but semantically speaking it should be v0.2.2 as I haven't changed the &lt;span class="caps"&gt;API&lt;/span&gt;. But hey we all make mistakes :(&lt;/p&gt;&lt;h2&gt;What's New?&lt;/h2&gt;&lt;p&gt;Thanks to a suggestion from &lt;a href="https://github.com/edazdarevic"&gt;edazdarevic&lt;/a&gt; this release reworks the way files are generated.&lt;/p&gt;&lt;p&gt;Originally if a bale wasn't flagged as generated (e.g. after an &lt;span class="caps"&gt;IIS&lt;/span&gt; reset) a new file with a random name would be generated. This mean't that during development a shed load of files would be generated as you changed some other file and restarted your server. This lead to an awful mess in your output folder. Now what happens if a bale isn't flagged as generated the contents of the file are processed and a hash is generated from this. This hash is then used as the filename for that file (appended with the correct extension). If that file exists then the contents haven't changed and are not written out to a new file saving that extra file system write.&lt;/p&gt;&lt;p&gt;In the future I'd like to adopt the approach of simply writing out references to the bales contents during &lt;code&gt;DEBUG&lt;/code&gt;/development mode and only process the bales when in &lt;code&gt;PRODUCTION&lt;/code&gt; mode. But for now I think this is a reasonable stop gap.&lt;/p&gt;&lt;p&gt;&lt;a href="https://github.com/edazdarevic"&gt;edazdarevic&lt;/a&gt; has some &lt;a href="https://github.com/kouphax/baler/issues/1"&gt;more ideas&lt;/a&gt; that I plan on trying to integrate but I need more time to think about how to approach it without bloating the code.&lt;/p&gt;</content></entry><entry><title>MicroORMs for .NET: Syntax - SELECTs</title><updated>Wed Jun 15 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/06/15/microorms-for-net-syntax-selects/"></link><id>urn:yobriefca-se:feed:post:MicroORMs for .NET: Syntax - SELECTs</id><content type="html">
&lt;blockquote class="announce"&gt;This post is the is part of series of posts covering the various microORMs in the .&lt;span class="caps"&gt;NET&lt;/span&gt; world.  I intend to look at how each microORM meets certain data access and manipulation needs.  The current series includes,&lt;ul&gt;	&lt;li&gt;&lt;a href="http://yobriefca.se/blog/2011/06/15/microorms-for-net-obligatory-introduction-post"&gt;Obligatory Introduction Post&lt;/a&gt;&lt;/li&gt;	&lt;li&gt;&lt;a href="http://yobriefca.se/blog/2011/06/16/microorms-for-net-syntax-selects"&gt;Syntax - SELECTs&lt;/a&gt;&lt;/li&gt;	&lt;li&gt;&lt;a href="http://yobriefca.se/blog/2011/06/18/microorms-for-net-stored-procedures"&gt;Stored Procedures&lt;/a&gt;&lt;/li&gt;	&lt;li&gt;&lt;a href="http://yobriefca.se/blog/2011/06/21/microorms-for-net-inserts-updates-and-delete"&gt;Inserts, Updates &amp;amp; Deletes&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;The two main things I want to look at in this article are&lt;/p&gt;&lt;ol&gt;	&lt;li&gt;Syntax of the microORM, specifically around,&lt;/li&gt;	&lt;li&gt;Selecting single and multiple results&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;So the most obvious starting point, bar the &lt;a href="../15/microorms-for-net-obligatory-introduction-post/"&gt;boring introduction&lt;/a&gt;, is how you perform selects using these awesome thingies.  To begin with lets get our playground set up.  Lets create a table of authors, lets call it &lt;code&gt;Authors&lt;/code&gt;&lt;sup class="footnote" id="fnr0"&gt;&lt;a href="#fn0"&gt;0&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;Id&lt;/span&gt;          &lt;span class="nb"&gt;int&lt;/span&gt;          &lt;span class="k"&gt;IDENTITY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;Username&lt;/span&gt;    &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;FullName&lt;/span&gt;    &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;               &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;CreatedDate&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;                   &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

 &lt;span class="k"&gt;CONSTRAINT&lt;/span&gt; &lt;span class="n"&gt;PK_Authors&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="n"&gt;CLUSTERED&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="k"&gt;ASC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And populate it with some (meaningless) data&lt;sup class="footnote" id="fnr1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;,&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CreatedDate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'0@example.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'James Red'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GETDATE&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CreatedDate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'1@example.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Harry Black'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GETDATE&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;-- ...CROPPED FOR BREVITY...&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CreatedDate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'134@example.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Chloe Green'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GETDATE&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally we need to create the equivalent C# object that our results can map to.  Again nothing too crazy here,&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;CreatedDate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So now the stage is set and it's time for our microORMs to play their part.&lt;/p&gt;&lt;h2&gt;Selecting Single and Multiple Authors&lt;/h2&gt;&lt;p&gt;So lets assume we want to do 2 things -&lt;/p&gt;&lt;ul&gt;	&lt;li&gt;Select a single author with an Id of 1, and,&lt;/li&gt;	&lt;li&gt;Select multiple authors whose username (in this case the users email address) ends with &lt;em&gt;example.com&lt;/em&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Dapper&lt;/h3&gt;&lt;p&gt;Dapper has a single way of querying your database and it offers this via an extension method on the standard &lt;code&gt;SqlConnection&lt;/code&gt; class,&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SqlConnection&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SqlConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ConnectionString&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
        &lt;span class="s"&gt;"SELECT * FROM Authors WHERE Id = @Id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="n"&gt;First&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see I've just opened a normal connection using a ConnectionString property I pulled from my &lt;code&gt;App.config&lt;/code&gt;'s ConnectionString config block.  The magic here lies in the &lt;code&gt;Query&amp;lt;Author&amp;gt;&lt;/code&gt; method.  This method accepts a parameterised &lt;span class="caps"&gt;SQL&lt;/span&gt; string and maps the result back into the object you specified.  Ultra simple, ultra clean.  There are a whole host of other arguments to the &lt;code&gt;Query&amp;lt;T&amp;gt;&lt;/code&gt; method but it would fill this post up pretty fast.&lt;/p&gt;&lt;p&gt;Selecting multiple object simply requires me to change the query to meet the new requirements,&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dapperA&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"SELECT * FROM Authors WHERE Username LIKE @PartialUsername"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;PartialUsername&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"%example.com"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One of the features I really liked apart from the simplicity of the whole thing was the parameterised &lt;span class="caps"&gt;SQL&lt;/span&gt;.  Many of the frameworks support this but most support it by index based assignment e.g. "&lt;span class="caps"&gt;WHERE&lt;/span&gt; Id=@0".  Thats fine but Dappers use of an anonymous object makes the whole thing that little bit nicer. No need to refactor strings should your arguments move around (it has happened) and it all reads just that tiny bit better as well.&lt;/p&gt;&lt;p&gt;Dapper also offers a non-generic &lt;code&gt;Query&lt;/code&gt; method that returns instances of &lt;code&gt;dynamic&lt;/code&gt; objects but I'm still to be convinced that this is useful when pushing these models into and back out of views etc.  Still it's nice to have for those times that creating another model would be overkill.&lt;/p&gt;&lt;h3&gt;Massive&lt;/h3&gt;&lt;p&gt;Massive is slightly different to the other microORMs in that it only deals with &lt;code&gt;dynamic&lt;/code&gt; objects from queries.  This means if you need concrete models you will have to map them either manually or use a tool to help (such as &lt;a href="http://automapper.codeplex.com/"&gt;AutoMapper&lt;/a&gt;).  Due to my schema (pluarl table names) I use Massive in a slightly different way to most people.  Massive requires your models to extend &lt;code&gt;Massive.DynamicModel&lt;/code&gt; so to keep things clean I tended to naturally create a model that represents my Authors table,&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Authors&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Massive&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DynamicModel&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Authors&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DefaultConnectionString"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;PrimaryKeyField&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Id"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This provides an entry point for configuring how Massive connects to your database.  The &lt;code&gt;DynamicModel&lt;/code&gt; has a constructor that allows us to specify a connection string name that Massive will lookup from the &lt;code&gt;Web/App.config&lt;/code&gt; &lt;code&gt;ConnectionStrings&lt;/code&gt; config section.  Alternatively if you don't supply this Massive will grab the first one it finds.  This class also allows us to specify the table name (in this case inferred from the class name) and properties such as the primary key of the table (as shown above).&lt;/p&gt;&lt;p&gt;Now we have our class defined we can start selecting from the database.  To select a single object we can use the &lt;code&gt;Single&lt;/code&gt; method.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;Authors&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;dynamic&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Single&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You'll notice I've made another step here and that is mapping the &lt;code&gt;dynamic&lt;/code&gt; result to a concrete &lt;code&gt;Author&lt;/code&gt; object.  It's a simple mapping method added to the &lt;code&gt;Authors&lt;/code&gt; object but could be made more generic fairly easiy,&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="nf"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;dynamic&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;CreatedDate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreatedDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Selecting multiple objects can be done in 2 ways using &lt;code&gt;All&lt;/code&gt; which returns the entire table and then you filter or using the &lt;code&gt;Query&lt;/code&gt; method (preferred unless you really want to return the entire table for refdata or something I guess)&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;tbl&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;IList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;dynamic&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tbl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"SELECT * FROM Authors WHERE Username LIKE @0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;"%example.com"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="update"&gt;&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;UPDATE&lt;/span&gt;:&lt;/strong&gt; Rob, the creator of Massive, has just pushed &lt;a href="http://wekeroad.com/post/6618062904/changed-my-mind-massive-changed-to-embrace-c"&gt;a new type of query syntax&lt;/a&gt; into Massive.  The new approach makes use of named parameters&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="kt"&gt;dynamic&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Products&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FindBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;CategoryID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;UnitPrice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I haven't rewritten my stuff in this post but I want to close this post off and move on.  There is plenty more info in the &lt;a href="http://wekeroad.com/post/6618062904/changed-my-mind-massive-changed-to-embrace-c"&gt;original post&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;h3&gt;PetaPoco&lt;/h3&gt;&lt;p&gt;PetaPoco has a number of way of selecting single objects, or more specifically multiple ways of building/manipulating &lt;span class="caps"&gt;SQL&lt;/span&gt; queries.  But before we do that we need to get access to the database.  We do this via the &lt;code&gt;PetaPoco.Database&lt;/code&gt; object which is an &lt;code&gt;IDisposable&lt;/code&gt; wrapper around a Database connection that gives us the PetaPoco magic.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PetaPoco&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PetaPoco&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DefaultConnectionString"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// query goes here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="update"&gt;&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;UPDATE&lt;/span&gt;:&lt;/strong&gt; &lt;a href="http://twitter.com/toptensoftware"&gt;Brad Robinson&lt;/a&gt; has informed me that the &lt;code&gt;using&lt;/code&gt; statement is unnecessary&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;You don't need to explicitly dispose the database object unless you've called OpenSharedConnection yourself. The idea is that if you're using an &lt;span class="caps"&gt;IOC&lt;/span&gt; container to instantiate per-http-context instances you can call OpenSharedConnection at the start of the request and a single connection will be used for the entire http request. In practice I've found this not really necessary as most providers do connection pooling anyway. In other words, generally the using clause is not necessary.&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;p&gt;The Database constructor takes a name of a defined connection string to use for connecting to the database.  Now we are ready to start writing our query,&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Using Single(id)&lt;/strong&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Single&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Using Custom Parameterised &lt;span class="caps"&gt;SQL&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Single&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="s"&gt;"SELECT * FROM Authors WHERE Id = @0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="update"&gt;&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;UPDATE&lt;/span&gt;:&lt;/strong&gt; &lt;a href="http://twitter.com/toptensoftware"&gt;Brad Robinson&lt;/a&gt; pointed out that it is also possible to used named parameters as discussed in the Dapper section above &lt;code&gt;@MyNamedParam&lt;/code&gt; instead of &lt;code&gt;@0&lt;/code&gt;.  The niceness just keeps coming with PetaPoco&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Using &lt;span class="caps"&gt;SQL&lt;/span&gt; Builder to Append Statements&lt;/strong&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Single&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class="n"&gt;PetaPoco&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Builder&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"SELECT * FROM Authors"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"WHERE Id = @0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Using &lt;span class="caps"&gt;SQL&lt;/span&gt; Builders Fluent Syntax to Append Statements&lt;/strong&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Single&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class="n"&gt;PetaPoco&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Builder&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Authors"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Id = @0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See what I mean?  Lots of ways.  Now I guess the 3rd and 4th methods will probably seem a bit &lt;acronym title="Over The Top"&gt;&lt;span class="caps"&gt;OTT&lt;/span&gt;&lt;/acronym&gt; for this simple select but think how powerful these would be if we had to conditionally build up our where clause or select statement based on a number of user defined conditions.  Nice.&lt;/p&gt;&lt;p&gt;Selecting multiple objects offers the same sort of variety except we can use either &lt;code&gt;Query&lt;/code&gt; or &lt;code&gt;Fetch&lt;/code&gt;.  The difference between the two is summed up by the PetaPoco site,&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;These are pretty much identical except &lt;code&gt;Fetch&lt;/code&gt; returns a List&amp;lt;&amp;gt; of POCO's whereas &lt;code&gt;Query&lt;/code&gt; uses &lt;code&gt;yield return&lt;/code&gt; to iterate over the results without loading the whole set into memory.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;So what I say about &lt;code&gt;Query&lt;/code&gt; applies to &lt;code&gt;Fetch&lt;/code&gt; as well.  Retrieving multiple objects is done in the same way as selecting a single object in that you can give the method parameterised &lt;span class="caps"&gt;SQL&lt;/span&gt; or use the &lt;span class="caps"&gt;SQL&lt;/span&gt; builder to construct the query.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"SELECT * FROM Authors WHERE Username LIKE @0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;"%example.com"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So to cover this off a full select using PetaPoco will would look like this.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PetaPoco&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PetaPoco&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DefaultConnectionString"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Single&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="s"&gt;"SELECT * FROM Authors WHERE Id = @0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class="caps"&gt;IMO&lt;/span&gt; The syntax is nice, clean and flexible.  One thing about PetaPoco that is a &lt;span class="caps"&gt;VERY&lt;/span&gt; minor pain point for me is that it assumes singular name for tables which contradicted my earlier decision.  Not to worry PetaPoco uses attributes against the model class to manipulate the standard configuration and I can specify a class level attribute of &lt;code&gt;[PetaPoco.TableName("Authors")]&lt;/code&gt; to put things right with the world.  This also only applies to the queries that use object inference such as &lt;code&gt;Single&amp;lt;T&amp;gt;&lt;/code&gt; and not to the methods that accept &lt;span class="caps"&gt;SQL&lt;/span&gt;.&lt;/p&gt;&lt;h3&gt;ServiceStack ORMLite&lt;/h3&gt;&lt;p&gt;ORMLite from ServiceStack does things a wee bit differently to the rest.  It's a bit less self-contained because it also applies extension methods to the string object as well.  Also like PetaPoco it takes the singular naming convention for Object Name &amp;rarr; Table Name so first things first we need to annotate our &lt;code&gt;Author&lt;/code&gt; model with another attribtue&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="na"&gt;[ServiceStack.DataAnnotations.Alias("Authors")]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another thing we need to do once before hand is set the dialect the ORMLite will use.  This is so it knows how to speak to the specific database type we created.  Typically you would put this in something like &lt;code&gt;Global.asax.cs&lt;/code&gt;, &lt;code&gt;Program.cs&lt;/code&gt; or whatever bootstrapper you care to use as it needs done only once.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;OrmLiteConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DialectProvider&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SqlServerOrmLiteDialectProvider&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can go ahead and start selecting things like a boss,&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IDbConnection&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"..."&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OpenDbConnection&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IDbCommand&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateCommand&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetById&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And for selecting many&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IDbConnection&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OpenDbConnection&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IDbCommand&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateCommand&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
        &lt;span class="s"&gt;"Username LIKE {0}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="s"&gt;"%example.com"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively if we want to perform a specific operation on each result we can use the &lt;code&gt;Each&amp;lt;T&amp;gt;&lt;/code&gt; to iterate over the result set rather than simply return it.&lt;/p&gt;&lt;p&gt;As you can see you don't need to specify a full &lt;span class="caps"&gt;SQL&lt;/span&gt; query, just the &lt;span class="caps"&gt;WHERE&lt;/span&gt; clause which makes everything look a little bit neater and avoids repeating unnecessary portions of &lt;span class="caps"&gt;SQL&lt;/span&gt; that could be inferred.&lt;/p&gt;&lt;p&gt;ORMLite's syntax is &lt;em&gt;slighlty&lt;/em&gt; more complex - it feels a bit closer to the metal.  But it's certainly not horribly different that it would put me off using it.&lt;/p&gt;&lt;div class="update"&gt;&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;UPDATE&lt;/span&gt;:&lt;/strong&gt; It seems there is another way to query the database that makes things a bit shorter.  Thanks to mythz (in the comments) for this one.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;removed by original author :(
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I agree that this is a viable alternative and can make for shorter code.  Thanks.&lt;/p&gt;&lt;/div&gt;&lt;h3&gt;Simple.Data&lt;/h3&gt;&lt;p&gt;Finally Simple.Data offers a very clean syntax that mixes dynamic with concrete results.  The first thing you need to do with Simple.Data is get a handle on the Database object that is returned as a special &lt;code&gt;dynamic&lt;/code&gt; object.  There are a number of ways of doing this,&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;Simple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;Simple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OpenNamedConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DefaultConnectionString"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Simple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OpenConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By using &lt;code&gt;Database.Open()&lt;/code&gt; Simple.Data will look for a connection string called &lt;code&gt;Simple.Data.Properties.Settings.DefaultConnectionString&lt;/code&gt; and use it to create the database instance.  Alternatively you can specify a specific named connection using &lt;code&gt;Database.OpenNamedConnection&lt;/code&gt; or even a raw connection string using &lt;code&gt;Database.OpenConnection&lt;/code&gt;&lt;/p&gt;&lt;p&gt;These methods all return a special &lt;code&gt;dynamic&lt;/code&gt; object that dynamically creates a &lt;span class="caps"&gt;SQL&lt;/span&gt; statement by constructing methods on the fly.  It's best to look at the code for this.  To select a single object we can do this,&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Simple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FindById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So whats happening here.  Well firstly we a asking it to look at the Authors table.  Next we are telling it to FindById - but this method doesn't exist. We could easily have said FindByUsernameAndEmail and we would get the results we expected.  This bit of metaprogramming is the magic behind Simple.Data where method signatures are parsed and used to build &lt;span class="caps"&gt;SQL&lt;/span&gt;.  Nice stuff.  I still have a bit of issue working with dynamic objects but in this case my models are concrete so it's really not an issue.&lt;/p&gt;&lt;p&gt;Selecting multiple objects is that same except instead of &lt;code&gt;FindByXXX&lt;/code&gt; we use &lt;code&gt;FindAllByXXX&lt;/code&gt; and as this query returns a &lt;code&gt;SimpleQuery&lt;/code&gt; object we then need to perform a &lt;code&gt;.Cast&amp;lt;Author&amp;gt;&lt;/code&gt; at the end to get back a list of authors.&lt;/p&gt;&lt;p&gt;An alternative and more flexible way of doing queries is using &lt;code&gt;Find&lt;/code&gt; and &lt;code&gt;FindAll&lt;/code&gt;.  These methods let you specify more complex queries.  To implement our &lt;code&gt;LIKE&lt;/code&gt; comparison for our query above we need to use &lt;code&gt;FindAll&lt;/code&gt; like so,&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="kt"&gt;dynamic&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Simple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FindAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Like&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%.com"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cast&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This also shows the use of the &lt;code&gt;Cast&amp;lt;T&amp;gt;&lt;/code&gt; mentioned above.  We can supply a variable number of arguments to &lt;code&gt;Find&lt;/code&gt; and &lt;code&gt;FindAll&lt;/code&gt; as well as using different comparison operators.&lt;/p&gt;&lt;h2&gt;That Was a Long One&lt;sup class="footnote" id="fnr2"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;&lt;p&gt;So yeah not only have I touched on selecting single and multiple object at a high level I also had to add a bit of discussion around setting things up so I apologise for the length of this post.  On the plus side discussing configuration alone for MyBatis and nHibernate would probably take the same length of time.  Thats whats great about these microORMs 99% of the time you don't need all that set up for most projects.  No need getting bogged down in configuration when it's not actually achieving anything.&lt;/p&gt;&lt;p&gt;In terms of the syntax - so far I am quite taken by both Simple.Data and PetaPoco but that could change when I start really pushing things - after all everyone can do selects quite easily.&lt;/p&gt;&lt;p&gt;In terms of dynamic results (e.g. from Massive) I'm still to be convinced on their usefulness without having to always map to concrete classes.  I don't see how this helps refactoring (it looks like it makes it much worse) nor do I see how it works with most validation mechanisms.  But I would love to be proven wrong on this please.&lt;/p&gt;&lt;p&gt;One thing I do know - it's going to take a lot more justification for someone to use a heavyweight &lt;span class="caps"&gt;ORM&lt;/span&gt; in my next project.  While I not willing to declare the death of ORMs like some other people I am certainly leaning in that direction.&lt;/p&gt;&lt;p&gt;Source for this series is slowly evolving in a &lt;a href="https://github.com/kouphax/microorm-comparison"&gt;Github repo&lt;/a&gt; if you feel inspired to have a poke around.&lt;/p&gt;&lt;p class="footnote" id="fn0"&gt;&lt;a href="#fnr0"&gt;&lt;sup&gt;0&lt;/sup&gt;&lt;/a&gt; We can argue about plural or singular data naming conventions some other time, or in the comments!!!&lt;/p&gt;&lt;p class="footnote" id="fn1"&gt;&lt;a href="#fnr1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I created a load of test data using the handy little tool &lt;a href="http://autopoco.codeplex.com/"&gt;AutoPoco&lt;/a&gt;&lt;/p&gt;&lt;p class="footnote" id="fn2"&gt;&lt;a href="#fnr2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; "Thats what she said" &amp;lt;self:facepalm&amp;gt;&lt;/p&gt;</content></entry><entry><title>MicroORMs for .NET: (Obligatory) Introduction (Post)</title><updated>Tue Jun 14 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/06/14/microorms-for-net-obligatory-introduction-post/"></link><id>urn:yobriefca-se:feed:post:MicroORMs for .NET: (Obligatory) Introduction (Post)</id><content type="html">&lt;p&gt;&lt;/p&gt;&lt;blockquote class="announce"&gt;This post is the is part of series of posts covering the various microORMs in the .&lt;span class="caps"&gt;NET&lt;/span&gt; world. I intend to look at how each microORM meets certain data access and manipulation needs. The current series includes,&lt;ul&gt; &lt;li&gt;&lt;a href="http://yobriefca.se/blog/2011/06/15/microorms-for-net-obligatory-introduction-post"&gt;Obligatory Introduction Post&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://yobriefca.se/blog/2011/06/16/microorms-for-net-syntax-selects"&gt;Syntax - SELECTs&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://yobriefca.se/blog/2011/06/18/microorms-for-net-stored-procedures"&gt;Stored Procedures&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://yobriefca.se/blog/2011/06/21/microorms-for-net-inserts-updates-and-delete"&gt;Inserts, Updates &amp;amp; Deletes&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;I've been playing, somewhat superficially, with a few MicroORMs in .&lt;span class="caps"&gt;NET&lt;/span&gt; for a while now. While I have yet to use any in a real project I wanted to do a bit of comparison series. It's a bit selfish I guess as I am actually writing this series as a means to get myself up to speed on these frameworks as well as inform others about perils I faced as a newcomer to them as and when I hit those pain points.&lt;/p&gt;&lt;p&gt;To be honest I've never been a fan of the Data Access layer in projects - Databases are fine I guess and the application layer is all good but that thin layer between the two just frustrates me. It's often needlessly over complicated, confusing, hacked together or just plain broken. Most of my experience is with &lt;a href="http://www.mybatis.org/dotnet.html"&gt;iBatis/MyBatis&lt;/a&gt; and it "does the job" but its very fiddly and &lt;span class="caps"&gt;XML&lt;/span&gt; configuration becomes cumbersome for simple tasks. I've also tinkered with other things like Entity Framework and NHibernate but more often than not they just don't feel right.&lt;/p&gt;&lt;p&gt;This make microORMs sound appealing to me for the very same reasons. They give you just enough to get the job done, prefer convention over configuration and generally allow you to get right down to the metal and tweak things using &lt;span class="caps"&gt;SQL&lt;/span&gt; - easily the best &lt;span class="caps"&gt;DSL&lt;/span&gt; for working with databases. Sure they may lack many features but typically these are features you wouldn't really miss if taken away from you.&lt;/p&gt;&lt;h2&gt;The MicroORMs&lt;/h2&gt;&lt;p&gt;There are a number of ORMs currently available for .&lt;span class="caps"&gt;NET&lt;/span&gt; and I am going to look at a few of them in terms of features and syntax.&lt;sup class="footnote" id="fnr1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;h3&gt;&lt;a href="http://code.google.com/p/dapper-dot-net/"&gt;Dapper&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Dapper was created by Sam Saffron from &lt;a href="http://stackoverflow.com"&gt;Stackoverflow&lt;/a&gt;. Rather than a library Dapper is a single file that you can drop into your project and applies some syntactic sugar to extend your IDbConnection interface.&lt;/p&gt;&lt;h3&gt;&lt;a href="https://github.com/robconery/massive"&gt;Massive&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Like Dapper, Massive is a single file rather than a library and offers a very similar feature set to Dapper except it works exclusively with the .NET4 &lt;code&gt;dynamic&lt;/code&gt; stuff.&lt;/p&gt;&lt;h3&gt;&lt;a href="http://www.toptensoftware.com/petapoco/"&gt;PetaPoco&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;PetaPoco came out of inspiration from Massive and has extended to support real objects as well as some very nice extra features such as T4 templating, configuration via model attributes and other nice stuff.&lt;/p&gt;&lt;h3&gt;&lt;a href="https://github.com/markrendle/Simple.Data"&gt;Simple.Data&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Simple.Data is A lightweight, dynamic data access component that make use of convention and &lt;code&gt;dynamic&lt;/code&gt; to allow users to access database tables via dynamically generated methods.&lt;/p&gt;&lt;h3&gt;&lt;a href="https://github.com/ServiceStack/ServiceStack.OrmLite"&gt;ORMLite&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;ServiceStack.OrmLite is a convention-based, configuration-free lightweight &lt;span class="caps"&gt;ORM&lt;/span&gt; that uses standard &lt;span class="caps"&gt;POCO&lt;/span&gt; classes and Data Annotation attributes to infer its table schema.&lt;/p&gt;&lt;h2&gt;On with the show&lt;/h2&gt;&lt;p&gt;So thats my toys all laid out and ready to be played with. Next step is to look at some of the typical operations for selecting and manipulating data from our database. I hope to have the first real part of this investigation up shortly (or before the decade is out at least).&lt;/p&gt;&lt;p class="footnote" id="fn1"&gt;&lt;a href="#fnr1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; This list is not exhaustive there are a few specialised ones around as well which I may touch on later in the series.&lt;/p&gt;</content></entry><entry><title>Baler v0.2.1 Released and 2 New Extensions</title><updated>Wed Jun 08 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/06/08/baler-v0-dot-2-1-released-and-2-new-extensions/"></link><id>urn:yobriefca-se:feed:post:Baler v0.2.1 Released and 2 New Extensions</id><content type="html">
&lt;h1&gt;Baler&lt;/h1&gt;&lt;p&gt;I have just released a new version of &lt;a href="http://yobriefca.se/projects/baler"&gt;Baler&lt;/a&gt;.  Version 0.2.1 release adds a new feature for adding custom attributes to bales.  The &lt;code&gt;Attr&lt;/code&gt; function, available as an instance method to all bales, accepts an attribute name and a string value that will be applied to the rendered bale tag.  The best way to demonstrate this is with an example.&lt;/p&gt;&lt;h2&gt;&lt;span class="caps"&gt;CSS&lt;/span&gt; Media Attribute&lt;/h2&gt;&lt;p&gt;When specifying link tags for &lt;span class="caps"&gt;CSS&lt;/span&gt; it is possible to scope that stylesheet to a specific meida type.  For example you could have a stylesheet that modifies your page style for printing e.g.&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="nt"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"stylesheet"&lt;/span&gt; &lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"core.css"&lt;/span&gt; &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"text/css"&lt;/span&gt; &lt;span class="nt"&gt;media&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"screen"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="nt"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"stylesheet"&lt;/span&gt; &lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"print.css"&lt;/span&gt; &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"text/css"&lt;/span&gt; &lt;span class="nt"&gt;media&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"print"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;The new &lt;code&gt;Attr&lt;/code&gt; method allows you to specify this new attribute like so,&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;Baler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"core.css"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"media"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"screen"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;AsCss&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;Baler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"print.css"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"media"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"print"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;AsCss&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;"No Value" Attributes&lt;/h2&gt;&lt;p&gt;Some attributes, such as the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;defer&lt;/code&gt; on script tags do not require a value.  &lt;code&gt;Attr&lt;/code&gt; is capable of dealing with these type of attributes.&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nx"&gt;Baler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"script.js"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"async"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;AsJs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Will produce&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt; &lt;span class="na"&gt;async&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I am sure there are other uses for it (setting id's or data-* attributes) as it's a fairly flexible little enhancement.&lt;/p&gt;&lt;h1&gt;&lt;span class="caps"&gt;CSS&lt;/span&gt; Media Extensions&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;PM&amp;gt; Install-Package CodeSlice.Web.Baler.Extensions.CssMedia&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The first extension to utilise this new &lt;code&gt;Attr&lt;/code&gt; is the &lt;code&gt;CssMediaExtensions&lt;/code&gt; addon. &lt;code&gt;CssMediaExtensions&lt;/code&gt; provide methods for setting the media type that a stylesheet should render for such as screen or print&lt;/p&gt;&lt;h2&gt;WithMedia()&lt;/h2&gt;&lt;p&gt;The WithMedia Extension allows you to set the media attribute of the rendered &lt;span class="caps"&gt;CSS&lt;/span&gt; tag.&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;bale&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;(...).&lt;/span&gt;&lt;span class="n"&gt;WithMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"screen"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;AsCss&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;AsCss()&lt;/h2&gt;&lt;p&gt;&lt;code&gt;AsCss&lt;/code&gt; overrides the existing &lt;code&gt;AsCss&lt;/code&gt; method allowing you to pass a media attribute value directly into the render call. For example the above example could simply be written as,&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;bale&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;(...).&lt;/span&gt;&lt;span class="n"&gt;AsCss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"screen"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Named Bales Extension&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;PM&amp;gt; Install-Package CodeSlice.Web.Baler.Extensions.NamedBales&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This one has been released for a while but I didn't get around to writing about it. TheNamed Bales extension provides a mechanism to declare a Bale definition up front and reuse the same bale throughout the application without having to redefine the contents over and over. For example we can define a bale with 3 scripts and name it&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;Baler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;"script1.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="s"&gt;"script2.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="s"&gt;"script3.js"&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;NameAs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"base"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This can returns the Bale itself so can be used inline or somewhere like &lt;code&gt;Global.asax&lt;/code&gt;. Next we can render this bundle using &lt;code&gt;AsJs&lt;/code&gt; later in the app like so,&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;NamedBales&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"base"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;AsJs&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Currently this doesn?t short circuit Balers internal cache so a second cache check will be made using the internal hashing mechanism. This is either a good thing or a bad thing. But for now it?s a good thing! This does have the side effect of ensuring that any unnamed bales with the same signature as a named bale will still get cached bale.&lt;/p&gt;&lt;h3&gt;NameAs()&lt;/h3&gt;&lt;p&gt;NameAs adds some sugar to the IBale interface allowing us to apply a friendly name to a bale. There is currently no check to see if the bale name is already taken. Existing definitions will be overwritten.&lt;/p&gt;&lt;h3&gt;NamedBales.Get()&lt;/h3&gt;&lt;p&gt;Allows us to retrieve a bale based on a friendly name defined by the developer. Will throw and exception if the bale name doesn?t exist in the cache ? otherwise the bale itself.&lt;/p&gt;&lt;h1&gt;Coming Up&lt;/h1&gt;&lt;p&gt;Still plenty to be done.  Docs are fairly complete but there are a mountain of unit tests to be written still and some extra features to be added (without bloating the code base of course).  I have a few features I'd like to work in but I'll keep that for another day.&lt;/p&gt;</content></entry><entry><title>Baler Site now Live(ish)</title><updated>Sun Jun 05 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/06/05/baler-site-now-live-ish/"></link><id>urn:yobriefca-se:feed:post:Baler Site now Live(ish)</id><content type="html">&lt;p&gt;&lt;/p&gt;&lt;p&gt;I've just pushed the first draft of the new shiny Baler web site into the various tubes that form the basis of the interwebs. I am still missing a logo but why let that hold me back? Anyway feel free to check it out while I add more tests to the project and generally polish things.&lt;/p&gt;&lt;p&gt;&lt;a href="http://yobriefca.se/projects/baler"&gt;Baler Project Site&lt;/a&gt;&lt;/p&gt;</content></entry><entry><title>Announcing Baler</title><updated>Mon May 30 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/05/30/announcing-baler/"></link><id>urn:yobriefca-se:feed:post:Announcing Baler</id><content type="html">
&lt;p&gt;It's very early days (with regards to both code and documentation) but I though I amy as well put it out there.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href="http://yobriefca.se/projects/baler/"&gt;Baler&lt;/a&gt; is a .&lt;span class="caps"&gt;NET&lt;/span&gt; Web Resource Bundler. Capable of concatenating and transforming &lt;span class="caps"&gt;CSS&lt;/span&gt; and JavaScript files to lower request count and bandwidth requirements. It works with any .&lt;span class="caps"&gt;NET&lt;/span&gt; Web Framework/View Engine capable of running C# in the view&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;What differentiates &lt;a href="http://yobriefca.se/projects/baler/"&gt;Baler&lt;/a&gt; from other resource bundlers out there is that it aims to provided a bare bones, minimum feature set for building bales (or resource bundle).  The core &lt;a href="http://nuget.org/List/Packages/CodeSlice.Web.Baler"&gt;Baler package&lt;/a&gt; offers the ability to concatenate, render and cache JavaScript and &lt;span class="caps"&gt;CSS&lt;/span&gt; bales.  Thats it.  No minification nor fancy processing nothing.  However &lt;a href="http://yobriefca.se/projects/baler/"&gt;Baler&lt;/a&gt; does have 2 main extensibility hooks though (&lt;code&gt;Before&lt;/code&gt; and &lt;code&gt;After&lt;/code&gt;) which can be leveraged to control how bundles are manipulated.  There are currently 3 extensions for Baler but more are on their way,&lt;/p&gt;&lt;ol&gt;	&lt;li&gt;&lt;a href="http://nuget.org/List/Packages/CodeSlice.Web.Baler.Extensions.CoffeeScript"&gt;CoffeeScript&lt;/a&gt; - Transforms &lt;a href="http://coffeescript.org"&gt;CoffeeScript&lt;/a&gt; files into JavaScript&lt;/li&gt;	&lt;li&gt;&lt;a href="http://nuget.org/List/Packages/CodeSlice.Web.Baler.Extensions.Less"&gt;.&lt;span class="caps"&gt;LESS&lt;/span&gt;&lt;/a&gt; - Transforms &lt;a href="http://www.dotlesscss.org/"&gt;.&lt;span class="caps"&gt;LESS&lt;/span&gt;&lt;/a&gt; files into &lt;span class="caps"&gt;CSS&lt;/span&gt;&lt;/li&gt;	&lt;li&gt;&lt;a href="http://nuget.org/List/Packages/CodeSlice.Web.Baler.Extensions.AjaxMinifier"&gt;Ajax Minifier&lt;/a&gt; - Allows for minification of JavaScript and &lt;span class="caps"&gt;CSS&lt;/span&gt; using Microsofts Ajax Minifier&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Quick Example&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="CodeSlice.Web.Test.Default" %&amp;gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%@ Import Namespace="CodeSlice.Web.Baler" %&amp;gt;

&lt;span class="cp"&gt;&amp;lt;!DOCTYPE HTML /&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=
      Baler.Build(
        "~/scripts/script1.js",
        "~/scripts/script2.js",
        "~/scripts/script3.js",
      ).AsJs()
    %&amp;gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This example will take 3 source files concatenate them into a random script file and output the necessary &lt;code&gt;&amp;lt;script src='1jdk2ds.js' type='text/javascript'&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;.  Subsequent calls that match this bales signature (the order and contents of the bale) will use the cached script tag and not perform that concatenation again.&lt;/p&gt;&lt;p&gt;As I say it's early days.  I really need to get the docs up to snuff, write plenty of test and add a few more features before I start shouting from the rooftops but at least it's out now and there is no going back :-).&lt;/p&gt;&lt;p&gt;Baler v0.1 is available on &lt;a href="http://nuget.org/List/Packages/CodeSlice.Web.Baler"&gt;Nuget&lt;/a&gt; and &lt;a href="https://github.com/kouphax/baler.git"&gt;Github&lt;/a&gt; and the annotated source code is available &lt;a href="http://kouphax.github.com/baler/CodeSlice.Web.Baler/CodeSlice.Web.Baler/Baler.html" title="Core"&gt;here&lt;/a&gt;, &lt;a href="http://kouphax.github.com/baler/CodeSlice.Web.Baler/CodeSlice.Web.Baler.Extensions.AjaxMinifier/MinificationExtensions.html" title="AjaxMin Extensions"&gt;here&lt;/a&gt;, &lt;a href="http://kouphax.github.com/baler/CodeSlice.Web.Baler/CodeSlice.Web.Baler.Extensions.CoffeeScript/CoffeeScriptExtensions.html" title="CoffeeScript Extensions"&gt;here&lt;/a&gt; and &lt;a href="http://kouphax.github.com/baler/CodeSlice.Web.Baler/CodeSlice.Web.Baler.Extensions.Less/LessExtensions.html" title=".LESS Extensions"&gt;here&lt;/a&gt;&lt;/p&gt;</content></entry><entry><title>Micro Web Frameworks in .NET - Nancy - Hello World</title><updated>Tue May 24 00:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/screencasts/micro-web-frameworks-in-net-nancy-hello-world/"></link><id>urn:yobriefca-se:feed:post:Micro Web Frameworks in .NET - Nancy - Hello World</id><content type="html">&lt;p&gt;Part of my Micro Web Frameworks in .NET series. This time looking at Hello World in Nancy &lt;a href="http://nancyfx.org"&gt;nancyfx.org&lt;/a&gt;.&lt;/p&gt;</content></entry><entry><title>Micro Web Frameworks in .NET - Jessica - Views</title><updated>Mon May 23 00:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/screencasts/micro-web-frameworks-in-net-jessica-views/"></link><id>urn:yobriefca-se:feed:post:Micro Web Frameworks in .NET - Jessica - Views</id><content type="html">&lt;p&gt;The fourth part of a series covering the various micro web frameworks in .NET. This part shows you how to serve dynamic views with Jessica &lt;a href="http://jessicafx.org"&gt;http://jessicafx.org&lt;/a&gt;.&lt;/p&gt;</content></entry><entry><title>Micro Web Frameworks in .NET 101: Nancy</title><updated>Sun May 22 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/05/22/micro-web-frameworks-in-net-101-nancy/"></link><id>urn:yobriefca-se:feed:post:Micro Web Frameworks in .NET 101: Nancy</id><content type="html">
&lt;p&gt;&lt;a href="htttp://nancyfx.org"&gt;Nancy&lt;/a&gt; is a different beast to &lt;a href="http://jessicafx.org"&gt;Jessica&lt;/a&gt; while on the surface it may appear like a micro web framework, once you scratch the surface it becomes debatable because there is just some much more than a nice &lt;span class="caps"&gt;DSL&lt;/span&gt; for creating lightweight web apps.  In fact this was &lt;a href="http://tombell.org.uk/blog/2011/04/10/why-did-i-create-jessica/"&gt;one of the reasons&lt;/a&gt; Jessica was created,&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Nancy has taken an approach to making many parts of the framework replaceable; if you don?t like the functionality of X you can create your own, and have Nancy use that instead. While this is a respectable goal for a web framework, the focus for Jessica has been to stay as simple and as close to Sinatra as possible. &lt;em&gt;Tom Bell.  Why Did I Create Jessica?&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Anyway we will touch on these aspects a bit later.  Lets get cracking.&lt;/p&gt;&lt;h2&gt;Getting Started - Hello World&lt;/h2&gt;&lt;p&gt;Getting &lt;a href="htttp://nancyfx.org"&gt;Nancy&lt;/a&gt; up and running is simple enough.  Starting with an empty &lt;span class="caps"&gt;ASP&lt;/span&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt; web project&lt;sup id="fnr1" class="footnote"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt; we can use &lt;a href="http://nuget.org/"&gt;NuGet&lt;/a&gt; to install Nancy&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="n"&gt;Nancy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also because we are hosting this in an &lt;span class="caps"&gt;ASP&lt;/span&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt; environment (more on this later) we need to install the appropriate hosting package&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;Install-Package&lt;/span&gt; &lt;span class="n"&gt;Nancy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Hosting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Aspnet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;Next step requires us to add some stuff to the &lt;code&gt;web.config&lt;/code&gt;.  If you've been smart and installed the hosting package from NuGet this steps is done for you but ultimately your minimal &lt;code&gt;web.config&lt;/code&gt; should look like this.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;system.web&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;compilation&lt;/span&gt; &lt;span class="na"&gt;debug=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;targetFramework=&lt;/span&gt;&lt;span class="s"&gt;"4.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;httpHandlers&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;add&lt;/span&gt; &lt;span class="na"&gt;verb=&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"Nancy.Hosting.Aspnet.NancyHttpRequestHandler"&lt;/span&gt; &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/httpHandlers&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/system.web&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;system.webServer&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;validation&lt;/span&gt; &lt;span class="na"&gt;validateIntegratedModeConfiguration=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;handlers&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;add&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"Nancy"&lt;/span&gt; &lt;span class="na"&gt;verb=&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"Nancy.Hosting.Aspnet.NancyHttpRequestHandler"&lt;/span&gt; &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/handlers&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/system.webServer&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The final step is to create the hello world module that will handle your route.  Again, like Jessica, it doesn't matter where the module classes are placed but for neatness I just like to stick them in a &lt;code&gt;Modules&lt;/code&gt; folder.  Our module will look very similar to the one we defined for Jessica.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloWorldModule&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NancyModule&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;HelloWorldModule&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we're done.  Fire the app up and behold the "Hello World"-yness of it all.&lt;/p&gt;&lt;h2&gt;Other Micro Framework Related Stuff&lt;/h2&gt;&lt;p&gt;&lt;a href="http://nancyfx.org"&gt;Nancy&lt;/a&gt; has some features that aren't technically related to the micro framework aspect  - specifically hosting but I'll touch on that later.  &lt;a href="http://nancyfx.org"&gt;Nancy&lt;/a&gt; also has a lot of nice features that are related to the micro framework aspects so lets take a bit of a whirlwind tour around the main areas first.&lt;/p&gt;&lt;h3&gt;Routes&lt;/h3&gt;&lt;p&gt;Routes in &lt;a href="http://nancyfx.org"&gt;Nancy&lt;/a&gt; are pretty powerful.  Obviously you get the declare static routes (as demonstrated above) but dynamic routes (routes with variables for example) are also supported in a few of ways.  First of all you have named segments.  These can be expressed in 2 ways&lt;/p&gt;&lt;ol&gt;	&lt;li&gt;Sinatra style variables &lt;code&gt;/user/:id&lt;/code&gt;, or,&lt;/li&gt;	&lt;li&gt;C#-esque &lt;code&gt;String.format&lt;/code&gt; style &lt;code&gt;/user/{id}&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Declaring a route like this will cause the variable section to be pushed into a named variable within the dynamic object passedin into the route action. &lt;code&gt;/user/jameshu&lt;/code&gt; matches &lt;code&gt;/user/:id&lt;/code&gt; and the dynamic object passed into the action will have &lt;code&gt;x.id == "jameshu"&lt;/code&gt;&lt;/p&gt;&lt;p&gt;The other means of dynamic route matching is the use of regular expressions and named capture groups (or backreferences as they are sometimes known).  Using regular expressions as route parameters allows us to offer more fine grained route matching.  Take the following route as an example,&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;@"/users/(?&amp;lt;id&amp;gt;[\d]+)"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;GetUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This route will &lt;span class="caps"&gt;ONLY&lt;/span&gt; match routes whose variable section matches the expression, in this case a numeric value.  So not only have we specified a route variable but we are also limiting access to that action to "valid" values.  This means we could also offer another route that accepts only alphabetical characters.  Powerful enough.&lt;/p&gt;&lt;h3&gt;Route Conditions&lt;/h3&gt;&lt;p&gt;Taking routes another step further &lt;a href="http://nancyfx.org"&gt;Nancy&lt;/a&gt; also offers optional conditions that can be used to determine if a route should be executed for a given request.  Lets use this heavily contrived example to demonstrate this feature,&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"/user"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"secrets"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So this route will match any route starting with &lt;code&gt;/user&lt;/code&gt; however the condition (the second argument of the definition) will ensure that the route action will only get executed if the query string is populated with an argument called password with a value of secrets i.e &lt;code&gt;http://myserver/user?password=secrets&lt;/code&gt; will match successfully.&lt;/p&gt;&lt;h3&gt;Views&lt;/h3&gt;&lt;p&gt;&lt;a href="http://nancyfx.org"&gt;Nancy&lt;/a&gt; supports a decent range of view engines&lt;sup id="fnr2" class="footnote"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;ul&gt;	&lt;li&gt;Razor&lt;/li&gt;	&lt;li&gt;Spark&lt;/li&gt;	&lt;li&gt;NDjango and, obviously,&lt;/li&gt;	&lt;li&gt;Static files&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Serving up dynamic vies is fairly simple&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloWorldModule&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NancyModule&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;HelloWorldModule&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"index.cshtml"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We basically use the View object to specify the view and optionally pass in a view model as well.  By default Nancy will look in the &lt;code&gt;~/Views&lt;/code&gt; folder for the views but you can also specify a full path if needs be.  The view is then matched against the available view engines and rendered as you would expect.  This is the Razor view specified above.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello World&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;@Model&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Responses&lt;/h3&gt;&lt;p&gt;Nancy is also capable of returning static content as different responses (similar to how Jessica does it).  Each route action is expected to return a Nancy Response object. The object itself has a number of convenience methods for serving static files and &lt;acronym title="JavaScript Object Notation"&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt;&lt;/acronym&gt; such as &lt;code&gt;Response.AsJs&lt;/code&gt;, &lt;code&gt;Response.AsJson&lt;/code&gt;, &lt;code&gt;Response.AsXml&lt;/code&gt;, , &lt;code&gt;Response.AsRedirect&lt;/code&gt; etc.&lt;/p&gt;&lt;h2&gt;Hosting&lt;/h2&gt;&lt;p&gt;This is were things move away from "micro framework" world a bit.  Nancy itself abstracts out the hosting environment making the entire framework portable allowing you to host in any number of places including (but not limited to),&lt;/p&gt;&lt;ul&gt;	&lt;li&gt;Self hosted (e.g. embedded within an executable)&lt;/li&gt;	&lt;li&gt;&lt;span class="caps"&gt;ASP&lt;/span&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt;/&lt;span class="caps"&gt;IIS&lt;/span&gt; (as demonstrated above)&lt;/li&gt;	&lt;li&gt;&lt;span class="caps"&gt;WCF&lt;/span&gt; (yep thats right), and,&lt;/li&gt;	&lt;li&gt;Some partial &lt;a href="http://bvanderveen.com/a/dotnet-http-abstractions"&gt;&lt;span class="caps"&gt;OWIN&lt;/span&gt;&lt;/a&gt; support&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This, to me at least, is very interesting.  Being able to build an executable that accepts &lt;span class="caps"&gt;HTTP&lt;/span&gt; requests could be pretty powerful in the right hands and the &lt;span class="caps"&gt;WCF&lt;/span&gt; stuff sounds very interesting (is this similar to what the new &lt;span class="caps"&gt;WCF&lt;/span&gt; Web &lt;span class="caps"&gt;API&lt;/span&gt; is attempting to offer?).  I need to play some more in this area.  I'll report back when I am done.&lt;/p&gt;&lt;h2&gt;Summing Up&lt;/h2&gt;&lt;p&gt;So that was a quick round up of the key features of Nancy and I think it's another one worth looking at.  So hopefully you can also see how it differs from Jessica.  From a code perspective they seem quite similar (though Nancy has possibly a few more features) but the whole hosting abstraction layer is very interesting.  I have had people ask me if this introduced any new (or even old) security concerns and to be honest I don't know but it might certainly be worth looking out for.&lt;/p&gt;&lt;p&gt;As always I may need corrections so please fire away.  Hopefully I can cover off these points with a few more screencasts over the next week.  Stay tuned.&lt;/p&gt;&lt;p id="fn1" class="footnote"&gt;&lt;a href="#fnr1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; In my &lt;a href="http://jessicafx.org"&gt;Jessica&lt;/a&gt; I laid out steps to strip the normal &lt;span class="caps"&gt;ASP&lt;/span&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt; Web Project template out of all the unnecessary bits.  Lord knows why I didn't just create an empty web project &amp;lt;facepalm/&amp;gt;&lt;/p&gt;&lt;p id="fn2" class="footnote"&gt;&lt;a href="#fnr2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; Apparently it also has a built in view engine called the Super Simple View Engine but as of yet I can't seem to get it to work.&lt;/p&gt;</content></entry><entry><title>Micro Web Frameworks in .NET Screencast: Nancy #1 - Hello World</title><updated>Sun May 22 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/05/22/micro-web-frameworks-in-net-screencast-nancy-number-1-hello-world/"></link><id>urn:yobriefca-se:feed:post:Micro Web Frameworks in .NET Screencast: Nancy #1 - Hello World</id><content type="html">&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/24114023?byline=0&amp;amp;portrait=0" width="601" height="428" frameborder="0"&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://vimeo.com/24114023"&gt;Nancy #1 - Hello World&lt;/a&gt; from &lt;a href="http://vimeo.com/user7151248"&gt;James Hughes&lt;/a&gt; on &lt;a href="http://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Part of my Micro Web Frameworks in .&lt;span class="caps"&gt;NET&lt;/span&gt; series.  This time looking at Hello World in Nancy (http://nancyfx.org)&lt;/p&gt;</content></entry><entry><title>Micro Web Frameworks in .NET - Jessica - Configuration</title><updated>Sun May 22 00:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/screencasts/micro-web-frameworks-in-net-jessica-configuration/"></link><id>urn:yobriefca-se:feed:post:Micro Web Frameworks in .NET - Jessica - Configuration</id><content type="html">&lt;p&gt;The third part of a series covering the various micro web frameworks in .NET. This part shows you how to configure Jessica &lt;a href="http://jessicafx.org"&gt;http://jessicafx.org&lt;/a&gt;.&lt;/p&gt;</content></entry><entry><title>Micro Web Frameworks in .NET - Jessica - Static Files</title><updated>Sat May 21 00:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/screencasts/micro-web-frameworks-in-net-jessica-static-files/"></link><id>urn:yobriefca-se:feed:post:Micro Web Frameworks in .NET - Jessica - Static Files</id><content type="html">&lt;p&gt;The second part of a series covering the various micro web frameworks in .NET. This part shows you how to serve static files through Jessica &lt;a href="http://jessicafx.org"&gt;http://jessicafx.org&lt;/a&gt;.&lt;/p&gt;</content></entry><entry><title>Micro Web Frameworks in .NET - Jessica - Hello World</title><updated>Fri May 20 00:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/screencasts/micro-web-frameworks-in-net-jessica-hello-world/"></link><id>urn:yobriefca-se:feed:post:Micro Web Frameworks in .NET - Jessica - Hello World</id><content type="html">&lt;p&gt;The first part of a series covering the various micro web frameworks in .NET. This part shows you how to implement Hello World using Jessica &lt;a href="http://jessicafx.org"&gt;http://jessicafx.org&lt;/a&gt;.&lt;/p&gt;</content></entry><entry><title>Micro Web Frameworks in .NET Screencast: Jessica #4 - Views</title><updated>Thu May 19 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/05/19/micro-web-frameworks-in-net-screencast-jessica-number-4-views/"></link><id>urn:yobriefca-se:feed:post:Micro Web Frameworks in .NET Screencast: Jessica #4 - Views</id><content type="html">&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/24014537?byline=0&amp;amp;portrait=0" width="601" height="428" frameborder="0"&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://vimeo.com/24014537"&gt;Jessica #4 - Views&lt;/a&gt; from &lt;a href="http://vimeo.com/user7151248"&gt;James Hughes&lt;/a&gt; on &lt;a href="http://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The four part of a series covering the various micro web frameworks in .&lt;span class="caps"&gt;NET&lt;/span&gt;.  This part shows you how to serve dynamic views with Jessica (http://jessicafx.org).&lt;/p&gt;</content></entry><entry><title>Micro Web Frameworks in .NET Screencast: Jessica #3 - Configuration</title><updated>Thu May 19 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/05/19/micro-web-frameworks-in-net-screencast-jessica-number-3-configuration/"></link><id>urn:yobriefca-se:feed:post:Micro Web Frameworks in .NET Screencast: Jessica #3 - Configuration</id><content type="html">&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/24014440?byline=0&amp;amp;portrait=0" width="601" height="428" frameborder="0"&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://vimeo.com/24014440"&gt;Jessica #3 - Configuration&lt;/a&gt; from &lt;a href="http://vimeo.com/user7151248"&gt;James Hughes&lt;/a&gt; on &lt;a href="http://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The third part of a series covering the various micro web frameworks in .&lt;span class="caps"&gt;NET&lt;/span&gt;.  This part shows you how to configure  Jessica (http://jessicafx.org).&lt;/p&gt;</content></entry><entry><title>Micro Web Frameworks in .NET Screencast: Jessica #2 - Static Content</title><updated>Thu May 19 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/05/19/micro-web-frameworks-in-net-screencast-jessica-number-2-static-content/"></link><id>urn:yobriefca-se:feed:post:Micro Web Frameworks in .NET Screencast: Jessica #2 - Static Content</id><content type="html">&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/24014389?byline=0&amp;amp;portrait=0" width="601" height="428" frameborder="0"&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://vimeo.com/24014389"&gt;Jessica #2 - Static Content&lt;/a&gt; from &lt;a href="http://vimeo.com/user7151248"&gt;James Hughes&lt;/a&gt; on &lt;a href="http://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The second part of a series covering the various micro web frameworks in .&lt;span class="caps"&gt;NET&lt;/span&gt;.  This part shows you how to serve static files through Jessica (http://jessicafx.org).&lt;/p&gt;</content></entry><entry><title>Micro Web Frameworks in .NET Screencast - Jessica #1 - Hello World</title><updated>Thu May 19 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/05/19/micro-web-frameworks-in-net-screencast-jessica-number-1-hello-world/"></link><id>urn:yobriefca-se:feed:post:Micro Web Frameworks in .NET Screencast - Jessica #1 - Hello World</id><content type="html">&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/24014199?byline=0&amp;amp;portrait=0" width="601" height="428" frameborder="0"&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt; &lt;a href="http://vimeo.com/24014199"&gt;Jessica #1 - Hello World&lt;/a&gt; from &lt;a href="http://vimeo.com/user7151248"&gt;James Hughes&lt;/a&gt; on &lt;a href="http://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The first part of a series covering the various micro web frameworks in .&lt;span class="caps"&gt;NET&lt;/span&gt;. This part shows you how to implement Hello World using Jessica (&lt;a href="http://jessicafx.org)."&gt;http://jessicafx.org).&lt;/a&gt;&lt;/p&gt;</content></entry><entry><title>Micro Web Frameworks in .NET 101: Jessica</title><updated>Wed May 18 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/05/18/micro-web-frameworks-in-net-101-jessica/"></link><id>urn:yobriefca-se:feed:post:Micro Web Frameworks in .NET 101: Jessica</id><content type="html">
&lt;p&gt;Now I have got the &lt;a href=":/blog/2011/05/18/why-would-you-use-micro-web-frameworks-in-net"&gt;opinion piece&lt;/a&gt; out of the way I can start the bit I like - dissecting the various technologies that could be classed as &lt;em&gt;micro web frameworks&lt;/em&gt;.  First on the table is &lt;a href=":http://jessicafx.org"&gt;Jessica&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;Getting Started - Hello World&lt;/h2&gt;&lt;p&gt;Getting a simple Hello World set up in &lt;a href=":http://jessicafx.org"&gt;Jessica&lt;/a&gt; involves (optionally) taking more out than you put in.  &lt;a href=":http://jessicafx.org"&gt;Jessica&lt;/a&gt; requires very little configuration so creating a new web project, deleting all the extra files and folders, trimming the &lt;code&gt;web.config&lt;/code&gt; and emptying the &lt;code&gt;Global.asax.cs&lt;/code&gt; makes for a nice blank canvas to start with.&lt;/p&gt;&lt;p class="img-holder"&gt;&lt;img alt="" src="/images/blog/project-before-and-after.png" /&gt;&lt;/p&gt;&lt;p&gt;Next step is pretty difficult :-).  Within the &lt;a href="http://nuget.org"&gt;NuGet&lt;/a&gt; Package Manager Console just install the Jessica package&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;Install-Package&lt;/span&gt; &lt;span class="n"&gt;Jessica&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once installed be need to tell Jess to initialise/bootstrap itself when the application starts by calling the initialise method in the &lt;code&gt;Application_Start&lt;/code&gt; method of the &lt;code&gt;Global.asax.cs&lt;/code&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Global&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Web&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HttpApplication&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Application_Start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;EventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Jess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Initialise&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point it's also possible to supply a number of configuration options but we will touch on this later along with the optional configuration &lt;span class="caps"&gt;XML&lt;/span&gt;.  Now that Jess is setup to configure itself all we need to do now is define the module that will handle our complex Hello World output.&lt;/p&gt;&lt;p&gt;Modules form the basis of Jessica each one holding a number of routes (based on URL's and &lt;span class="caps"&gt;HTTP&lt;/span&gt; verbs) and associated actions.  Our app will have a single module,&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainModule&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;JessModule&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MainModule&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This simple module defines a single route that will match any standard &lt;code&gt;GET&lt;/code&gt; request for the root of the app. And that's it.  When you run the app Jess will inspect the assembly and find all the modules and wire up the routes.&lt;/p&gt;&lt;h2&gt;The Rest of the Pie&lt;/h2&gt;&lt;p&gt;Obviously serving plain bits of text is a bit useless so there are plenty of things that Jessica offers that makes it, well, actually useful.&lt;/p&gt;&lt;h3&gt;Configuration&lt;/h3&gt;&lt;p&gt;Jessica can be configured programatically or via &lt;span class="caps"&gt;XML&lt;/span&gt; config.  A number of things you can currently set include,&lt;/p&gt;&lt;ul&gt;	&lt;li&gt;Environment - the environment you build in e.g. &lt;code&gt;development&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;release&lt;/code&gt;.  Default &lt;code&gt;development&lt;/code&gt;&lt;/li&gt;	&lt;li&gt;Public Directory - The directory to be used to server static content (html, js, css, images) that require no preprocessing. Default &lt;code&gt;public&lt;/code&gt;&lt;/li&gt;	&lt;li&gt;Views Directory - The directory to be used to serve views that can be dynamically rendered (Razor, Textile, Markdown, Liquid etc.).  Default &lt;code&gt;views&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The &lt;span class="caps"&gt;XML&lt;/span&gt; config is outlined below but each of these properties can be set in the &lt;code&gt;Global.asax.cs&lt;/code&gt; programatically as well via the &lt;code&gt;Jess.Configuration&lt;/code&gt; properties.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;configSections&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"jessica"&lt;/span&gt; 
             &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"Jessica.Configuration.JessicaConfiguration,Jessica"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/configSections&amp;gt;&lt;/span&gt;
    
&lt;span class="nt"&gt;&amp;lt;jessica&lt;/span&gt; &lt;span class="na"&gt;environment=&lt;/span&gt;&lt;span class="s"&gt;"development"&lt;/span&gt; 
         &lt;span class="na"&gt;publicDir=&lt;/span&gt;&lt;span class="s"&gt;"Public"&lt;/span&gt; 
         &lt;span class="na"&gt;viewsDir=&lt;/span&gt;&lt;span class="s"&gt;"Views"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Routes and Actions&lt;/h3&gt;&lt;p&gt;Routes may be defined as a literal path such as &lt;code&gt;/users&lt;/code&gt; or &lt;code&gt;/store/toys&lt;/code&gt; or with variable segments such as &lt;code&gt;/user/:id&lt;/code&gt; or &lt;code&gt;/blog/:year/:month/:day&lt;/code&gt;.  Variable segments are then parsed out of the route url and the values added to the action argument.&lt;/p&gt;&lt;p class="minimal-gist"&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/blog/:year/:month/:day"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;View&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"blog"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That seems to be about the extent of the route manipulation for now.  Would be nice to see the other Sinatra stuff included such as &lt;a href="http://www.sinatrarb.com/intro#Routes"&gt;splats&lt;/a&gt;, &lt;a href="http://www.sinatrarb.com/intro#Routes"&gt;regular expressions&lt;/a&gt; and &lt;a href="http://www.sinatrarb.com/intro#Conditions"&gt;conditions&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Actions are fairly simple they take a dynamic object and are expected to return a Jessica &lt;code&gt;Response&lt;/code&gt; object.  The dynamic object passed in contains a number of things such as route parameters, querystring parameters and the current HttpContext.  As an added niceness the Jessica &lt;code&gt;Response&lt;/code&gt; object has a number of &lt;a href="http://msdn.microsoft.com/en-us/library/z5z9kes2(v=vs.71).aspx"&gt;implicit&lt;/a&gt; type conversions that allow us to return simpler objects&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MainModule&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// string -&amp;gt; text/html&lt;/span&gt;
    &lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// int -&amp;gt; http status code&lt;/span&gt;
    &lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                             

    &lt;span class="c1"&gt;// Action&amp;lt;Response&amp;gt; -&amp;gt; Response stream&lt;/span&gt;
    &lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AsText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Test"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Static Content&lt;/h3&gt;&lt;p&gt;Jessica allows us to return static content simply.  First of all all routes are first checked for the existence of a file at that &lt;span class="caps"&gt;URL&lt;/span&gt;.  If a file is found it is served, if not then Jessica goes to the route table and works it's magic.  Putting resources in the &lt;code&gt;publicDir&lt;/code&gt; allows Jessica to serve static content from the route actions and the &lt;code&gt;Response&lt;/code&gt; object comes with a number of nice helpers to help make your static actions neater.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MainModule&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AsCss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test.css"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; 
    &lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AsFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"trojanz.exe"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"application/application"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AsHtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test.html"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AsJs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test.js"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AsJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"James"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Age&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;31&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
    &lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AsRedirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http://www.google.com"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AsText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Views&lt;/h3&gt;&lt;p&gt;What web technology would be complete without the ability to serve non-static views?  Oddly enough Jessica, out of the box at least, comes with no view engines.  I suspect this is because dynamic view rendering isn't technically something that should form the basis of a web framework - thats the job of the view engines.  Jessica does however come with an extension point of adding X amount of view engines - &lt;code&gt;Jess.ViewEngines&lt;/code&gt;.  There is also a healthy volume of view engines available for Jessica,&lt;/p&gt;&lt;ul&gt;	&lt;li&gt;&lt;a href="http://nuget.org/List/Packages/Jessica-ViewEngine-Razor"&gt;Razor&lt;/a&gt;&lt;/li&gt;	&lt;li&gt;&lt;a href="http://nuget.org/List/Packages/Jessica-ViewEngine-Spark"&gt;Spark&lt;/a&gt;&lt;/li&gt;	&lt;li&gt;&lt;a href="http://nuget.org/List/Packages/Jessica-ViewEngine-DotLiquid"&gt;DotLiquid&lt;/a&gt;&lt;/li&gt;	&lt;li&gt;&lt;a href="http://nuget.org/List/Packages/Jessica-ViewEngine-Markdown"&gt;Markdown&lt;/a&gt;&lt;/li&gt;	&lt;li&gt;&lt;a href="http://nuget.org/List/Packages/Jessica-ViewEngine-Textile"&gt;Textile&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Rendering a view from an action is also very simple&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainModule&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;JessModule&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MainModule&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/user/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"index"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/user/:username"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"user"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first option renders a simple view called index while the second takes a model object that is pushed into the scope of the view and can be used to build the view.  Jessica will loop through it's &lt;code&gt;ViewEngines&lt;/code&gt; collection and attempt to resolve the view name to a file in the specified &lt;code&gt;viewsDir&lt;/code&gt; folder.  If it finds a matching view it will render it.&lt;/p&gt;&lt;p&gt;I am going to take the lead from Jessica itself and not dive into the various view choices for now.  They are pretty self explanatory anyway.&lt;/p&gt;&lt;h2&gt;Summing Up&lt;/h2&gt;&lt;p&gt;So thats the 101, the skinny, the lowdown, the starter for 10, the basics and other random statements of &lt;a href=":http://jessicafx.org"&gt;Jessica&lt;/a&gt;. Hopefully this covers the vast majority of what v0.83 of Jessica offers.  It's a nice minimla framework that attempts to stick to Sinatra's philosophy.  It would be nice to see a few more of Sinatras features creeping in especially route &lt;a href="http://www.sinatrarb.com/intro#Conditions"&gt;conditions&lt;/a&gt;.  There is also some nice high level error handling being introduced (for v0.9 I assume) for handling application wide errors and 404's.  I plan on talking about these when they make an appearance.&lt;/p&gt;&lt;p&gt;Corrections, comments and criticisms below please.&lt;/p&gt;</content></entry><entry><title>Why Would You Use Micro Web Frameworks in .NET?</title><updated>Tue May 17 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/05/17/why-would-you-use-micro-web-frameworks-in-net/"></link><id>urn:yobriefca-se:feed:post:Why Would You Use Micro Web Frameworks in .NET?</id><content type="html">
&lt;blockquote&gt;&lt;p&gt;&lt;span class="caps"&gt;UPDATE&lt;/span&gt;: Oh dear James &amp;lt;shakeshead/&amp;gt;.  So it seems someone was paying attention to my post and noticed my benchmarks were &lt;strong&gt;hideously&lt;/strong&gt; flawed.  I have removed them because I don't like looking like a total fool but I will be replacing the with &lt;strong&gt;honest, real and unstupified&lt;/strong&gt; results as soon as I can.  Apologies for any distress this may have caused.  &lt;acronym title="Fear Uncertainty Doubt"&gt;&lt;span class="caps"&gt;FUD&lt;/span&gt;&lt;/acronym&gt; is a powerful thing in the wrong hands but ignorance is worse.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I've been doing a bit of research into micro web frameworks in the.&lt;span class="caps"&gt;NET&lt;/span&gt; world recently and I was posed a question by a colleague.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Whats the point of a micro web framework?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I gave the usual response - more lightweight, smaller foot print blah blah blah. To be honest I was barely convincing myself.  I suspected I had fallen into the trap of latching on to something because it was novel to me rather than any real reason.  I am not saying they don't have a place in solutions technology stack, quite the opposite in fact, what I am saying is that I didn't have sufficient justification for bothering with them.&lt;/p&gt;&lt;p&gt;So I've spent a bit more time looking at the background of these microframeworks rather than the techs themselves and hopefully the next time someone asks I can give a more convincing reply.&lt;/p&gt;&lt;h2&gt;What Is A Micro Web Framework&lt;/h2&gt;&lt;p&gt;Pretty much a micro web framework is a framework that provides the absolute minimum feature set required to create a web application.  Extra features can be added via extensions etc. but the sole purpose of a microframework is to allow the app to handle requests to certain URLs (routing) with a bit of basic error handling for 404's etc. (possibly).  No feature creep, no bloated deployments just ultra-lean request/response handling.&lt;/p&gt;&lt;p&gt;The most famous microframework, and the one that started it all, comes from the Ruby world - &lt;a href="http://www.sinatrarb.com/"&gt;Sinatra&lt;/a&gt; and it's "Hello World" example really highlights the ease of creating an app.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'sinatra'&lt;/span&gt;

&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s1"&gt;'/hi'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="s2"&gt;"Hello World!"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run this and navigate to &lt;code&gt;/hi&lt;/code&gt; to see the amazing response of &lt;code&gt;Hello World&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;Micro Web Frameworks in the .&lt;span class="caps"&gt;NET&lt;/span&gt; World&lt;/h2&gt;&lt;p&gt;So how does this compare to similar technologies in the .&lt;span class="caps"&gt;NET&lt;/span&gt; world.  Most .&lt;span class="caps"&gt;NET&lt;/span&gt; solutions take a lot of inspiration from &lt;a href="http://www.sinatrarb.com/"&gt;Sinatra&lt;/a&gt; (and why not it's pretty much the blueprints for the microframeworks) and this one is written using &lt;a href="http://jessicafx.org"&gt;Jessica&lt;/a&gt;.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyModule&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Jessica&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JessModule&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MyModule&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/hi"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OK so there is a bit of extra language noise but this is to be expected when moving from Ruby to C# but it's just as readable.  &lt;a href="http://jessicafx.org"&gt;Jessica&lt;/a&gt; isn't the only microframework in the .&lt;span class="caps"&gt;NET&lt;/span&gt; world but it does seem to be one of the better ones (based on a very superficial amount of research - no offence meant to other frameworks - happy to be proven wrong).  The other frameworks considered "micro" include,&lt;/p&gt;&lt;ul&gt;	&lt;li&gt;&lt;a href="http://github.com/thecodejunkie/Nancy"&gt;Nancy&lt;/a&gt;&lt;/li&gt;	&lt;li&gt;&lt;a href="http://github.com/martinrue/Tinyweb"&gt;Tinyweb&lt;/a&gt;&lt;/li&gt;	&lt;li&gt;&lt;a href="http://github.com/jondot/nina"&gt;Nina&lt;/a&gt;&lt;/li&gt;	&lt;li&gt;&lt;a href="http://github.com/carlhoerberg/NSinatra"&gt;NSinatra&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;What Makes Micro Frameworks Worthwhile?&lt;/h2&gt;&lt;p&gt;So lets expand on my original argument of &lt;cite&gt;"more lightweight, smaller foot print blah blah blah"&lt;/cite&gt;.  The most obvious is that a microframework by design is going to be a lot more lightweight than a normal framework.  It's lifecycle for a request is going to be greatly simplified and ultimately this should help increase performance per request (I currently have no figures to back this up yet but I am working on it).  As well as performance and increased throughput this lightweight approach should greatly reduce the memory footprint which will help your app scale a bit better&lt;sup id="fnr1" class="footnote"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;&lt;p&gt;Another reason to consider a microframework is that you are in control of everything and that is good in my book.  It's one of my arguments for choosing &lt;span class="caps"&gt;MVC&lt;/span&gt; over WebForms.  No unnecessary injection of client side code or script managers or any of that sort of thing.  No overly complex view properties being populated for no reason.  Nothing but the stuff you put in.&lt;/p&gt;&lt;p&gt;Not exactly within the bounds of a microframework by definition but still worth mentioning is hosting.  &lt;a href="http://nancyfx.org"&gt;Nancy&lt;/a&gt; has a number of hosting options&lt;/p&gt;&lt;ul&gt;	&lt;li&gt;Standalone&lt;/li&gt;	&lt;li&gt;In a web app&lt;/li&gt;	&lt;li&gt;In a &lt;span class="caps"&gt;WCF&lt;/span&gt; Service&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This sort of swappable hosting greatly increases portability of your app.  Now this is &lt;a href="http://nancyfx.org"&gt;Nancy&lt;/a&gt; specific but the effort required to create this sort of functionality with another microframework is trivial in comparison to the what it would be in &lt;span class="caps"&gt;MVC&lt;/span&gt; or WebForms.&lt;/p&gt;&lt;p&gt;Also many of the microframeworks have some sort of support for &lt;a href="http://owin.org/"&gt;&lt;span class="caps"&gt;OWIN&lt;/span&gt;&lt;/a&gt; which is essentially a web abstraction that would allow your app to run on any &lt;span class="caps"&gt;OWIN&lt;/span&gt; supported server&lt;sup id="fnr3" class="footnote"&gt;&lt;a href="#fn3"&gt;3&lt;/a&gt;&lt;/sup&gt;.  This sort of support would take longer to roll out across the larger frameworks which generally stick to &lt;span class="caps"&gt;IIS&lt;/span&gt;.  I'm not saying it won't happen but the bigger your framework the slower change is going to happen.&lt;/p&gt;&lt;p&gt;That brings me to my final point - evolution.  &lt;span class="caps"&gt;ASP&lt;/span&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt; &lt;span class="caps"&gt;MVC&lt;/span&gt; has evolved very fast since v1.0 and there is no sign of that progress abating any time soon.  Still it's speed is hindered by it's size. These microframeworks introduce new features (some experimental for the brave among us) much faster because of the fact they are small.  Extending these frameworks don't require the creation of numerous classes to do simple things - there is generally a common extension point with a very small set of requirements.&lt;/p&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;I hope this has helped my colleagues get a better picture of why I think microframeworks are worthy of our time and why I am keen to do a bit of research on them.  I also hope this has broadened a few minds in terms of solution architectures in the .&lt;span class="caps"&gt;NET&lt;/span&gt; world.  Not everything needs to be some configurable, Enterprise ready, heavyweight application sometimes the simplest solution is all you need.&lt;/p&gt;&lt;p id="fn1" class="footnote"&gt;&lt;a href="#fnr1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Provided you don't do something stupid!&lt;/p&gt;&lt;p id="fn2" class="footnote"&gt;&lt;a href="#fnr2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; As a friend pointed out it's easy to write a fast Hello World server so take these results with a healthy does of skepticism&lt;/p&gt;&lt;p id="fn3" class="footnote"&gt;&lt;a href="#fnr3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; It's early days for &lt;span class="caps"&gt;OWIN&lt;/span&gt; but still worth mentioning.&lt;/p&gt;</content></entry><entry><title>Further Adventures in Unit Testing Technologies</title><updated>Mon May 16 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/05/16/further-adventures-in-unit-testing-technologies/"></link><id>urn:yobriefca-se:feed:post:Further Adventures in Unit Testing Technologies</id><content type="html">
&lt;p&gt;This post is a follow up to &lt;a href="/blog/2011/04/04/a-tale-of-unit-testing-technologies/"&gt;A Tale of Unit Testing Technologies&lt;/a&gt;.  Information about the project repository can be found on my &lt;a href="http://github.com/kouphax/unit-testing"&gt;project page&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I've finally managed to slog through the long and slightly tedious process of re-writing the same suite of tests in a number of C# and JavaScript unit testing technologies - the results of which can be seen on the &lt;a href="http://github.com/kouphax/unit-testing"&gt;project GitHub page&lt;/a&gt;.  My conclusion, especially in the .&lt;span class="caps"&gt;NET&lt;/span&gt; world, is that it doesn't really matter that much.  I know it's not that much of a brilliant ending but what did you expect?  Fireworks?&lt;/p&gt;&lt;p&gt;Anyways before I start amazing you all with more awe inspiring revelations let me run through the remaining technologies (until such times as more are added at least) and summarise their good and bad points.  The other technologies I brought on board include,&lt;/p&gt;&lt;ul&gt;	&lt;li&gt;&lt;a href="http://www.nunit.org/"&gt;NUnit&lt;/a&gt;&lt;/li&gt;	&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/ms182486.aspx"&gt;MSTest&lt;/a&gt;&lt;/li&gt;	&lt;li&gt;&lt;a href="http://nspec.org/"&gt;NSpec&lt;/a&gt;&lt;/li&gt;	&lt;li&gt;&lt;a href="https://github.com/robconery/Quixote"&gt;Quixote&lt;/a&gt;&lt;/li&gt;	&lt;li&gt;&lt;a href="http://pivotal.github.com/jasmine/"&gt;Jasmine&lt;/a&gt;&lt;/li&gt;	&lt;li&gt;&lt;a href="http://docs.jquery.com/Qunit"&gt;QUnit&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Some obvious ones there just to round out the comparisons and a few JavaScript based ones.&lt;/p&gt;&lt;h2&gt;&lt;a href="http://www.nunit.org/"&gt;NUnit&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Good old &lt;a href="http://www.nunit.org/"&gt;NUnit&lt;/a&gt;.  Whats not to love?  Mark a class as a fixture and mark your methods as a test.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="na"&gt;[TestFixture]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TagTest&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;    [Test]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;TagNameNormalisationTest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"My Tag Name"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AreEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NormalisedName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"mytagname"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No point in mentioning too much about NUnit as most people will know the ins and outs of it already.  It has VS integration (via &lt;a href="http://testdriven.net/"&gt;TestDriven&lt;/a&gt;) and a nice NUnit runner capable of watching changes to DLL's and automatically rerunning the test contained within.  One caveat around that is often NUnit hangs on to the &lt;span class="caps"&gt;DLL&lt;/span&gt; reference and requires a restart so Visual Studio can rebuild the &lt;span class="caps"&gt;DLL&lt;/span&gt; which kind of misses the point - but it doesn't happen too often.&lt;/p&gt;&lt;p&gt;The framework itself would lend itself to a bit of betterification through sugar such as &lt;a href="http://should.codeplex.com/"&gt;Should and Should.Fluent&lt;/a&gt; but it does what it says on the tin.&lt;/p&gt;&lt;h2&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/ms182486.aspx"&gt;MSTest&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Another staple for many people.  I'd never really used it too much prior to doing this post because of the general negative opinion of it.  I must admit I kind of agree with some of these things.  It's pretty much the MS equivalent of NUnit (in terms of features and look and feel)&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="na"&gt;[TestClass]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TagTest&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;    [TestMethod]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;TagNameNormalisationTest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"My Tag Name"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AreEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NormalisedName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"mytagname"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So why do so many people prefer NUnit over MSTest?  Well I think the main problem is that it is &lt;a href="http://www.richard-banks.org/2010/03/mstest-sucks-for-unit-tests.html"&gt;quite slow&lt;/a&gt; in comparison (from Visual Studio at least) but my main gripe is the amount of &lt;a href="http://en.wiktionary.org/wiki/flob"&gt;flob&lt;/a&gt; it generates for each test run and configuration.  It even produces solution folders for holding test runs and other files. If I want you to create those I'll ask you - don't force it on me.  It also has a very limited set of Assertion methods much like NUnit.&lt;/p&gt;&lt;p&gt;Enough moaning - surely it must have some benefits?  Well yes it does of course.  The main benefit &lt;span class="caps"&gt;IMHO&lt;/span&gt; is that it has very nice integration into Visual Studio which offers some very clean feedback.  This is something that requires &lt;a href="http://testdriven.net/"&gt;TestDriven&lt;/a&gt; for NUNit and the other frameworks which may or may not be free depending on your situation.&lt;/p&gt;&lt;h2&gt;&lt;a href="http://nspec.org/"&gt;NSpec&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Not to be confused with the &lt;a href="http://nspec.tigris.org/"&gt;first hit on Google&lt;/a&gt; which seems to be pretty much a dead project &lt;a href="http://nspec.org"&gt;NSpec&lt;/a&gt; (.org) is an attempt to bring &lt;a href="http://rspec.info"&gt;RSpec&lt;/a&gt; into the .&lt;span class="caps"&gt;NET&lt;/span&gt; world.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;describe_Tag&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nspec&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;when_setting_the_tag_name_to_My_Tag_Name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_tag&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Tag&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"My Tag Name"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"should normalise the tag name to mytagname"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; 
            &lt;span class="n"&gt;_tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NormalisedName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;should_be&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mytagname"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Tag&lt;/span&gt; &lt;span class="n"&gt;_tag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is somewhat similar to &lt;a href="https://github.com/machine/machine.specifications"&gt;MSpec&lt;/a&gt; I mentioned in the last post.  My bugbear with MSpec however was that it didn't feel natural to me.  The equivalent MSpec test for the above looks like this,&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="na"&gt;[Subject("Normalise Tag Name")]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;when_a_tag_is_created&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Tag&lt;/span&gt; &lt;span class="n"&gt;_tag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;Establish&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;_tag&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;Because&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;_tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"New Test Tag"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;should_have_a_normalised_name_of_newtesttag&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;_tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NormalisedName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ShouldEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"newtesttag"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Maybe it's just me but it doesn't read as well as the NSpec version.  I even found it easier to write the NSpec version - more natural.&lt;/p&gt;&lt;p&gt;NSpec also has a lot of extra goodies.  Currently there is no integration into Visual Studio yet but the runner is simple to enough to spin up from the NuGet Package Manager Console and it has an added bonus of a file watcher.  &lt;a href="http://nspec.org/continuoustesting"&gt;SpecWatchr&lt;/a&gt; is similar to NUnit it can watch for changes and automatically run the specs.  It differs from NUnit in that it watches changes to the code files rather than the &lt;span class="caps"&gt;DLL&lt;/span&gt; - so need to wait for builds to happen etc.  Nice.&lt;/p&gt;&lt;p&gt;One minor gripe with it (bar the lack of VS support - even TestDriven support would be good) is the &lt;code&gt;should&lt;/code&gt; syntax. I prefer the Should.Fluent style syntax &lt;code&gt;Should.Be()&lt;/code&gt; rather than the current &lt;code&gt;should_be&lt;/code&gt; syntax.  It's not Ruby and we should accept that :-P.&lt;/p&gt;&lt;p&gt;It's still quite early for NSpec and hopefully it keeps it's momentum as it would be one of my frameworks of choice.&lt;/p&gt;&lt;h2&gt;&lt;a href="https://github.com/robconery/Quixote"&gt;Quixote&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Quixote by Rob Conery follows on from his current slew of ultra lightweight solutions to common problems (like &lt;a href="https://github.com/robconery/Massive"&gt;Massive&lt;/a&gt; and &lt;a href="https://github.com/robconery/Sugar"&gt;Sugar&lt;/a&gt;).  Quixote blends the &lt;span class="caps"&gt;HTML&lt;/span&gt; reporting directly with the framework and you write tests right in a Razor file.  This is the definition of lightweight.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;@using Quixote;
@using CodeSlice.UnitTesting.Model;

&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;'@Url.Content("~/Styles/quixote.css")'&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

@TheFollowing.Describes("Tags")
    @They.Should("Normalise the Tag Name", () =&amp;gt; {
        return new Tag { Name = "Test Name" }.NormalisedName.ShouldEqual("testname");
    })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The obvious problem with this is that you don't get continuous integration or build support.  There is no need to rebuild anything just refresh your page and the tests re-run.  Still CI/Build integration would be nice for a framework.&lt;/p&gt;&lt;h2&gt;&lt;a href="http://pivotal.github.com/jasmine/"&gt;Jasmine&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Ah Jasmine.  Jasmine is what I wanted out of a JavaScript testing framework.  Rather than going the JSpec route of creating a preprocessed &lt;acronym title="Domain Specific Language"&gt;&lt;span class="caps"&gt;DSL&lt;/span&gt;&lt;/acronym&gt; Jasmine makes use of JavaScripts dynamic nature and "functions as 1st class citizens" feature to create framework that behaves like RSpec but embraces JavaScript.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Tag'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;beforeEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"should normalise a tag name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A Tag Name'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNormalisedName&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'atagname'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Out of the box you get an extensible framework (custom matchers etc), mocking and asynchronous support.  Ajax faking isn't directly available but I recommend using &lt;a href="http://sinonjs.org"&gt;Sinon&lt;/a&gt; for this as it has an amazing FakeServer object that is fully configurable.&lt;/p&gt;&lt;p&gt;Another big advantage of Jasmine is it's build integration.  Be it node.js, Java or Ruby you can integrate Jasmine specs into your build process.  .&lt;span class="caps"&gt;NET&lt;/span&gt; integration isn't available yet but &lt;a href="http://jurassic.codeplex.com"&gt;Jurassic&lt;/a&gt; would be a suitable host if anyone wants to make it happen (hint, hint :-P).&lt;/p&gt;&lt;h2&gt;&lt;a href="http://docs.jquery.com/Qunit"&gt;QUnit&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;And finally QUnit.  QUnit is the NUnit/JUnit equivalent for the JavaScript world.  Well known and mature project with some very nice &lt;span class="caps"&gt;HTML&lt;/span&gt; output.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Tag Model Validation'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Tag name normalisation'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'A Tag Name'&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="nx"&gt;normalisedName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNormalisedName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'atagname'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;normalisedName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Not much else to say on this one right now.... must be running out of steam.&lt;/p&gt;&lt;h2&gt;Summing Up&lt;/h2&gt;&lt;p&gt;And there you have it.  The first real post since the move and it's a bit of a waffly long one.  Anyways what would be my recommendations?  Well for .&lt;span class="caps"&gt;NET&lt;/span&gt; I'm torn.  Currently I'd say NUnit with Should.Fluent extensions.  This is a nice combo for creating simple tests that people can execute from within Visual Studio.  However NSpec has potential - I'd like to see it grow a bit more and I'll keep watching it.  Visual Studio integration would be aces though.  JavaScript on the other hand I have a clear cut winner.  Jasmine is awesome.  It's boosted my code quality and productivity no end on recent projects and with the help of &lt;a href="http://sinonjs.org"&gt;Sinon&lt;/a&gt; for mocking and controlling Ajax it'll be a long time before I am this happy with a .&lt;span class="caps"&gt;NET&lt;/span&gt; equivalent tech.  Fingers crossed for NSpec on that front.&lt;/p&gt;</content></entry><entry><title>Providing a Foundation for .NET Projects using NuGet</title><updated>Thu May 05 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/05/05/providing-a-foundation-for-net-projects-using-nuget/"></link><id>urn:yobriefca-se:feed:post:Providing a Foundation for .NET Projects using NuGet</id><content type="html">&lt;p&gt;&lt;/p&gt;&lt;p&gt;It's always good to have a foundation, right?  I mean if you have a heap of projects going on or you work for a company that has a load of active or future projects then why not have a foundation?  Foundations are good.  I mean they promote DRY cross projects, reduce development time for many common tasks (logging, data access, etc.).  Foundations can also provide a number of tools and technologies that are “approved” — that is they have been throughly researched and you aren't going to trip up over license issues, inexperience of the tech or shortcomings of the tech/tools.&lt;/p&gt;&lt;p&gt;The problem with foundations is that people start assuming they are some sort of magical framework that is supposed to do all the work.  You wrong son!  A foundation works best when it's a pile of techs/lightweight solutions to common problems.  They don't work too well when you just get a big monolithic DLL that acts as an abstraction for other technologies.  Abstractions are good for certain things but not everything.  A big dll is also harder to document.  How do you know whats in it bar using Intellisense or reflector?  OK OK OK there should also be some sort of associated documentation that comes with it but keeping these two things inline is extra work.  Extra work that doesn't get done — it's not funded work so why bother? Eh?&lt;/p&gt;&lt;p&gt;In our company we use this approach and it works from a technology perspective but from a people perspective it could be better.  There is a general lack awareness of what is contained within the magical 3 dlls that get generated and as such less stuff get pushed into the foundation as it probably could.  The current process works like so,&lt;/p&gt;&lt;p class="img-holder"&gt;&lt;img src="http://farm3.static.flickr.com/2076/5719795098_ee9676646b_b.jpg" /&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Create a new Subversion repository for the project&lt;/li&gt;&lt;li&gt;Branch the current Foundation (a Visual Studio Solution) repository for the current project&lt;/li&gt;&lt;li&gt;Tweak the build step of the Foundation solution to dump it's dlls into the lib folder of the project&lt;/li&gt;&lt;li&gt;Commit foundation changes to the project foundation branch&lt;/li&gt;&lt;li&gt;Review and selectively merge changes into the trunk of the Foundation repository&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Even writing the steps out and thinking about all the undocumented steps required to get this to work smoothly tells me that it is possibly more complicated than it has to be.  In fact the merging back into the Foundation trunk doesn't happen as much as it should.  In fact projects adding thing to their own branch of the foundation rarely happens cause it's a bit messy.&lt;/p&gt;&lt;p&gt;Another issue with this approach is that it only makes sense for bespoke code.  I mean if you are building out a dll how do you tell people that “actually JSON.NET is our preferred JSON Serialiser”.  It's not easy as the documenting and announcing of such things is in another document out in the ether.&lt;/p&gt;&lt;h2&gt;An Alternative Approach&lt;/h2&gt;&lt;p&gt;Modular.  It's the future I tell thee!  Discrete pieces of functionality that can run independently.  This enables project to take the parts of the foundation they want and build a framework from it.  Much like ender (&lt;a href="http://ender.no.de/"&gt;&lt;/a&gt;&lt;a href="http://ender.no.de/"&gt;http://ender.no.de/&lt;/a&gt;) is doing in the JavaScript world currently being able to take micro-libraries and build a macro-framework that suits your needs and just that.  No risk of featureitis, evolve your framework as you need and be in complete control doing it.&lt;/p&gt;&lt;p class="img-holder"&gt;&lt;img src="http://farm4.static.flickr.com/3045/5719234363_1b5f04b781_z.jpg" /&gt;&lt;/p&gt;&lt;p&gt;Thats the plan but how do we achieve it?  HINT: The answer, a partial one anyway, is in the title of this post.  Well, first things first we would need to take our current foundation and modularise it.  Along with that we'd probably need to ensure tests etc. are up to scratch (start on the right foot).  Secondly we would need to change the delivery mechanism - no more branching and merging of codebases - too heavyweight.  NuGet (&lt;a href="http://nuget.codeplex.com"&gt;nuget.codeplex.com&lt;/a&gt;) will help.  With NuGet we could create packages from our modules, manage dependencies, document usage right in the package manifest, and expose these packages as a server and searchable package repository (a la &lt;a href="http://www.nuget.org"&gt;nuget.org&lt;/a&gt;).  Into this repository we could push all our approved technologies (researched and vetted previously) as well as new versions of our bespoke code.  As time goes on this repository can grow and more people can add to it.  Heck we can even make the submission process as easy as we see on nuget.org.  Wunderbar!&lt;/p&gt;&lt;p&gt;So how would this affect how projects operate on a daily basis?&lt;/p&gt;&lt;p class="img-holder"&gt;&lt;img src="http://farm4.static.flickr.com/3532/5719234439_0171705928_z.jpg" /&gt;&lt;/p&gt;&lt;p&gt;Well the mechanism for the typical usage is greatly simplified.  The project pushes and pulls packages from a central package repo.  People use the repo to search for things they need (JSON Serialiser, Micro-ORM etc) and if they don't find something they can then push a new package into the repo (or just suggest one).  Self documenting use of 3rd party techs, all available all searchable.&lt;/p&gt;&lt;p&gt;Another advantage of this approach, and using NuGet in particular, allows us to bundle not just dlls but also transform files for configuration (web.xml etc.), javascript/css/other client side assets, project and solution wide tools (executable that can be run from the VS command prompt etc.) and even code samples and templates.  This gives us a richer, more cohesive delivery mechanism for a foundation to a project.&lt;/p&gt;&lt;p&gt;Of course it's not all perfect.  Urgent changes to bespoke code will need to be done the old fashioned way and pushed to the main server which is less than ideal but it's a bit of an edge case.&lt;/p&gt;&lt;p&gt;So whats not to like about this idea?  Foundations not frameworks is the key here.  Let the project create its own framework as that will work much better than imposing one upon them.&lt;/p&gt;&lt;p&gt;So this is a bit of a brain dump (some would say brain fart no doubt) as usual and I am open to suggestions and corrections.  I've likely missed a few glaring problems with the new approach so let the critics loose and I'll try my best to address their concerns.&lt;/p&gt;&lt;p&gt;Next step - setting up a simple POC to test the general workflow.&lt;/p&gt;</content></entry><entry><title>Flashbag: Glimpse</title><updated>Wed Apr 20 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/04/20/flashbag-glimpse/"></link><id>urn:yobriefca-se:feed:post:Flashbag: Glimpse</id><content type="html">&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/22708858?portrait=0" frameborder="0" height="400" width="100%"&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;p&gt;Glimpse is an extensible client side debugging dev tool for server side stuff in any ASP.NET (WebForms) and ASP.NET MVC (RoR and PHP forthcoming). Think Firebug for your server and you have the gist of it.  This presentation is a very brief introduction/overview/review.&lt;/p&gt;&lt;p&gt;Also the quality totally blows I promise it'll be better next time.&lt;/p&gt;&lt;p&gt;&lt;span style="color: #888888;"&gt;&lt;em&gt;&lt;strong&gt;Flashbag (fuh-lash-bah-ag)&lt;/strong&gt;: A flashbag is a group of people who assemble suddenly in a meeting room type place, partake in a brief technical discussion (or demonstration), then disperse, often for the purposes of education and betterization&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;</content></entry><entry><title>A Tale of Unit Testing Technologies</title><updated>Sun Apr 03 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/04/03/a-tale-of-unit-testing-technologies/"></link><id>urn:yobriefca-se:feed:post:A Tale of Unit Testing Technologies</id><content type="html">
&lt;p&gt;I've had a big bad dirty secret for a while now.  One I've kept hidden from my friend and colleagues for years.  But now its time to come clean...... here goes..... hold onto your pants.&lt;/p&gt;&lt;blockquote&gt;&amp;lt;pause for dramatic effect&amp;gt;&lt;br /&gt;I hardly ever write unit tests!&lt;br /&gt;&amp;lt;gasps&amp;gt;&lt;/blockquote&gt;&lt;p&gt;I've come clean and it feels good.  Another reason why it feels good is that it is slowly but surely becoming a falsehood.  I've had my eyes opened recently to the art of BDD and discovered that I've simply been doing it wrong - I was so busy writing code first and then tests to fit my, possibly incorrect, assumptions that tests failed to hold any worthwhile value — time wasted in my mind.  Also when writing said tests I was too worried on the internal mechanics of the "unit" being tested and not about its intended behaviour — essentially missing the point and time wasted once more.  Being a man that has no time for, well, time wasting I feel I have come full circle on why I didn't test.  In the past at least....&lt;/p&gt;&lt;p&gt;But I digress.... Where was I?  Ah yes I've had my eyes opened - I've been doing it right.  Yep I've gone all TDD/BDD - write a failing test, write some code to make it work, make the test fail again and so on and so forth.  Its been a good experience.  I finally see the benefit in it.  Yes, it takes slightly longer and it's hard to break old habits but the amount of times I've been tripped up by assumptions and edge cases that would only normally be found during system testing after a frustrating debugging session with plenty of hair pulling and swearing.&lt;/p&gt;&lt;p&gt;Since the whole behaviour driven enlightenment I've been trying to find a suitable set of technologies that allow me to perfect my new found approach and turn me into a fast and effective code cutting machine.  NUnit is fine — it does the job but it's a task in itself to express what you want out of a test which slows things down.  No if you're going to do it right you want the best tools.  So I have decided to jump in head first and discover what testing tools are the most effective.  I've been through a few already , including,&lt;/p&gt;&lt;ul&gt;&lt;li&gt;SpecFlow (C#)&lt;/li&gt;&lt;li&gt;MSpec (Machine.Specifications) (C#) &lt;/li&gt;&lt;li&gt;JSpec  (JavaScript)&lt;/li&gt;&lt;li&gt;Should/Should.Fluent (C#)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Here are a few of my thoughts so far. &lt;/p&gt;&lt;h2&gt;SpecFlow (&lt;a href="http://www.specflow.org/"&gt;http://www.specflow.org/&lt;/a&gt;)&lt;/h2&gt;&lt;p&gt;SpecFlow is essentially the .NET equivalent of Cucumber (from the Ruby world).  Offering natural language syntax for defining scenarios that make up the behaviour of a feature.  Its better as an example,&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;Feature:&lt;/span&gt;&lt;span class="nf"&gt; Tags&lt;/span&gt;

&lt;span class="k"&gt;Scenario:&lt;/span&gt;&lt;span class="nf"&gt; Normalise Tag Name&lt;/span&gt;
&lt;span class="k"&gt;	Given &lt;/span&gt;&lt;span class="nf"&gt;I have created a new tag&lt;/span&gt;
&lt;span class="nf"&gt;	&lt;/span&gt;&lt;span class="k"&gt;When &lt;/span&gt;&lt;span class="nf"&gt;I set its name to "&lt;/span&gt;&lt;span class="s"&gt;New Test Tag&lt;/span&gt;&lt;span class="nf"&gt;"&lt;/span&gt;
&lt;span class="nf"&gt;	&lt;/span&gt;&lt;span class="k"&gt;Then &lt;/span&gt;&lt;span class="nf"&gt;it should have a normalised name of "&lt;/span&gt;&lt;span class="s"&gt;newtesttag&lt;/span&gt;&lt;span class="nf"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;So you see the test here is written in pretty much straight english.  It's easy to understand and this means even domain experts (aka "the business folk") can help write them.  So how does this end up being turned into executable tests.  Well, initially you need to do a bit of wiring up using Step Definitions.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="na"&gt;[Binding]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TagSteps&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt; &lt;span class="n"&gt;_tag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="na"&gt;    [Given(@"I have created a new tag")]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;GivenIHaveCreatedANewTag&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_tag&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;    
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;    [When(@"I set its name to ""(.*)""")]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;WhenISetItsNameToNewTestTag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;    [Then(@"it should have a normalised name of ""(.*)""")]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ThenItShouldHaveANormalisedNameOfNewtestag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;normalisedname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NormalisedName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normalisedname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see we can match up each line of the feature file with an appropriate executable action.  We even have the power of regular expressions at our disposal - allowing us to reuse steps and build up a decent library that comes with us across projects.  Some very very powerful stuff here — we can get everyone involved in writing these things,&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Developers and business users during design&lt;/li&gt;&lt;li&gt;Developers during development&lt;/li&gt;&lt;li&gt;Testers during system test — in fact why not write a feature as the "Steps to reproduce"?  Win, win!&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The thing is...... well.... Technically speaking SpecFlow isn't really aimed at the fine grained, unit test level of testing.  It's more about the higher level integration testing.  I mean it's useable but it does become a bit awkward to express things in a reusable manner.  The problem with that is things start feeling quite heavy weight and you need to do a lot of extra work to get them to fit.  No I think, while SpecFlow is great for many things (automated testing, integration testing, system testing etc.) it's not the best fit for what I am looking for in this article - unit testing tools.&lt;/p&gt;&lt;h2&gt;MSpec (&lt;a href="https://github.com/machine/machine.specifications"&gt;https://github.com/machine/machine.specifications&lt;/a&gt;)&lt;/h2&gt;&lt;p&gt;Machine.Specifications (MSpec for short) is a Context/Specification framework geared towards 	removing language noise and simplifying tests. &lt;/p&gt;&lt;p&gt;Thats the official intention and I must admit I was initially taken by it.  Rather than having a single huge class filled with methods representing tests MSpec takes the approach that a single class represents a single scenario and uses lambda expressions to offer the BDD style syntax (Because/It/Subject etc.).  So lets take the Tag scenario described above and convert it to MSpec format,&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="na"&gt;[Subject("Normalise Tag Name")]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;when_a_tag_is_created&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Tag&lt;/span&gt; &lt;span class="n"&gt;_tag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;Establish&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;_tag&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;Because&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;_tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"New Test Tag"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;should_have_a_normalised_name_of_newtesttag&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;_tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NormalisedName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ShouldEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"newtesttag"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It's quite simple and it really forces you to ensure your tests are as simple as possible.  To be honest having used it on a project I'm not 100% sold.  I think its down to my personal coding style.  I honestly think while it reduces line count it doesn't necessarily reduce language noise.  Also having used on a project I found it quite awkward to write — the style is different to what I am used to and I guess with training that would change.  As I say this is a personal opinion and I am happy to be shown a better approach.&lt;/p&gt;&lt;h2&gt;JSpec (&lt;a href="http://visionmedia.github.com/jspec/"&gt;http://visionmedia.github.com/jspec/&lt;/a&gt;)&lt;/h2&gt;&lt;p&gt;JSpec is a clever little JavaScript testing framework.  I's no longer supported by it's creators (booooo!) but honestly its stable enough to use anyway.  JSpec takes the RSpec DSL (a decent subset at least) and is capable of converting it to JavaScript for execution in the browser.  It's got a heap of stuff in it,&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Mock Ajax&lt;/li&gt;&lt;li&gt;Stubbing&lt;/li&gt;&lt;li&gt;Fake timers&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Lets take a look at a simple example,&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;"Utils.Arrays.compare method"&lt;/span&gt;    
    &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;"should compare and sort 2 numeric arrays successfully"&lt;/span&gt;
        &lt;span class="nx"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="nx"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                
        &lt;span class="nx"&gt;Utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Arrays&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;        
    &lt;span class="nx"&gt;end&lt;/span&gt;            
    
    &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;"should compare 2 numeric arrays unsuccesfully when not sorted"&lt;/span&gt;
        &lt;span class="nx"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="nx"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                
        &lt;span class="nx"&gt;Utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Arrays&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;        
        &lt;span class="nx"&gt;Utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Arrays&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;        
    &lt;span class="nx"&gt;end&lt;/span&gt;        
&lt;span class="nx"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;People who have used RSpec before will feel right at home.  People who haven't should be able to understand exactly what is going on.  Pretty - right?  I thought so.  For the people who think — "ugh we don't need another dialect/language" - wise up!  Out of all the testing techs I've used recently this one has been the most successful and the output it generates is nice and clean.&lt;/p&gt;&lt;h2&gt;Should/Should.Fluent (&lt;a href="http://should.codeplex.com/"&gt;http://should.codeplex.com/&lt;/a&gt;)&lt;/h2&gt;&lt;p&gt;This little gem isn't a framework in itself and can be used with any framework you care to use.  Should provides a more expressive way of stating assertions in your code by making the code closer to natural language using extensions methods and nicer method names.  Example I hear you say?  Why certainly sirs and madams,&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Should_fluent_assertions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Null&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OfType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Null&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SameAs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OfType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"x"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"y"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"z"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"z"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SameAs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"x"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="s"&gt;"This String"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Contain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="s"&gt;"This String"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="s"&gt;"This String"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Contain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"foobar"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Contain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Contain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I stole this one from the Should Codeplex site (linked above) and it makes use of the fluent syntax (optional).  OK technically it doesn't do much but it really helps when trying to express assertions in your tests.  Highly recommend this one.&lt;/p&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Thats the first lot of technologies covered but there are still plenty out there.  I think my next port of call is to actually spin up IronRuby and get RSpec involved.  After all it is the marker by which I am comparing these things so why did I not jump on it first of all?  Perhaps I like to build up suspense :-P&lt;/p&gt;&lt;p&gt;Also worth pointing out is that I haven't touched upon technologies for mocking and stubbing - that is for another time.&lt;/p&gt;&lt;p&gt;As always heap criticism my way and I'll happily fight my corner and stubbornly refuse to back down :-P (second smilie within a few paragraphs time to end this post).&lt;/p&gt;&lt;p&gt;UPDATE:  I've pushed some of my code to GitHub and intend to expand on this using the various other technologies.  The repository can be found on my &lt;a href="https://github.com/kouphax/unit-testing"&gt;repo on GitHub&lt;/a&gt;&lt;/p&gt;</content></entry><entry><title>Serialising .NET Resources to JSON for Web Apps</title><updated>Mon Mar 28 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/03/28/serialising-net-resources-to-json-for-web-apps/"></link><id>urn:yobriefca-se:feed:post:Serialising .NET Resources to JSON for Web Apps</id><content type="html">
&lt;p&gt;Pop quiz hotshot - you are building one of them massive single page web apps  using something like Sencha where the vast majority of work is pushed into the  JavaScript realm and some crazy nut wants everything localised or at least  all text strings push to RESX files.  What do you do?  WHAT DO YOU DO?&lt;/p&gt;&lt;h2&gt;Option 1&lt;/h2&gt;&lt;p&gt;Well the most obvious option, and IMHO the most horrible, would be to convert  all those JavaScript files into aspx's or cshtml's or whatever and embed the  resource references directly into the files.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%@ Import Namespace="Some.Resources" %&amp;gt;

var myWidget = new Widget({
    title:       '&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Strings.DefaultWidgetTitle%&amp;gt;',
    description: '&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Strings.DefaultWidgetDescription%&amp;gt;'
});

myWidget.show(document.body);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is far from nice.  For one it kind of makes any static compression of  the files either impossible or at best annoyingly fiddly.  It also prevents any  sort of quick client side caching unless you use some sort of VaryByCulture  Output Caching strategy on the server side.  Blegh.&lt;/p&gt;&lt;h2&gt;Option 2&lt;/h2&gt;&lt;p&gt;The next option, and certainly much better would be to pull out the direct  &amp;lt;%= %&amp;gt; references and store them in another smaller file and reference  them through a global JS object&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%-- DECALRED WITHIN THE MAIN HTML PAGE --%&amp;gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Strings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;DefaultWidgetTitle&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="s1"&gt;'&amp;lt;%=Strings.DefaultWidgetTitle%&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;DefaultWidgetDescription&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;%=Strings.DefaultWidgetDescription%&amp;gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myWidget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Widget&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="nx"&gt;Strings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DefaultWidgetTitle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Strings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DefaultWidgetDescription&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;myWidget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is nicer because it means you can compress and cache the JavaScript file  globally without having to worry about different cultures etc.  It does leave  one annoyance though.  The Strings object above it essentially boiler plate.   The names are a 1:1 mapping of the resource file so we have introduced a layer  of abstraction we have to write manually leaving us open to make some mistakes.   Slightly less blegh, but still blegh.&lt;/p&gt;&lt;h2&gt;Option 3&lt;/h2&gt;&lt;p&gt;The solution I like the best is to provide a mechanism for serialising the  Resource file into the equivalent JSON object.  You get all the benefits of  option 2 while not having to worry about having to write the mapping file.  So  lets keep the JS file from the second option and change the ASPX file&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%-- DECALRED WITHIN THE MAIN HTML PAGE --%&amp;gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Strings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="nx"&gt;ResourceSerialiser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ToJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Strings&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now lets look at the magic behind this option - the JSON Serialiser&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;/// Utility class that allows serialisation of .NET resource files (.resx) &lt;/span&gt;
&lt;span class="c1"&gt;/// into different formats&lt;/span&gt;
&lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ResourceSerialiser&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cp"&gt;#region JSON Serialisation&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Converts a resrouce type into an equivalent JSON object using the &lt;/span&gt;
    &lt;span class="c1"&gt;/// current Culture&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;param name="resource"&amp;gt;The resoruce type to serialise&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;A JSON string representation of the resource&amp;lt;/returns&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;ToJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;CultureInfo&lt;/span&gt; &lt;span class="n"&gt;culture&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CultureInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CurrentCulture&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;ToJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;culture&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Converts a resrouce type into an equivalent JSON object using the &lt;/span&gt;
    &lt;span class="c1"&gt;/// culture derived from the language code passed in&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;param name="resource"&amp;gt;The resoruce type to serialise&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;param name="languageCode"&amp;gt;The language code to derive the culture&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;A JSON string representation of the resource&amp;lt;/returns&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;ToJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;languageCode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;CultureInfo&lt;/span&gt; &lt;span class="n"&gt;culture&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CultureInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetCultureInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;languageCode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;ToJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;culture&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Converts a resrouce type into an equivalent JSON object&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;param name="resource"&amp;gt;The resoruce type to serialise&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;param name="culture"&amp;gt;The culture to retrieve&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;A JSON string representation of the resource&amp;lt;/returns&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;ToJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CultureInfo&lt;/span&gt; &lt;span class="n"&gt;culture&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ResourceToDictionary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;culture&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;JsonConvert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SerializeObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="cp"&gt;#endregion&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Converts a resrouce type into a dictionary type while localising &lt;/span&gt;
    &lt;span class="c1"&gt;/// the strings using the passed in culture&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;param name="resource"&amp;gt;The resoruce type to serialise&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;param name="culture"&amp;gt;The culture to retrieve&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;A dictionary representation of the resource&amp;lt;/returns&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ResourceToDictionary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CultureInfo&lt;/span&gt; &lt;span class="n"&gt;culture&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ResourceManager&lt;/span&gt; &lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResourceManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;PropertyInfo&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;pis&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetProperties&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BindingFlags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Public&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;BindingFlags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Static&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;KeyValuePair&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pis&lt;/span&gt;
            &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PropertyType&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;KeyValuePair&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
                &lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;rm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;culture&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToDictionary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;Simple enough little class that is configurable by Culture etc. so you can  pull different translation out on demand if needs be.  Obviously it doesn't do  anything around caching - SRP and all that stuff you know :-P&lt;/p&gt;&lt;p&gt;Yeah so I've used this on 2 projects already with great success so hopefully  someone else finds it useful.&lt;/p&gt;</content></entry><entry><title>Mobile Redirection for Web Applications in ASP.NET MVC</title><updated>Thu Feb 24 00:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/02/24/mobile-redirection-for-web-applications-in-asp-dot-net-mvc/"></link><id>urn:yobriefca-se:feed:post:Mobile Redirection for Web Applications in ASP.NET MVC</id><content type="html">
&lt;p&gt;&lt;span style=""&gt; &lt;/span&gt;Mobile redirection is simple stuff but what happens when you need to deep link into the mobile application?&lt;/p&gt;&lt;p&gt;On a recent project we needed to produce mobile (iPad specifically)  equivalent.  The desktop app itself was developed using ExtJS (3.3.1) and had  three primary entry points,&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Logon Screen&lt;/li&gt;&lt;li&gt;Home Screen&lt;/li&gt;&lt;li&gt;Product Screen (New/View/Edit)&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Due to the way the project was implemented these became as 3 distinct  pages/controllers/actions.  Users could receive emails with links to a  particular product and they would go directly to that view (with a login  redirect if not previously authenticated).  The mobile solution, however,  written using Sencha Touch (consistent development experience, native-esque UI  with little effort) is a single page application.  This presents a problem when  the user is on a compatible mobile device and they receive a link to a  particular placement - how do we push that sort of deep linking into a single  page app.  Well on the client side frameworks such as Backbone.js, jQuery Mobile  and Sencha Touch [anyone got more please?] all offer history support using hash  navigation.  That's the client side sorted but how do we translate, say,  /Product/Show/12345 into /Mobile#placement/12345?&lt;/p&gt;&lt;h2&gt;MobileRedirectAttribute&lt;/h2&gt;&lt;p&gt;Firstly I created an extension of the AuthorizationAttribute that will act as  an interim redirection and request parser between the mobile and desktop  solutions.  Here's the code (usage follows),&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;/// Redirects to the mobile view if on a supported device&lt;/span&gt;
&lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, Inherited = true, AllowMultiple = false)]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MobileRedirectAttribute&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;AuthorizeAttribute&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;_clientFragment&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Default Constructor&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MobileRedirectAttribute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_clientFragment&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Constructor that takes an argument&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;param name="clientUrl"&amp;gt;The url fragment we should append to the url&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MobileRedirectAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;clientFragment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_clientFragment&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clientFragment&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Tests if this request originates from a supported mobile device &lt;/span&gt;
    &lt;span class="c1"&gt;/// and redirects as appropriate&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;param name="ctx"&amp;gt;The action execution context&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnAuthorization&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AuthorizationContext&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HttpContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsMobileDevice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// parse the fragment with request parameters&lt;/span&gt;
            &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;fragment&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParseClientFragment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="c1"&gt;// construct the redirect url&lt;/span&gt;
            &lt;span class="n"&gt;UrlHelper&lt;/span&gt; &lt;span class="n"&gt;urlHelper&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;UrlHelper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{0}#{1}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;urlHelper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Index"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Mobile"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="c1"&gt;// return redirect result to prevent action execution&lt;/span&gt;
            &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;RedirectResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;            
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Parses the client fragment and replaces :[token] with the request parameter&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;param name="ctx"&amp;gt;The controller context&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;The parsed fragment&amp;lt;/returns&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;ParseClientFragment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ControllerContext&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;parsedFragment&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_clientFragment&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsNullOrEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parsedFragment&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;NameValueCollection&lt;/span&gt; &lt;span class="n"&gt;@params&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HttpContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;MatchCollection&lt;/span&gt; &lt;span class="n"&gt;matches&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_clientFragment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;":[a-zA-Z]+"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;RouteData&lt;/span&gt; &lt;span class="n"&gt;routeData&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RouteTable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetRouteData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HttpContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="c1"&gt;// check each token and replace with param or route values&lt;/span&gt;
            &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Match&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TrimStart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;':'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;@params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

                &lt;span class="c1"&gt;// if we haven;t got a parameter here we must check the route values&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsNullOrEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;routeData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContainsKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;routeData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="c1"&gt;// perform the replace&lt;/span&gt;
                &lt;span class="n"&gt;parsedFragment&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parsedFragment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;parsedFragment&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;h2&gt;Usage&lt;/h2&gt;&lt;p&gt;So for our 3 entry points into our application we attribute the controller  actions with the MobileRedirectAttribute and give it a client fragment.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;    [MobileRedirect("[product/:id")]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nullable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// perform action&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HomeController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;    [MobileRedirect("home")]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;View&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AuthenticationController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;    [MobileRedirect("home")]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Login&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The client fragment is capable of translating tokens embedded within it ( as  :&amp;lt;token_name&amp;gt;) and replacing the token with a matching route value or  request parameter.  The ProductController Index action is a good example of  this.  A request to /Product/Index/12345 on a mobile device would translate  to /Mobile/#product/12345&lt;/p&gt;&lt;h2&gt;How It Works&lt;/h2&gt;&lt;p&gt;Pretty simple really.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The attribute checks if the device is a compatible/mobile device.&lt;/li&gt;&lt;li&gt;If it is the retrieves the client fragment and extracts the tokens -  :&amp;lt;token_name&amp;gt;&lt;/li&gt;&lt;li&gt;It attempts to match the token names against request parameters first&lt;/li&gt;&lt;li&gt;If there is no parameter it then looks into the route values (eg. :id in the  above url isn;t a parameter but rather a route value)&lt;/li&gt;&lt;li&gt;It replaces the token with the real value&lt;/li&gt;&lt;li&gt;It performs a redirect to /Mobile#&amp;lt;client_fragment&amp;gt; which cancels the  execution of the action.&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Other Points&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;It's probably not the most robust solution in that more complex scenarios  may not work as expected but it's a decent base that can be extended. &lt;/li&gt;&lt;li&gt;I have hardcoded the mobile route as it fitted my needs so I think that  should be externalised as well.&lt;/li&gt;&lt;li&gt;The determination of whether a device is a compatible device is facilitated  through Browser.IsMobileDevice.  This is for demonstration purposes only.  In  the project we use a different solution but it is a bit more long winded to  explain here.&lt;/li&gt;&lt;li&gt;The "redirect to logon" handling is performed within the app itself so that  is why the Logon view's fragment is simply "home".&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 style="font-size: 1.5em;"&gt;Demo&lt;/h2&gt;&lt;p&gt;I've pushed a very quick and dirty demo of this onto GitHub for anyone interested - &lt;a href="https://github.com/kouphax/mobileredirect-mvc/"&gt;https://github.com/kouphax/mobileredirect-mvc/&lt;/a&gt; .  It uses a really quick UserAgent.Contains("iPad") check for "mobile" detection so use and iPad or set your User Agent to try it out.&lt;/p&gt;&lt;ul&gt;&lt;/ul&gt;&lt;p&gt;Any use to anyone out there?  Any problems with it?  Let me know.&lt;/p&gt;</content></entry><entry><title>Entity Framework: Code First - Head First</title><updated>Fri Feb 11 00:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/02/11/entity-framework-code-first-head-first/"></link><id>urn:yobriefca-se:feed:post:Entity Framework: Code First - Head First</id><content type="html">
&lt;p&gt;I find the data access layer on most projects to be either overly complex or  fiddly with lots of XML mapping files that are difficult to debug so anything  that could make this layer more developer friendly I'm all for it.  Though I  also want to point out that I understand why the DAL is often complex - there is  a lot to consider and so I want to also understand if these "friendlier"  technologies can handle that sort of complexity or if they simply make the happy  path easier but making the more complex scenarios more difficult or even  impossible (which is obviously a blocker).&lt;/p&gt;&lt;p&gt;So I've been tinkering with this new Entity Framework CTP5 release and the  "Code First" features recently.  This comes after some time-out from EF due to  some really bad experiences with EF1. I was promised that there has been  significant changes/improvements since I last dabbled and it really seems there  have been.  So I wanted to put it to the test and as one of my co-workers wanted  an "Ideas" app I thought it would be a fun [may not be anyone's definition of  fun but my own] to throw an MVC app together using EF "Code First" to model my  domain entities.  To make it all even more simple I went ahead and used SQL  Server CE 4 for persistence.  So what did the solution need to do?  The basic  requirements were,&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Use Windows Authentication for users &lt;/li&gt;&lt;li&gt;Allow users to submit an idea (Title, Description) &lt;/li&gt;&lt;li&gt;Allow users to tag an idea with a variable number of tags &lt;/li&gt;&lt;li&gt;Allow users to vote up or vote down ideas (but not their own) &lt;/li&gt;&lt;li&gt;Allow users to comment on ideas &lt;/li&gt;&lt;li&gt;Allow users to filter ideas by tags &lt;/li&gt;&lt;li&gt;Allow users to sort ideas by newest ideas or by most popular. &lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Nothing too extreme involved - not unless you turn the whole thing into a  computer game style EXTREME speed run competition - man vs. machine - the  ULTIMATE [typing] battle.... with bathroom and snack breaks!  Just to make it even  more INSANE I documented my steps and created a graphical timeline of the  session in a PRETTY timeline. &lt;/p&gt;&lt;p class="img-holder"&gt;&lt;img src="http://farm3.static.flickr.com/2244/5720966217_edd48fc966_o.png" width="500" /&gt;&lt;/p&gt;&lt;p&gt;Ammmm don't mean to be rude but your jaw.... we'll it's on the floor.  Can you  pick it up please?  17:21 to 20:38 minus about an hour and a bit for bathroom,  snack and chat breaks - zero to datafied in less than 3 hours!  Few points to  note,&lt;/p&gt;&lt;ul&gt;&lt;li&gt;This experiment focused on the data model, EF CTP5 and the database. &lt;/li&gt;&lt;li&gt;There is a working UI (MVC3) it's just not exactly pretty &lt;/li&gt;&lt;li&gt;I had no EF "Code First" experience before hand &lt;/li&gt;&lt;li&gt;I could be doing a few things incorrectly &lt;/li&gt;&lt;li&gt;It'll probably take me longer to write this post than it did the app. &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;So lets look at what I produced.  The source is &lt;a href="https://github.com/kouphax/ideas/"&gt;available on Github&lt;/a&gt;* for  your fiddling pleasure.&lt;/p&gt;&lt;p&gt;I am not going to dive into the whole MVC part of it as the source is  available but I may touch on some of the interface points such as controllers  and binders.&lt;/p&gt;&lt;h2&gt;The Domain Models&lt;/h2&gt;&lt;p&gt;Lets take a high level look at our domain models.&lt;/p&gt;&lt;p class="img-holder"&gt;&lt;img src="http://farm4.static.flickr.com/3554/5721525430_5e527060d2_o.png" width="650" /&gt;&lt;/p&gt;&lt;h3&gt;DomainEntity&lt;/h3&gt;&lt;p&gt;The abstract domain entity is used to prevent me having to repeat common  auditing and database related stuff across all my entities.  It is not mandatory  or derived from anything related to Entity Framework - all these classes are  simple POCO's.  DomainEntity sets up the entities primary key using the Key  attribute and also gold 2 audit related properties CreatedBy and  CreatedDate.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;/// Base class for domain entities responsible for holding auditing and &lt;/span&gt;
&lt;span class="c1"&gt;/// persistence related properties&lt;/span&gt;
&lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DomainEntity&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;    [Key]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;    [Required]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;CreatedBy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;    [Required]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;CreatedDate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Idea&lt;/h3&gt;&lt;p&gt;Idea is our principle class in our domain.  As you can see there are various  associations set up between the other classes.  2 1-* mappings between Comment  and Vote and a *-* mapping between itself and tag (a tag can exist for any  number of ideas and an idea can have many tags).  It also holds a number of  methods related to business logic - specifically calculating Votes, number of  Comments etc.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;/// Main domain object in the idea solution.  Represents an idea&lt;/span&gt;
&lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Idea&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DomainEntity&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;    [Required]&lt;/span&gt;
&lt;span class="na"&gt;    [MaxLength(255)]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;    [Required]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Description&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;    [DefaultValue(false)]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;IsRejected&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cp"&gt;#region Associations&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;ICollection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Comments&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;ICollection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Tags&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;ICollection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Vote&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Votes&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="cp"&gt;#endregion&lt;/span&gt;

    &lt;span class="cp"&gt;#region Business Logic&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Score&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Votes&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Votes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;VoteCount&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Votes&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Votes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;CommentCount&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Comments&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Comments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="cp"&gt;#endregion&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Tag&lt;/h3&gt;&lt;p&gt;Tag is pretty simple.  The only interesting thing about it is the use of  NormalisedName - essentially the name field lowercased and whitespace removed.   This is used when attempting to fetch potentially existing tags from the  database.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;/// Represents a tag in the idea solutuion&lt;/span&gt;
&lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Tag&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DomainEntity&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="na"&gt;        &lt;/span&gt;
&lt;span class="na"&gt;    [Required]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;get&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;set&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;_name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;NormalisedName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToLower&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;    [Required]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;NormalisedName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cp"&gt;#region Associations&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;ICollection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Idea&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Ideas&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="cp"&gt;#endregion&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;h3&gt;Vote&lt;/h3&gt;&lt;p&gt;Rather than just store a calculated value against an idea the Vote object  represents a rich representation of a Vote (either up or down, whom by and  when).  This allows us to provide extra validation when we need it.  For example  people not allowed to vote on their own idea or vote on an idea in any  particular direction more than once.  Having this rich association makes these  things much easier and we aren't forced to create custom objects to track this  sort of thing.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;/// Represents a single vote for an idea&lt;/span&gt;
&lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Vote&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DomainEntity&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;    [Required]&lt;/span&gt;
&lt;span class="na"&gt;    [Range(-1,1)]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cp"&gt;#region Associations&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;Idea&lt;/span&gt; &lt;span class="n"&gt;Idea&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="cp"&gt;#endregion&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Comment&lt;/h3&gt;&lt;p&gt;Nothing special here. &lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;/// Represents an ideas comment&lt;/span&gt;
&lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Comment&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DomainEntity&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Gets or sets the comments content&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;    [Required]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cp"&gt;#region Associations&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Gets or sets the link to the parent idea&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;Idea&lt;/span&gt; &lt;span class="n"&gt;Idea&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="cp"&gt;#endregion&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;The Database Context&lt;/h2&gt;&lt;p&gt;This is where all the EF magic happens.  We use this class to provide an  entry point into our database.  It's possible to configure entities here in  terms of mapping and associations as well as providing a means to seed the  database with initial data but I didn't need any of that.  No I just defined my  sets and added a method for filtering/sorting ideas based on criteria.  Simple  stuff yet again.  It just extends the DbContext class from Entity Framework.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;/// Data Repository for the ideas solution&lt;/span&gt;
&lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IdeaRepository&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DbContext&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cp"&gt;#region Db Sets&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;DbSet&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Comments&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;DbSet&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Idea&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Ideas&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;DbSet&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Tags&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;DbSet&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Vote&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Votes&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="cp"&gt;#endregion&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Main entry point for querying the ideas dat&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;param name="filters"&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Idea&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;QueryIdeas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IdeaFilter&lt;/span&gt; &lt;span class="n"&gt;filters&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;IQueryable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Idea&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ideas&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Ideas&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;IdeaFilter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OrderBy&lt;/span&gt; &lt;span class="n"&gt;orderBy&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IdeaFilter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OrderBy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MostVotes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsNullOrWhiteSpace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;ideas&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ideas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NormalisedName&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;orderBy&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetValueOrDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IdeaFilter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OrderBy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MostVotes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orderBy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;IdeaFilter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OrderBy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MostVotes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;ideas&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ideas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OrderByDescending&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Votes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;IdeaFilter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OrderBy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Newest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;ideas&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ideas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OrderByDescending&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreatedDate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ideas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;            
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Tag Model Binder&lt;/h2&gt;&lt;p&gt;This was an interesting thing I discovered.  If you are using a *-*  relationship and are associating one side with an object that already exists you  are required to fetch this object before using it.  For example when adding a  tag to an idea I need to attempt fetch that tag first of it exists.  What I  can't do is create a new tag object and assign an existing Id to it - this will  be thrown away and saved as a new instance.  To fix this problem I feel back  onto a Tag Model binder that attempts to fetch or create tags depending on their  normalised name.  It won't save new tag - simply create them (this is why I use  a shared DbContext between the controller and the binder).  The binder takes a  CSV styled string, breaks it apart, "normalises" the string and tries to fetch  tags based on their normalised name.  If it finds one it pushes it into the  collection otherwise it creates a new tag object and pushes that in instead.   Probably a better way to do that and I am open to suggestions.  But what I don't  want is saving tags that are then going to become orphaned if the other save  didn't go through for some reason.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;/// Converts a string of tags (comma seperated) into a list of tags - &lt;/span&gt;
&lt;span class="c1"&gt;/// creating new ones where necessary and fecthing exisitng ones&lt;/span&gt;
&lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TagCollectionModelBinder&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DefaultModelBinder&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="nf"&gt;BindModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ControllerContext&lt;/span&gt; &lt;span class="n"&gt;controllerContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ModelBindingContext&lt;/span&gt; &lt;span class="n"&gt;bindingContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;            
        &lt;span class="n"&gt;HttpContextBase&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;controllerContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HttpContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Identity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bindingContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelName&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IdeaRepository&lt;/span&gt; &lt;span class="n"&gt;_db&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BaseIdeaController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsNullOrWhiteSpace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;clientTags&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;','&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;clientTag&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;clientTags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;normalised&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clientTag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToLower&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FirstOrDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NormalisedName&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;normalised&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;CreatedBy&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;CreatedDate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clientTag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Trim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;};&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Other Things&lt;/h2&gt;&lt;p&gt;Not very much else worth mentioning right now as I more or less used the MVC  scaffolding to build the views (with some minor tweaking).  Validation on the UI  is pushed from the domain object making things a lot more streamlined.  The  controllers are still very light and could be made lighter by pushing stuff into  the IdeaRepository as well but that's for another day.&lt;/p&gt;&lt;p&gt;So there you go.  A very quick and dirty intro into the world of Entity  Framework.  There isn't anything complex going on here and I was worried that EF  would mask a lot of stuff that we would need access to but it seems there is  plenty of configuration points to hook into.  It has come on leaps and bounds  since I last dipped my toes into EF and hopefully they keep up the same  momentum.  There is still a lot of due diligence required before I'd recommend  EF over any other data access layer that we are currently using but I am  certainly keen to dig deeper and push it to it's limits.&lt;/p&gt;&lt;p&gt;Once again the source for the solution is &lt;a href="https://github.com/kouphax/ideas/"&gt;available on Github&lt;/a&gt;*.  Phew..... &lt;/p&gt;&lt;p&gt;&lt;em&gt;* Expect bugs.&lt;/em&gt;&lt;/p&gt;</content></entry><entry><title>MvcConf2: Post Conference Rubdown</title><updated>Wed Feb 09 00:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/02/09/mvcconf2-post-conference-rubdown/"></link><id>urn:yobriefca-se:feed:post:MvcConf2: Post Conference Rubdown</id><content type="html">&lt;p&gt;&lt;/p&gt;&lt;p&gt;So MvcConf has been and gone.  Lots of interesting talks though sadly I hit a ton of technical issues with laggy video and eventually total audio/video loss.  To my ISP – shame on you!  Luckily I did get to see most of the things I wanted (or at least hear).  Here's the final outlay of talk I attended (green for attended, yellow for not attended),&lt;/p&gt;&lt;p class="img-holder"&gt;&lt;img src="http://farm4.static.flickr.com/3660/5720976997_50da11c786_o.png" style="width:100%;" /&gt;&lt;/p&gt;&lt;p&gt;I kind of wanted to attend,&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Talks that I already had some experience in to see if my thoughts where aligned with others, and, &lt;/li&gt;&lt;li&gt;Talks that I had not experience in but had an interest in. &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Problem was that in some of these talks I felt a bit out of my depth which wasn't helped by the fact my video was busy drawing part of slides 4 and 5 when the presenter was already on slide 7 :(.  Other times I felt I had already dived deeper than the talk was covering.  I guess it happens!  Anyway enough complaining lets see what we covered,&lt;/p&gt;&lt;h2&gt;Real World Application Development with Mvc3 NHibernate, FluentNHibernate and Castle Windsor&lt;/h2&gt;&lt;p&gt;Presenter: Chris Canal&lt;/p&gt;&lt;p&gt;I went into this talk wanting to get a quick glance at NHibernate specifically.  I've had no exposure to any of these technologies (bar MVC3 of course) and I think I suffered because of it.  It was very Castle Windsor focused and I think I would have been better jumping into a pure NHibernate talk if there was one.  That said I really should have a look at Castle Windsor.&lt;/p&gt;&lt;h2&gt;BDD in ASP.NET MVC using SpecFlow, WatiN and WatiN Test Helpers&lt;/h2&gt;&lt;p&gt;Presenter: Brandon Satrom&lt;/p&gt;&lt;p&gt;I recently attended a talk on using Cucumber to provide Automated UI testing on our projects (held internally in our company) so I wanted to see what SpecFlow brought to the table over running Ruby and Cucumber.  I was very impressed with what I seen.  Nice explanation of the theory behind BDD.  I like the whole “Working Software” vs “Working Software &lt;strong&gt;That Matters&lt;/strong&gt;” comparison.&lt;/p&gt;&lt;p&gt;In terms of SpecFlow itself I like the tighter integration into .NET, the ability to debug your steps is very nice and might help increase acceptance in a team when compared to introducing Ruby.  I can see the arguments for using Ruby – Cucumber is a more mature, Ruby is faster to setup and tear down, using the right tool for the right job etc. but I can also see the arguments against.  At least both farmeworks use the Gherkin language so writing the scenarios is done in the same way.  This is something I have to mull over a bit more.&lt;/p&gt;&lt;h2&gt;Quality Driven Web Acceptance Testing&lt;/h2&gt;&lt;p&gt;Presenter: Amir Barylko&lt;/p&gt;&lt;p&gt;I had a few audio and video problems during this presentation.  It touched on some theory behind Acceptance testing, Green Field vs Brown Field and things like that then dropped into using Cucumber for some acceptance testing.  Having just attended the same type of talk a few days previous there wasn't anything new here, and given the bad connection I skipped the rest of the talk.&lt;/p&gt;&lt;h2&gt;Keynote&lt;/h2&gt;&lt;p&gt;Presenter: Scott Guthrie&lt;/p&gt;&lt;p&gt;The Gu talking about stuff – nuff said.  Nice to see him describing how cross pollination of the three platforms (WebMatrix, WebForms, MVC) works (Razor from WM, Routing from MVC etc.).  Also nice to hear that we can expect an MVC release on a near annual basis with plenty of preview releases inbetween!&lt;/p&gt;&lt;h2&gt;CQRS and Event Sourcing with MVC 3&lt;/h2&gt;&lt;p&gt;Presenter: Ashic Mahtab&lt;/p&gt;&lt;p&gt;Wow – CQRS is something I'd heard of previously and it's a pretty big buzz word in the Silverlight world at the minute so I wanted to check it out.  My head was thoroughly melted after this one.  Quite fast paced and I could have benefited from getting some prior reading in and around the CQRS concept.  Will revisit this once the video and slides are available.&lt;/p&gt;&lt;p&gt;One unexpected thing I got out of this talk was &lt;a href="https://github.com/machine/machine.specifications"&gt;MSpec&lt;/a&gt;.  I always wondered how things like cucumber and spec flow handled lower level unit testing and it seems they aren't really suited to that sort of thing.  &lt;a href="https://github.com/machine/machine.specifications"&gt;MSpec&lt;/a&gt;, as I have discovered, is essentially a unit level focused BDD framework.  Going to check this out very soon.&lt;/p&gt;&lt;h2&gt;Deploy ASP.NET MVC with No Effort&lt;/h2&gt;&lt;p&gt;Presenter: Troels Thomsen&lt;/p&gt;&lt;p&gt;Honorable mention here as my connection was flat out dying on this room.  I couldn;t make out video or audio very well.  I did spend a few hours a few days ago looking at &lt;a href="https://appharbor.com/"&gt;appharbor&lt;/a&gt; and it looks like, as the name says, “Azure done right”.  Love the use of git as a deployment framework, love the minimal interface, love the pricing model, just love the whole thing – so I'm sorry I had to miss the presentation.  Another one to check out later.&lt;/p&gt;&lt;h2&gt;Entity Framework "Code First": Domain Driven CRUD&lt;/h2&gt;&lt;p&gt;Presenter: Chris Zavaleta&lt;/p&gt;&lt;p&gt;Having been playing with EF CTP5 recently I wanted this one to see if there was anything worth expanding on.  Turns out there is some nice stuff I didn't see during my tinkering.  Especially around the use of Configuration Categories to break apart the OnModelCreating configuration and the Seeding stuff to populate the DB with data.  Again my audio was dropping off constantly and my video was struggling so I had to drop out early on this one and throw in the towel.&lt;/p&gt;&lt;h2&gt;Summing Up&lt;/h2&gt;&lt;p&gt;All in all a decent conference I could have done with reading up on some of the subjects before hand.  I will be visiting many of talks again when they come online to get a better picture (pun intended) of the topics.  Big thanks to all involved.&lt;/p&gt;</content></entry><entry><title>.NET Web Technology Stack in 2011 and Beyond....</title><updated>Mon Jan 24 00:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/01/24/dot-net-web-technology-stack-in-2011-and-beyond-dot-dot-dot/"></link><id>urn:yobriefca-se:feed:post:.NET Web Technology Stack in 2011 and Beyond....</id><content type="html">&lt;p&gt;&lt;/p&gt;&lt;p&gt;Change, or lack thereof is often an indication of how successful your technology stack is.  If you are constantly swapping out core technologies then chances are you'll need to rethink your approach.  If, on the other your stack remains fairly stable save a few new additions or tweaks then odds are you made the right choices at the start. &lt;/p&gt;&lt;p&gt;Last year, after careful consideration, I published an internal post that detailed my recommendations for the standard Microsoft Web Technology stack.  Looking back on this I feel happy enough that my choices have proven themselves.  But time goes on and technologies change so perhaps it's time for another look at the stack.  Perhaps give it a bit of a refresh after all there has been a number of great developments in the .NET world.  Do I need to refresh it?  No not really – I could quite easily stick with my previous stack and truth be told the changes are fairly minimal – mostly version bumps.  But I also want to look to the future, is there anything worth keeping an eye on (there is BTW), is there anything we should be avoiding (probably) etc.&lt;/p&gt;&lt;h2&gt;Recap&lt;/h2&gt;&lt;p&gt;Lets take a very quick run through of the recommended stack from last year.&lt;/p&gt;&lt;p class="img-holder"&gt;&lt;img src="http://farm3.static.flickr.com/2145/5720987951_2b7e6ccbd2_o.png" /&gt;&lt;/p&gt;&lt;p&gt;The choice of client side technology really depended on the project requirements.  Essentially I suggested most projects use jQuery and some jQueryUI stuff.  If the UI required a higher degree of complexity/richness I recommended moving towards Sencha and Silverlight with Silverlight being the preferred option unless there was some project requirement that blocked the use of browser plugins.  That's the general gist anyway – I can elaborate if anyone wants to hear more.&lt;/p&gt;&lt;h2&gt;Refresh&lt;/h2&gt;&lt;p&gt;So I'm recommending a few minor tweaks in an attempt to keep the stack up to date.  After all .NET4 and Visual Studio 2010 have dropped since I last made my recommendations.  Here goes&lt;/p&gt;&lt;p class="img-holder"&gt;&lt;img src="http://farm3.static.flickr.com/2312/5721546972_c2cfd6bf2a_o.png" /&gt;&lt;/p&gt;&lt;p&gt;Not exactly a major overhaul and it shouldn't be.  The stack is simple enough to handle many types of project and has been fairly successful since it was put forward.  So I wanted to keep moving in that direction while bumping the versions up to the latest and greatest.  So lets attempt to justify some of these changes.&lt;/p&gt;&lt;h3&gt;MVC3&lt;/h3&gt;&lt;p&gt;Look at the past posts on this blog and you will see I've spent a lot of time with MVC and, more recently MVC3 (Beta – RC – RTM).  This blog doesn't cover half the MVC hacking I do on a daily basis.  So MVC3 is just released and that might make some people nervous about using it as the primary basis for a web stack. I'm not - it's a quality release both in terms of features and stability.  MVC3, for the most part, should be considered more as a refinement of MVC2 with a nice new shiny ViewEngine slapped on top.  There really isn't much there that couldn't be done in MVC2 with a bit of custom code.  But that's good it kind of hints that they were on the right path to begin with.  But the enhancements it does offer make development a much cleaner experience.  I already have a heap of blogs on the subject so if you want to know more about my views on MVC3 have a look at these,&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://yobriefcase.posterous.com/aspnet-mvc-3-preview-1-first-look"&gt;ASP.NET MVC3 Preview 1 First Look&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="http://yobriefcase.posterous.com/aspnet-mvc3s-jsonvalueproviderfactory" title="http://yobriefcase.posterous.com/aspnet-mvc3s-jsonvalueproviderfactory"&gt;ASP.NET MVC3 JsonValueProvider&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="http://yobriefcase.posterous.com/remote-validation-in-aspnet-mvc-3-rc1"&gt;Remote Validation in ASP.NET MVC3 RC1&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="http://yobriefcase.posterous.com/unobtrusive-javascript-in-mvc3" title="http://yobriefcase.posterous.com/unobtrusive-javascript-in-mvc3"&gt;Unobtrusive JavaScript in MVC3&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Razor View Engine&lt;/h3&gt;&lt;p&gt;Razor is Microsoft's internally developed View Engine.  It could be seen as a successor to the old clunky WebForms View Engine.  I am not going to get into the syntax of Razor and how it is much cleaner than the WebForms syntax, no, if you want to digest all that have a look at one of my earlier posts – &lt;a href="http://yobriefcase.posterous.com/the-razor-view-engine"&gt;The Razor View Engine&lt;/a&gt;.  In that post I also discuss the differences between Razor and Spark – my previous View Engine recommendation.  So what has changed?  Why am I recommending Razor over Spark now?  Well as the previous post says it best with these lines,&lt;/p&gt;&lt;blockquote class="posterous_medium_quote"&gt;&lt;p&gt;[Spark is] a great engine but has suffered from a lack of tooling.&lt;/p&gt;&lt;p&gt;Spark, especially in comparison to Razor, has very limited tooling support in VS2010 – sure you have SparkSense but it's currently not a patch on Razor support (which is still in itself RC status) and I can't help but feel they'll always be playing catch-up with in house developed/supported stuff.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;That view hasn't changed.  Razor has a brighter future simply because of the in-house support being offered by Microsoft.  Also there isn't an official release of Spark that works against MVC3 (still built against MVC2 dlls) – it is possible to grab a branch off Github though.  It's a shame though and I wish all the best for Spark in the future – perhaps our paths will cross again?&lt;/p&gt;&lt;p&gt;The last thing I want to mention about view engine choice – or at least ask – is does it matter?  The answer, of course, is not really.  Your views should be very light and not have a lot of serverside logic built into them.  So sticking with one view engine isn't going to ruin anyone's life.&lt;/p&gt;&lt;h3&gt;jQuery/jQueryUI&lt;/h3&gt;&lt;p&gt;OOTB integration with MVC is the most obvious reason for sticking with jQuery here.  Also the fact that it has proven popular in many of our previous projects means it'll be sticking around for some time.  The majority of our companies web projects can be catered for by jQuery (and sometimes including jQueryUI for some richer elements) as a decent base to write custom code.  It may not be necessary in all projects of course and shouldn't be abused but that will depend on the project but I am confident enough to say 95% of our web based projects (not including mobile which I will touch on shortly) will feature jQuery and a few plugins to get the job done.  All we need to do is bump the version up to the latest and we are flying.&lt;/p&gt;&lt;h3&gt;Sencha (version 3)&lt;/h3&gt;&lt;p&gt;OK I am still recommending Sencha/ExtJS for the small niche of projects that need a lot of richness but can't make the move to Silverlight.  As before I am caveating this (or covering my ass).  Sencha is a complex beast it has a steep learning curve and simply hacking away at it in a project is never going to be the best approach.  It's best to avoid it but if jQueryUI doesn't cut it and Silverlight can't be deployed make sure the developers have plenty of time to get up to speed, have a capable mentor and code is checked for any bad smells early and often.  Done right Sencha can produce brilliant results – but getting it right can be tricky.&lt;/p&gt;&lt;h2&gt;Revolution&lt;/h2&gt;&lt;p&gt;As always on the Web front things are changing fast.  There new techs and new versions always round the corner.  Some will be relevant, some just novelty.  Obviously to stay ahead of the game we want to be keeping an eye on the technologies and applying some scientific rigour to determine if these should be brought into the recommended web stack.  Here is a very quick rundown of my “ones to watch in 2011”.&lt;/p&gt;&lt;h3&gt;Knockout.js &amp;amp; Backbone.js&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://knockoutjs.com/"&gt;&lt;/a&gt;&lt;a href="http://knockoutjs.com"&gt;http://knockoutjs.com&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="http://backbonejs.org/"&gt;&lt;/a&gt;&lt;a href="http://backbonejs.org/"&gt;http://backbonejs.org/&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Complex UI require a bit of structure or you'll end up with a lovely pile of spaghetti, the bad kind not the tasty good kind.  jQuery and jQueryUI don't really offer anything in this area – sure you can get a collection of plugins to solve this but the best approach is a single unified lightweight framework that does one thing in a simple and consistent manner.  Both Knockout and Backbone provide this but in via different routes.  Knockout.js offers an MVVM framework similar to Silverlight/WPF data binding while Backbone offers a minimal MVC framework.  It's hard to say at this point which is better – both have their pros and cons but that is for another post.&lt;/p&gt;&lt;h3&gt;jQuery 1.5&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://blog.jquery.com/2011/01/14/jquery-1-5-beta-1-released/"&gt;&lt;/a&gt;&lt;a href="http://blog.jquery.com/2011/01/14/jquery-1-5-beta-1-released/"&gt;http://blog.jquery.com/2011/01/14/jquery-1-5-beta-1-released/&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Looks to be more betterness from the jQuery team (yes i know it's not a real word).  So far there has been a re-architecting of the Ajax component so that you can bind callbacks at anytime (thanks the &lt;a href="http://en.wikipedia.org/wiki/Promise_(programming)"&gt;Promise&lt;/a&gt; pattern).  This pattern is likely to make it into the public API as well so your own can make use of the promise construct.  Another new feature appear to be subclassing of the jQuery object.  Similar to the YUI3 sandboxing approach subclassing allows us to extend our own instance of the jQuery object without polluting the global instance.  These changes combined with a number of bug fixes and performance improvements means jQuery vNext is looking good. &lt;/p&gt;&lt;h3&gt;Ext JS 4&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://www.sencha.com/"&gt;&lt;/a&gt;&lt;a href="http://www.sencha.com"&gt;http://www.sencha.com&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Ext JS 4 promises to be a big improvement over the current versions.  Many things have been simplified and refactored which is good because often in version 3+ you get the feeling that things are perhaps OVER-engineered and needlessly complicated.  Ext 2/3 also feels like it has massive functionality holes – there are nice widgets but the data package and application architecture always felt half baked.  Not with 4 it seems.  The data package is shaping up very nicely and they have their own MVC based classes built right into the framework.  This could make large applications much easier to manage.&lt;/p&gt;&lt;h3&gt;jQuery Mobile &amp;amp; Sencha Touch&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://jquerymobile.com/"&gt;&lt;/a&gt;&lt;a href="http://jquerymobile.com/"&gt;http://jquerymobile.com/&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="http://www.sencha.com/products/touch/"&gt;&lt;/a&gt;&lt;a href="http://www.sencha.com/products/touch/"&gt;http://www.sencha.com/products/touch/&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Mobile is still an immature area among big companies.  Many of them have native apps in various app stores etc. but they still don't really know how best to manage them.  Good web based mobile frameworks appeal to them more as it gives them much greater control over the content – after all they own the hosting servers etc.  jQuery Mobile and Sencha Touch have address different concerns – jQuery Mobile focuses on offering a consistent cross device experience while Sencha Touch aims to provide a native look and feel on WebKit based browsers (iPhone/iPad/Playbook/Android devices).  I expect these frameworks to come into their own this year as they move out of immaturity and more people start experimenting.&lt;/p&gt;&lt;h3&gt;Nuget&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://nuget.codeplex.com/"&gt;&lt;/a&gt;&lt;a href="http://nuget.codeplex.com"&gt;http://nuget.codeplex.com&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A nice little package manager for the .NET world offering public and locally hosted repositories.  What makes it different to other is that a package could be anything – not just DLL.  I like this and one of the reasons why I like it is that I can use it to distribute my JavaScript frameworks without have to maintain a big list of files needed for each one.  I just click jQuery Mobile and it will pull in jQuery and the necessary CSS.  I want Backbone and it will pull down Underscore for me as well.  Same goes for any .NET libraries.  Combine this with the ability to version packages etc. and it will make projects less of a “DLL Hell”.&lt;/p&gt;&lt;h3&gt;WCF HTTP&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://wcf.codeplex.com/wikipage?title=WCF%20HTTP"&gt;&lt;/a&gt;&lt;a href="http://wcf.codeplex.com/wikipage?title=WCF%20HTTP"&gt;http://wcf.codeplex.com/wikipage?title=WCF%20HTTP&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The new WCF HTTP stuff is looking really really nice.  One of the big issues with WCF is all the XML configuration and other blah that goes along with it.  Newer WCF has given us .svc-less services generated from pure code, better configuration control and now some really nice improvements to the WCF communication channel.  You can have custom Media Processors that let you control what is served to the client based on requested content types or actions (JSON, XML, Images – anything you can think of).  The cleaning up of UriTemplates also mean that you can produce a very lightweight RESTful service or MVC like architecture very very easily.&lt;/p&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Another long ramble that's taken me longer than expected to write up!  Obviously there is plenty there to think about and hopefully it will generate some discussion.  Hopefully I get a chance to flesh a lot of this out and offer more low level justification on my tech choices.  2011 is shaping up to be a great year in the tech world.&lt;/p&gt;</content></entry><entry><title>Using CoffeeScript in .NET</title><updated>Mon Jan 17 00:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/01/17/using-coffeescript-in-net/"></link><id>urn:yobriefca-se:feed:post:Using CoffeeScript in .NET</id><content type="html">
&lt;p style="text-align: center;"&gt;&lt;img src="http://posterous.com/getfile/files.posterous.com/temp-2011-01-17/GzcAkdBuuBhqnFqExtbBrpthjHwbqpFyslpzEnJEiIiwqmulsAjFgFAuciHJ/coffeescriptdotnet.png.scaled500.png" alt="" /&gt;&lt;/p&gt;&lt;p&gt;I've been playing with &lt;a href="http://nodejs.org/"&gt;node.js&lt;/a&gt; for a while  now and some of the things coming out of that community are simply amazing.  One  of the interesting techs is &lt;a href="http://coffeescript.org/"&gt;CoffeeScript&lt;/a&gt; which is essentially a  JavaScript dialect that compiles into JavaScript.  It's goal is to simplify the  JavaScript language by removing all those bad parts that can cause a lot of  grief and taking all those common tasks (array manipulation, scoping etc and  making them very very easy to achieve.  I have an old post I have yet to publish  externally on the subject but I will get it out there ASAP.&lt;/p&gt;&lt;p&gt;CoffeeScript comes in 2 variations - a node.js specific version and a  "standalone" version that can be run in browser (pure JavaScript without any of  the node.js assumptions basically).  Considering it's parsing one language into  another it's not recommended to be running the script client side every time so  if you want to use it you want to be doing the parsing server side and possibly  using some sort of caching to prevent redoing the parsing on every request.   This is the bad(ish) news for .NET folks because there really isn't any stable  JavaScript implementations that can run a script as complex a CoffeeScript (this  is essentially a compiler of sorts).  Well at least not until now....  When i  first investigated this I tried using a number of JavaScript engines,&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/fholm/IronJS"&gt;IronJS&lt;/a&gt;: Currently only a  partial implementation and doesn't appear to run the CoffeeScript  compiler fully.&lt;/li&gt;&lt;li&gt;&lt;a href="http://javascriptdotnet.codeplex.com/"&gt;JavaScript.NET&lt;/a&gt;: Worked  for version 0.9 or so of CoffeeScript but there is a bug that causes version 1.0  to fall over and development appears to have ceased.&lt;/li&gt;&lt;li&gt;Command line JScript: Epic fail.  Just wouldn't do what I needed it  to.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Then along came yet another JavaScript engine for .NET so I gave it a shot.   On the surface &lt;a href="http://jurassic.codeplex.com/"&gt;Jurassic&lt;/a&gt; appeared to  offered everything I needed and upon diving a bit deeper I discovered that, yes,  it does indeed offer everything I needed - it runs the CoffeeScript compiler.   Sweet.&lt;/p&gt;&lt;p&gt;So lets write the compiler wrapper.  Pretty basic really,&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;/// Processes CoffeeScript files into javascript&lt;/span&gt;
&lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CoffeeScriptProcessor&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;COMPILE_TASK&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"CoffeeScript.compile(Source, {bare: true})"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="na"&gt;    [ThreadStatic]&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;ScriptEngine&lt;/span&gt; &lt;span class="n"&gt;_engine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;_o&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;ScriptEngine&lt;/span&gt; &lt;span class="n"&gt;Engine&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;get&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_engine&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;_engine&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ScriptEngine&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;_engine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Resources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CoffeeScriptSource&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_engine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Precesses contents as a coffeescript file&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;param name="contents"&amp;gt;The javascript contents&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;lock&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Engine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetGlobalValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Source"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Engine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Evaluate&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;COMPILE_TASK&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;Few points worth noting here,&lt;/p&gt;&lt;ul&gt;&lt;li&gt;I create a ThreadStatic instance of the Jurassic Engine and feed the  CoffeeScript compiler source into it once.  The executions/evaluation of that  script is quite slow so I only wanted to take the hit once.  Jurassic isn't  thread safe so I made the reference ThreadStatic.&lt;/li&gt;&lt;li&gt;Just to be extra safe I am locking during the execution of the compilation  task.&lt;/li&gt;&lt;li&gt;Any errors just return null.  This is a bare bones implementation I have  stripped out custom logging and profiling code and an interface that means  little in this context.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I have created a VS2010 MVC3 solution that makes use of this processor to generate JavaScript from a simple CoffeeScript example.  Have fun.&lt;/p&gt;&lt;p&gt;&lt;a href="https://github.com/kouphax/coffeescript-dotnet"&gt;https://github.com/kouphax/coffeescript-dotnet&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;What's Next?&lt;/h2&gt;&lt;p&gt;This is obviously only the start - if I wanted to use CoffeeScript in a .NET  environment I am going to need to consider how it is used.  When should I be  compiling it?  How should I be caching it etc?  The usual things.  Hopefully  I'll touch on these in a later post.&lt;/p&gt;&lt;p&gt;So right now this is kind of a request for comments, this was knocked up quite quickly and likely I have forgotten something or made a massive mistake.  Anything you want to offer fire away.&lt;/p&gt;</content></entry><entry><title>Better JSON Serialisation for ASP.NET MVC</title><updated>Sat Nov 20 00:00:00 UTC 2010</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2010/11/20/better-json-serialisation-for-asp-dot-net-mvc/"></link><id>urn:yobriefca-se:feed:post:Better JSON Serialisation for ASP.NET MVC</id><content type="html">
&lt;p&gt;&lt;/p&gt;&lt;p&gt;The Json() method of controllers is a nice little convenience method for  serialising server side data into JSON for handy consumption on the client side  but it's not without it's issues.  Firstly it just cant serialise dates in any  nice way due to no hard and fast standard in JSON for dates.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;SomeDate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Simply gets spat back to the front end as a string like so,&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="s2"&gt;"/Date(1290181373164)/"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Not exactly the most useful thing in the world.  You are going to need to make use of JSON's reviver callback to parse this accordingly.&lt;/p&gt;&lt;p&gt;Another issue is lack of configurability.  C# coding standards recommend the  use of PascalCased property names whereas in JavaScript land the standard is  camelCase (and many frameworks assume this casing which can cause issues behind  the scenes *cough*ExtJS*cough*).  You can fix this by adding DataContract and  DataMember attributes to your model object but it gets a bit messy and open to  error if an attribute is left out accidentally.  Or what if you don't have  access to the model code?&lt;/p&gt;&lt;h2&gt;JSON.NET&lt;/h2&gt;&lt;p&gt;&lt;a href="http://json.codeplex.com/"&gt;Json.NET&lt;/a&gt; is my JSON de/serialiser of  choice.  It's fast and widely configurable plus it fixes the problems I've  mentioned above (among many many other things).  Not to mention some BSON  (Binary JSON) support which could come in handy in the future.&lt;/p&gt;&lt;h2&gt;JsonNetResult&lt;/h2&gt;&lt;p&gt;So lets fix things.  Lets wrap Json.NET up in an ActionResult type and offer  a configurable entry point.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt; &lt;/span&gt;
&lt;span class="c1"&gt;/// Simple Json Result that implements the Json.NET serialiser offering more versatile serialisation &lt;/span&gt;
&lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt; &lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JsonNetResult&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;JsonNetResult&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;JsonNetResult&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;responseBody&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="n"&gt;ResponseBody&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;responseBody&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;JsonNetResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;responseBody&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JsonSerializerSettings&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="n"&gt;Settings&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;Gets or sets the serialiser settings&amp;lt;/summary&amp;gt; &lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;JsonSerializerSettings&lt;/span&gt; &lt;span class="n"&gt;Settings&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;Gets or sets the encoding of the response&amp;lt;/summary&amp;gt; &lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Encoding&lt;/span&gt; &lt;span class="n"&gt;ContentEncoding&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;Gets or sets the content type for the response&amp;lt;/summary&amp;gt; &lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;ContentType&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;Gets or sets the body of the response&amp;lt;/summary&amp;gt; &lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;ResponseBody&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;Gets the formatting types depending on whether we are in debug mode&amp;lt;/summary&amp;gt; &lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Formatting&lt;/span&gt; &lt;span class="n"&gt;Formatting&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="k"&gt;get&lt;/span&gt; 
        &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Debugger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAttached&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Formatting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Indented&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Formatting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
        &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt; &lt;/span&gt;
    &lt;span class="c1"&gt;/// Serialises the response and writes it out to the response object &lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt; &lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;param name="context"&amp;gt;The execution context&amp;lt;/param&amp;gt; &lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ExecuteResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ControllerContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ArgumentNullException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"context"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;HttpResponseBase&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HttpContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// set content type &lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsNullOrEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
        &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ContentType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
        &lt;span class="p"&gt;}&lt;/span&gt; 
        &lt;span class="k"&gt;else&lt;/span&gt; 
        &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"application/json"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// set content encoding &lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ContentEncoding&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentEncoding&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ContentEncoding&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ResponseBody&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JsonConvert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SerializeObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ResponseBody&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Formatting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Settings&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;             
        &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see I have exposed the JsonSerializerSettings object allow  developers to tune the serialisation all they want.  We can also make things  even simpler by providing a Controller extension method that we can call without  having to create the object directly,&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ControllerExtensions&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;JsonNetResult&lt;/span&gt; &lt;span class="nf"&gt;JsonEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;Controller&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;responseBody&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;JsonNetResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responseBody&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;JsonNetResult&lt;/span&gt; &lt;span class="nf"&gt;JsonEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;Controller&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;responseBody&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JsonSerializerSettings&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;JsonNetResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responseBody&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Simple stuff but still pretty powerful, lets see it in action.&lt;/p&gt;&lt;h2&gt;The Date Problem&lt;/h2&gt;&lt;p&gt;We can fix the date problem in a number of ways via converters.  Converters  give us a custom way to convert values of objects and Json.NET provides a number  of converters out of the box - IsoDateTimeConverter, JavaScriptDateTimeConverter  and an abstract base DateTimeConverter to roll your own.  Lets use the  JavaScriptDateTimeConverter for this example,&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;SomeDate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JsonEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JsonSerializerSettings&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Converters&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;JsonConverter&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;JavaScriptDateTimeConverter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The resultant JSON object will generate a JSON object with a JavaScript Date  constructor&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While not strictly valid JSON native JSON parsers and JSON2 handle it  fine.&lt;/p&gt;&lt;h2&gt;The Casing Issue&lt;/h2&gt;&lt;p&gt;We can use Json.NET's contract resolver to automagically convert PascalCased  property names of C# to camelCased property names of JavaScript.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="n"&gt;SomeProperty&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt; 

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JsonEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JsonSerializerSettings&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="n"&gt;ContractResolver&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CamelCasePropertyNamesContractResolver&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;Which gives us a response like so,&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;someProperty&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;my&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fixed.&lt;/p&gt;&lt;h2&gt;Wrap Up&lt;/h2&gt;&lt;p&gt;So we have managed to create a much more powerful JSON serialisation  technique without having to sacrifice too much of the convenience of the Json()  method in the controller.  Anyone got any recommendations/enhancements they are  willing to share?  &lt;/p&gt;</content></entry><entry><title>The Razor View Engine</title><updated>Thu Nov 18 00:00:00 UTC 2010</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2010/11/18/the-razor-view-engine/"></link><id>urn:yobriefca-se:feed:post:The Razor View Engine</id><content type="html">
&lt;p&gt;&lt;em&gt;Sorry for the poor syntax highlighting on the source code... not much support for Razor ATM&lt;/em&gt;&lt;/p&gt;&lt;p&gt;I've been holding off trying to form an opinion on this until we got the full  package so to speak.  With MVC 3 RC1 being released last week I guess it's time  to share my thoughts on the &lt;a href="http://blog.robertgreyling.com/2010/07/is-razor-just-wolf-in-sparks-clothing.html"&gt;mildly  contentious&lt;/a&gt; view engine.  First things first though - lets be extremely  superficial and compare a a bit of code.  Specifically lets look a using a loop  to output a list of "really useful" list items.  In the older WebForms view  engine you'd do something like this.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% foreach (int index in Enumerable.Range(1, 10))
        { %&amp;gt;        
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Entry &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=index%&amp;gt;&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;        
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%}%&amp;gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;Even for a very trivial example it does look a bit messy - lots of redundant  start and end markers etc.  Lets look at the equivalent in Razor,&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;    
    @foreach (int index in Enumerable.Range(1, 10))    
    {        
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Entry @index&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;        
    }
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now excuse me while I go off on a tiny bit of a tangent.  There are two  things you probably notice about the equivalent Razor syntax,&lt;/p&gt;&lt;ol&gt;&lt;li&gt;It's much cleaner because of some very clever parsing &lt;/li&gt;&lt;li&gt;It's still embedding code in a view.  THE HORROR!!!! &lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Yeah I know in this day and age when everyone is trying to eradicate every  suggestion of server code in a view Microsoft have went right ahead and actually  enabled you to do it in neat/cleaner manner.  It works though - doesn't it?  I  mean why abstract C# when your view is going to get compiled into C#?  Why try  and mimic HTML/XML when technically speaking your custom markup is pretty much  meaningless?  What's wrong with being able to see when server side syntax  finishes and front end syntax takes over?  It makes a lot of sense to me  actually.&lt;/p&gt;&lt;h2&gt;The Truth Will Out&lt;/h2&gt;&lt;p&gt;I've been holding off judgement on Razor for a while until it was more  "complete".  Truth be told for a long time I could have easily summed it up  as&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="color: #000000;"&gt;It's the WebForms View Engine with the &amp;lt;% %&amp;gt;  replaced with @&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;In some ways thats true but at an extremely basic level.  I misjudged it.  I  was wrong.  I actually kind of like it now.&lt;/p&gt;&lt;h2&gt;But what about Spark?&lt;/h2&gt;&lt;p&gt;I've been an advocate of the &lt;a&gt;Spark View  Engine&lt;/a&gt; for sometime in my company and I've used it on a few projects very  successfully.  It's a great engine but has suffered from a lack of tooling -  there are plenty of developers that simply reject or get a negative impression  of something because of the lack of tooling for the tech.  Spark, especially in  comparison to Razor, has very limited tooling support in VS2010 - sure you have  SparkSense but it's currently not a patch on Razor support (which is still in  itself RC status) and I can't help but feel they'll always be playing catch-up  with in house developed/supported stuff.  Would I have like to see Spark being  adopted by MS rather than them rolling their own view engine?  Perhaps, but  variety is the spice of life and I'm happy to have Razor around.&lt;/p&gt;&lt;p&gt;So what will I use on future projects?  I'm tending towards Razor for now but  perhaps that's because it's new and I'm a technology magpie.  Also it easier to  justify the use of a technology to a customer when they are provided pre-bundled  and supported by such a large entity.&lt;/p&gt;&lt;p&gt;&amp;lt;/opinion piece&amp;gt;&lt;/p&gt;&lt;h2&gt;Back On Track&lt;/h2&gt;&lt;p&gt;Now I've had my little digression lets look at some of the features of  Razor.&lt;/p&gt;&lt;h3&gt;Syntax&lt;/h3&gt;&lt;p&gt;As I showed above the syntax is much more terse.  The parser is clever enough  to detect when you mean server code and when you mean client code.  This reduces  the need to use a lot of bulky delimiters like &amp;lt;% and %&amp;gt;.  Also the parser  is able to determine if the @ you just wrote is a server side delimiter or just  plain text - most of the time.  Alternatively you can fall back on the @@ syntax  to use a literal @. &lt;/p&gt;&lt;p&gt;The parser does choke sometimes when you don't wrap text in an appropriate  element or tag&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;@if (true) 
{
    this is a test
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;fails whereas&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;@if (true)  
{ 
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;this is a test&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is fine.  If you really insist on not using an HTML element you can fall back  on one of two things.  Using a &amp;lt;text&amp;gt; element that is a Razor tag for  marking an area for processing as plain text or a slightly shorter single line  equivalent of @:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;@if (true) 
{
    &lt;span class="nt"&gt;&amp;lt;text&amp;gt;&lt;/span&gt;this is a test&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
}

@if (true) 
{
    @:this is a test
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Layouts and Sections&lt;/h3&gt;&lt;p&gt;Razor (obviously) has support for master pages and rending content sections  including optional sections.  Syntax for it is pretty simple, lets start with  our master page _Layout.cshtml&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;@View.Title&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"menu"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            @RenderSection("menu", required: true);
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            @RenderBody()
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"footer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            @RenderSection("footer", required: false);
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Couple of features worth mentioning,&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Use of RenderSection() to render named sections from the view, also able to  specify if the section is a required or optional section throught the use of the required argument (i.e. if it needs to or  doesn't need to be included in the view during render - if required is true and the section is missing you'll get a runtime error when you attempt to access the page).  Another option for  optional sections is to use the IsSectionDefined method e.g. &lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"footer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    @if (IsSectionDefined("footer"))
    {
        RenderSection("footer");
    }
    else
    {
        @:Default Footer Text
     }
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;This way we can, as demonstrated, provide some sort of default as well.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;RenderBody convenience method.  This is used to render the body of the  view.  Unlike WebForms view engine Razor doesn't require you to wrap the main  body in a content area - similar to Spark. &lt;/li&gt;&lt;/ol&gt;&lt;p&gt;So an appropriate view that this master layout can "consume" could look like  this&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;@{    
    Layout = "~/Views/Shared/_Layout.cshtml";
}

&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Super Useful Page&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;It really is super useful&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt; 

@section menu {
&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Login&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Register&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice I have left out the footer but that's not an issue as it has been  marked as optional.  Also notice that the body is at the root level of the view  and sections are wrapped in a section marker.  This all adds a more minimal look  and feel to the whole view.&lt;/p&gt;&lt;h3&gt;_ViewStart.cshtml&lt;/h3&gt;&lt;p&gt;Another leaf from the Spark world (and probably many other - sorry to  everyone else that supports/implements this sort of feature) is the ability to  provide a global place to put code that applies to every view.  Using the  _ViewStart.cshtml file we could easily just put the Layout declaration from the  view code above into a single global location.  We can also add helpers and  functions there too which I'll talk about now.&lt;/p&gt;&lt;h2&gt;Helpers&lt;/h2&gt;&lt;p&gt;Helpers enable use to provide context aware reusable HTML "templates" in our  views.  Imagine a view that listed Top Selling, New and Top Rated products in 3  lists.  The most basic way to implement this would be 3 loops like so&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Top Selling Product List&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;    
    @foreach (string product in View.TopSellers)    
    {        
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;@product&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;    
    }
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt; 
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;New Product List&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;    
    @foreach (string product in View.NewProducts)    
    {        
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;@product&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;    
    }
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt; 
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Top Rated Product List&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;    
    @foreach (string product in View.TopRated)    
    {        
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;@product&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;    
    }
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But that's not exactly DRY is it?  Helpers can help us out here (hence the  name I guess :-P).  Lets create a helper that does the repeatable stuff for  us,&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;@helper ProductLister(List&lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt; products){    
    &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;        
        @foreach (string product in products)        
        {            
            &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;@product&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;        
        }    
    &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the rest of the view...&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Top Selling Product List&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
@ProductLister(View.TopSellers) 
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;New Product List&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
@ProductLister(View.NewProducts) 
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Top Rated Product List&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
@ProductLister(View.TopRated)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Much simpler, cleaner, whateverer.  Again with the Spark similarities - these  are similar to macros.&lt;/p&gt;&lt;h2&gt;Functions&lt;/h2&gt;&lt;p&gt;Razor also makes it easier to embed arbitrary methods on your page which I  guess can be useful for formatting and things like that.  This give us the power  to extend the Razor view engine and adapt it to suit our needs - powerful yes  but also open to abuse as you might guess.  Here's a simple function in  action,&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;@functions {
    string Encrypt(string value){        
        char[] asArray = value.ToCharArray();        
        Array.Reverse(asArray);        
        return new string(asArray);    
    }
} 
&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;    
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Username: @View.Username&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;    
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Password: @Encrypt(View.Password)&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The function applies a highly technical string encryption technique to a  string value returning the result.&lt;/p&gt;&lt;h2&gt;Inline Templates&lt;/h2&gt;&lt;p&gt;One more feature before I head off to watch telly or sleep or something.   Razor allows you to pass little html nuggets or templates as arguments to  helpers and functions.  There is a details blog post about this over at &lt;a href="http://blog.andrewnurse.net/2010/08/02/InsideRazorPart3Templates.aspx"&gt;Vibrant  Code&lt;/a&gt; and my example is heavily inspired/plagiarised from that.  Lets see  what we can do,&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;@functions {     
    IHtmlString Times(int times, Func&lt;span class="nt"&gt;&amp;lt;int&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;object&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; template) {        
        StringBuilder b = new StringBuilder();        
        for(int i = 0; i &lt;span class="nt"&gt;&amp;lt; times&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;++)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;              
            &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Append&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;));&lt;/span&gt;          
        &lt;span class="err"&gt;}&lt;/span&gt;         
        &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="na"&gt;new&lt;/span&gt; &lt;span class="na"&gt;HtmlString&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ToString&lt;/span&gt;&lt;span class="err"&gt;());&lt;/span&gt;    
    &lt;span class="err"&gt;}&lt;/span&gt; 
&lt;span class="err"&gt;}&lt;/span&gt;   
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;ul&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;    
    @Times(10, @&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;List Item @item&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;)
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Look at the second to last line see that little block of html preceded by the  Razor marker (@)?  See how in our Times function the HTML block it is getting translated transparently as a  Func&amp;lt;int, object&amp;gt; the we can call and manipulate in the helper function anyway we want?  Can  you see how powerful that could be in the right place?  Me too.  Me too.&lt;/p&gt;&lt;h2&gt;Done For Now&lt;/h2&gt;&lt;p&gt;There is more to Razor than all this stuff including the ability to use it  outside of the view context so it could simply be a templating language if needs  be.  There is even more than that too but thats for another time.  Imagine  though.... I started out this blog post more or less telling you I used to think  Razor was simply the WebForms view engine but with @'s instead of &amp;lt;% %&amp;gt;'s  and hopefully you can see why I was wrong and why I was happy to admit it.  My  only gripe is that the Razor documentation could be a bit more available.  There  isn't really a great deal out there ATM.  However this has been promised for the  official release so I am looking forward to that.&lt;/p&gt;&lt;p&gt;Oh Misfits is about to start......&lt;/p&gt;</content></entry><entry><title>Remote Validation in ASP.NET MVC 3 RC1</title><updated>Wed Nov 10 00:00:00 UTC 2010</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2010/11/10/remote-validation-in-asp-dot-net-mvc-3-rc1/"></link><id>urn:yobriefca-se:feed:post:Remote Validation in ASP.NET MVC 3 RC1</id><content type="html">
&lt;p&gt;&lt;em&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;:  Added some words around the extra configuration options available&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Remote validation has finally landed in RC1 of &lt;a href="http://weblogs.asp.net/scottgu/archive/2010/11/09/announcing-the-asp-net-mvc-3-release-candidate.aspx"&gt;ASP.NET  MVC 3&lt;/a&gt;.  It's a weird area as more often than not people tend to over  complicate something that is really pretty simple.  Thankfully the MVC  implementation is fairly straightforward by simply providing wiring allowing the &lt;a href="http://bassistance.de/jquery-plugins/jquery-plugin-validation/"&gt;jQuery  Validation&lt;/a&gt; plugin to work it's magic.  Basically there is a new Remote attribute that can be used  like so.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Credentials&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;    
&lt;span class="na"&gt;    [Remote("Username", "Validation")]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Password&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see we have attributed the Username field with a Remote  attribute.  The 2 parameters tell us what Action and Controller we should call  to perform the validation.  This does make me feel slightly uneasy as it kind of feels like you are coupling the controller to the model which doesn't sit right by me.  currently sitting on the fence I'll see how it works in real life.  Anyway I implemented it like so,&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ValidationController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;UserName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UserExists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;JsonRequestBehavior&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AllowGet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And thats you - provided you have the necessary client side libraries included  of course (jQuery, jQuery Validate etc). and have Client Side Validation turned on (now by default in MVC3).&lt;/p&gt;&lt;h2&gt;Configuration&lt;/h2&gt;&lt;p&gt;The Remote attribute offers a few nice little configuration options to make  things easier.  The typical ones are there such as ErrorMessage, ErrorResource  etc. but there are a few specific ones as well.&lt;/p&gt;&lt;h3&gt;Fields&lt;/h3&gt;&lt;p&gt;There may be a case where ding the name and the value of a single form field  isn't enough to perform validation.  Perhaps validation is affected by some  other field/value in the form.  The Remote attribute accepts a comma separated  list of other fields that need to be sent up with the request using the Fields  parameter&lt;/p&gt;&lt;p&gt;This basic example will send up the value of the EmailService input field  along with the value of Username.  Clean and simple.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="na"&gt;[Remote("Username", "Validation", Fields = "EmailService")]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;HttpMethod&lt;/h3&gt;&lt;p&gt;HttpMethod simply allows us to change how the ajax request is sent e.g. via  POST or GET or anything else that makes sense.  So to send a remote request via  POST&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="na"&gt;[Remote("Username", "Validation", HttpMethod = "POST")]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;A Minor Difference&lt;/h2&gt;&lt;p&gt;You might notice if you read the release notes for RC1 that my implementation  of the controller is slightly different.  The reason being that the example in  the release notes is broken :-).  The example looks like this&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UsersController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;UserNameAvailable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="n"&gt;MyRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UserNameExists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However the Validate plugin expects a JSON response which is fine on the  surface but returning a boolean response to the client side results in a  response body of False (notice the captial F) which in turn causes a parse error  when the plugin performs JSON.parse.  My suggested solution is actually more  inline with how most people would typically write an Ajax capable controller  action anyway (though I am not happy with the JsonRequestBehaviour usage) but  there are other ways but they aren't pretty....&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ValidationController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;        
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;Repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UserExists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;ToLower&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;See?  Ugly and plain &lt;strong&gt;WRONG&lt;/strong&gt; (but it will work).&lt;/p&gt;&lt;p&gt;Nice to see this feature finally landing as it can be useful in certain  situations.&lt;/p&gt;</content></entry><entry><title>All Change! ValidateInputAttribute and SkipRequestValidation</title><updated>Tue Nov 09 00:00:00 UTC 2010</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2010/11/09/all-change-validateinputattribute-and-skiprequestvalidation/"></link><id>urn:yobriefca-se:feed:post:All Change! ValidateInputAttribute and SkipRequestValidation</id><content type="html">
&lt;p&gt;I recently &lt;a href="http://yobriefcase.posterous.com/validateinputattribute-changes-in-mvc3"&gt;blogged&lt;/a&gt; about the new Exclude feature of ValidateInputAttribute in ASP.NET MVC 3 (Beta  2).  Well as with most early adopter types I've been shafted!  Well not really  but things have changed slightly and it makes my last &lt;a href="http://yobriefcase.posterous.com/validateinputattribute-changes-in-mvc3"&gt;post&lt;/a&gt; slightly redundant.&lt;/p&gt;&lt;p&gt;Let me clarify a bit.  The Exclude property no longer exists.  It has instead  been replaced with a new attribute SkipRequestValidation.  This is a  per-property attribute that lets you specify what properties should be  excluded.  This has the effect of pushing the validation flag down to the model  rather than on the controller.  This make a lot more sense especially in a  controller/solution that has many actions accepting the model.  So what  changes?  Lets take a look at our old code.&lt;/p&gt;&lt;p&gt;First things first the controller no longer need the ValidateInput attribute  and goes back to the old "thinner" version of itself,&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HomeController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;View&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;    [HttpPost]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ForumPost&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;View&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We then need to mark the Bodyt property of our ForumPost model to skip  validation,&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ForumPost&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Subject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="na"&gt;    &lt;/span&gt;
&lt;span class="na"&gt;    [SkipRequestValidation]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;Thats it.  To be honest this feels like a much neater solution.  It feels  more a solution rather than a tacked on property that was added to cater for a  specific case.&lt;/p&gt;&lt;p&gt;ASP.NET MVC 3 RC1 is out now - read more &lt;a href="http://weblogs.asp.net/scottgu/archive/2010/11/09/announcing-the-asp-net-mvc-3-release-candidate.aspx"&gt;here&lt;/a&gt;,  and get it &lt;a href="http://go.microsoft.com/fwlink/?LinkID=191797"&gt;here&lt;/a&gt;.&lt;/p&gt;</content></entry><entry><title>Mobilize! Adapting the ASP.NET MVC Project Template for jQuery Mobile</title><updated>Mon Oct 25 23:00:00 UTC 2010</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2010/10/25/mobilize-adapting-the-asp-dot-net-mvc-project-template-for-jquery-mobile/"></link><id>urn:yobriefca-se:feed:post:Mobilize! Adapting the ASP.NET MVC Project Template for jQuery Mobile</id><content type="html">
&lt;p class="img-holder"&gt;&lt;img alt="" src="http://farm3.static.flickr.com/2413/5721975436_fb47349a04_o.png" /&gt;&lt;/p&gt;&lt;p style="text-align: right;"&gt;&lt;em&gt;&lt;span style="font-size: xx-small;"&gt;&lt;span style="font-size: xx-small;"&gt;Image&lt;/span&gt; courtesy of the  awesome &lt;/span&gt;&lt;/em&gt;&lt;em&gt;&lt;span style="font-size: xx-small;"&gt;&lt;a href="http://www.threadless.com/"&gt;Threadless&lt;/a&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Having tinkered with &lt;a href="http://yobriefcase.posterous.com/practical-jquery-mobile-with-aspnet-mvc"&gt;jQuery  Mobile and MVC&lt;/a&gt; a bit recently but I wanted to do a bit more.  The first app  I wrote was read only which is actually pretty easy to accomplish regardless of  technology/framework.  So I wanted to try a little something different,  something a kin to a real application.  However time and coders block left me  with little inspiration for creating the worlds next amazing mobile app.   Sitting there with a new ASP.NET MVC project open in Visual Studio I couldn't  think of what to write.  Then it struck me... don't write anything.  The MVC  starter skeleton project was sitting right there why not just mobilise it?  So I  did.  Without modifying any server side code and only tweaking the views I found  I was able to create a fully jquery-mobilified version of the template.  Here's  what I did.&lt;/p&gt;&lt;h2&gt;Clean House&lt;/h2&gt;&lt;p&gt;We need to strip some of the dead weight out of our project including some of  the mark up and resources,&lt;/p&gt;&lt;h3&gt;Resources&lt;/h3&gt;&lt;p&gt;First things first I dropped the current bundle of scripts (MS Ajax, jQuery  1.4.1, Validate etc.) and the Site.css.  Next I added the jQuery Mobile  assets,&lt;/p&gt;&lt;ul&gt;&lt;li&gt;jQuery 1.4.3 (jquery-1.4.3.js)&lt;/li&gt;&lt;li&gt;jQuery Mobile 1.0a1 (jquery.mobile-1.0a1.js)&lt;/li&gt;&lt;li&gt;jQuery Mobile CSS (jquery.mobile-1.0a1.css)&lt;/li&gt;&lt;li&gt;jQuery Mobile images&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In the following project structure&lt;/p&gt;&lt;p class="img-holder"&gt;&lt;img src="http://farm3.static.flickr.com/2696/5721416507_18861d0ae1_o.png" /&gt;&lt;/p&gt;&lt;h3&gt;Site.Master&lt;/h3&gt;&lt;p&gt;Next I cut down the Site.Master to it's bare minimum and add the HTML5  DocType and the references to jQuery Mobile ,&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%@ Master Language="C#" Inherits="System.Web.Mvc.ViewMasterPage" %&amp;gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"Head1"&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&amp;lt;asp:ContentPlaceHolder&lt;/span&gt; &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;"TitleContent"&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"../../Content/jquery.mobile-1.0a1.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"../../Scripts/jquery-1.4.3.min.js"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"../../Scripts/jquery.mobile-1.0a1.min.js"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;asp:ContentPlaceHolder&lt;/span&gt; &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;"MainContent"&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;I could have included the basic markup for a full page but I wanted to keep  it as flexible for now.  I also removed the LogOnUserControl for now as I want  to just push it into the main page.&lt;/p&gt;&lt;h2&gt;Marking Up&lt;/h2&gt;&lt;p&gt;The next step was to tweak the markup of the pages so they comply with jQuery  Mobile and can be mobilised correctly.  Most pages are marked up in the same way  so rather than list them all I'll just list the highlights.&lt;/p&gt;&lt;h3&gt;Home.aspx&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%@ Page Language="C#" MasterPageFile="~/Views/Shared/Site.Master" Inherits="System.Web.Mvc.ViewPage" %&amp;gt;

&lt;span class="nt"&gt;&amp;lt;asp:Content&lt;/span&gt; &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;"Content1"&lt;/span&gt; &lt;span class="na"&gt;ContentPlaceHolderID=&lt;/span&gt;&lt;span class="s"&gt;"TitleContent"&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Home Page
&lt;span class="nt"&gt;&amp;lt;/asp:Content&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;asp:Content&lt;/span&gt; &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;"Content2"&lt;/span&gt; &lt;span class="na"&gt;ContentPlaceHolderID=&lt;/span&gt;&lt;span class="s"&gt;"MainContent"&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-role=&lt;/span&gt;&lt;span class="s"&gt;"page"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
	    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-role=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
		    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Home Page&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
            &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% if (!Request.IsAuthenticated) { %&amp;gt;
                &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%=Url.Action("&lt;/span&gt;&lt;span class="na"&gt;LogOn&lt;/span&gt;&lt;span class="err"&gt;",&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;Account&lt;/span&gt;&lt;span class="err"&gt;")%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;" data-icon="forward" class="ui-btn-right"&amp;gt;Logon&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% } else { %&amp;gt;
                &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%=Url.Action("&lt;/span&gt;&lt;span class="na"&gt;LogOff&lt;/span&gt;&lt;span class="err"&gt;",&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;Account&lt;/span&gt;&lt;span class="err"&gt;")%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;" data-icon="back" class="ui-btn-right"&amp;gt;Log Off&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% } %&amp;gt;
	    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
	    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-role=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;	
		    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%: View.Message %&amp;gt;&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;	
	    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/asp:Content&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I have a top toolbar button for Login/Log Off (depending on context) and the  View.Message from the old page is included as the content of the page.&lt;/p&gt;&lt;h3&gt;Logon.aspx&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%@ Page Language="C#" MasterPageFile="~/Views/Shared/Site.Master" Inherits="System.Web.Mvc.ViewPage&lt;span class="nt"&gt;&amp;lt;Mvc&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Mobile&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Template&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Models&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LogOnModel&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;" %&amp;gt;

&lt;span class="nt"&gt;&amp;lt;asp:Content&lt;/span&gt; &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;"loginTitle"&lt;/span&gt; &lt;span class="na"&gt;ContentPlaceHolderID=&lt;/span&gt;&lt;span class="s"&gt;"TitleContent"&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Log On
&lt;span class="nt"&gt;&amp;lt;/asp:Content&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;asp:Content&lt;/span&gt; &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;"loginContent"&lt;/span&gt; &lt;span class="na"&gt;ContentPlaceHolderID=&lt;/span&gt;&lt;span class="s"&gt;"MainContent"&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-role=&lt;/span&gt;&lt;span class="s"&gt;"page"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
	    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-role=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
		    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Log On&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%=Url.Action("&lt;/span&gt;&lt;span class="na"&gt;Register&lt;/span&gt;&lt;span class="err"&gt;",&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;Account&lt;/span&gt;&lt;span class="err"&gt;")%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;" data-icon="gear" class="ui-btn-right"  data-rel="dialog" data-transition="pop"&amp;gt;Register&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
	    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
	    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-role=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;	            
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Please enter your username and password&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% using (Html.BeginForm()) { %&amp;gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-role=&lt;/span&gt;&lt;span class="s"&gt;"fieldcontain"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%: Html.LabelFor(m =&amp;gt; m.UserName) %&amp;gt;
                    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%: Html.TextBoxFor(m =&amp;gt; m.UserName) %&amp;gt;
                    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
                        &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%: Html.ValidationMessageFor(m =&amp;gt; m.UserName) %&amp;gt;
                    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-role=&lt;/span&gt;&lt;span class="s"&gt;"fieldcontain"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%: Html.LabelFor(m =&amp;gt; m.Password) %&amp;gt;
                    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%: Html.PasswordFor(m =&amp;gt; m.Password) %&amp;gt;
                    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
                        &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%: Html.ValidationMessageFor(m =&amp;gt; m.Password) %&amp;gt;   
                    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-role=&lt;/span&gt;&lt;span class="s"&gt;"fieldcontain"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%: Html.CheckBoxFor(m =&amp;gt; m.RememberMe) %&amp;gt;
                    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%: Html.LabelFor(m =&amp;gt; m.RememberMe) %&amp;gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Log On"&lt;/span&gt; &lt;span class="na"&gt;data-theme=&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% } %&amp;gt;
	    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/asp:Content&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Gives us the login form and a link to the Register screen.  I marked the  Register screen as a Dialog just to be a wee bit different.  The Register screen  itself is marked up as a normal page (the framework handles the displaying of a  dialog automagically).  I also added a different theme to the login button and a  "pop" transition to the Register dialog through the data- attributes.&lt;/p&gt;&lt;p&gt;One other thing I had to do was add a "fieldcontain" wrapper to the field  blocks as there was some layout issues.  This is documented in the jQuery Mobile  docs.&lt;/p&gt;&lt;h3&gt;Register.aspx&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%@ Page Language="C#" MasterPageFile="~/Views/Shared/Site.Master" Inherits="System.Web.Mvc.ViewPage&lt;span class="nt"&gt;&amp;lt;Mvc&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Mobile&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Template&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Models&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;RegisterModel&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;" %&amp;gt;

&lt;span class="nt"&gt;&amp;lt;asp:Content&lt;/span&gt; &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;"registerTitle"&lt;/span&gt; &lt;span class="na"&gt;ContentPlaceHolderID=&lt;/span&gt;&lt;span class="s"&gt;"TitleContent"&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Register
&lt;span class="nt"&gt;&amp;lt;/asp:Content&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;asp:Content&lt;/span&gt; &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;"registerContent"&lt;/span&gt; &lt;span class="na"&gt;ContentPlaceHolderID=&lt;/span&gt;&lt;span class="s"&gt;"MainContent"&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-role=&lt;/span&gt;&lt;span class="s"&gt;"page"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
	    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-role=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
		    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Register&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%=Url.Action("&lt;/span&gt;&lt;span class="na"&gt;Index&lt;/span&gt;&lt;span class="err"&gt;",&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;Home&lt;/span&gt;&lt;span class="err"&gt;")%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;" data-icon="grid" class="ui-btn-right"&amp;gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
	    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
	    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-role=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;	
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Passwords are required to be a minimum of &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%: View.PasswordLength %&amp;gt; characters in length.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;		    
            &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% using (Html.BeginForm()) { %&amp;gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-role=&lt;/span&gt;&lt;span class="s"&gt;"fieldcontain"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%: Html.LabelFor(m =&amp;gt; m.UserName) %&amp;gt;
                    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%: Html.TextBoxFor(m =&amp;gt; m.UserName) %&amp;gt;
                    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
                        &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%: Html.ValidationMessageFor(m =&amp;gt; m.UserName) %&amp;gt;
                    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-role=&lt;/span&gt;&lt;span class="s"&gt;"fieldcontain"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%: Html.LabelFor(m =&amp;gt; m.Email) %&amp;gt;
                    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%: Html.TextBoxFor(m =&amp;gt; m.Email) %&amp;gt;
                    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
                        &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%: Html.ValidationMessageFor(m =&amp;gt; m.Email) %&amp;gt;
                    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-role=&lt;/span&gt;&lt;span class="s"&gt;"fieldcontain"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%: Html.LabelFor(m =&amp;gt; m.Password) %&amp;gt;
                    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%: Html.PasswordFor(m =&amp;gt; m.Password) %&amp;gt;
                    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
                        &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%: Html.ValidationMessageFor(m =&amp;gt; m.Password) %&amp;gt;
                    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-role=&lt;/span&gt;&lt;span class="s"&gt;"fieldcontain"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%: Html.LabelFor(m =&amp;gt; m.ConfirmPassword) %&amp;gt;
                    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%: Html.PasswordFor(m =&amp;gt; m.ConfirmPassword) %&amp;gt;
                    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
                        &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%: Html.ValidationMessageFor(m =&amp;gt; m.ConfirmPassword) %&amp;gt;
                    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

                &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Register"&lt;/span&gt; &lt;span class="na"&gt;data-theme=&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%} %&amp;gt;
	    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/asp:Content&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The most complex screen in the app.  Nothing special added only some  different markup.&lt;/p&gt;&lt;h2&gt;Running It&lt;/h2&gt;&lt;p&gt;That was it.  After adapting the rest of the pages (via manipulating markup)   I was left with a mobilized version of the MVC project template.  Again I didn't  have to make any code changes - validation still worked, forms still worked,  login, register, change password - all worked as expected (screen shots from Chrome which has a few issues with rounded corners on fields in jQuery Mobile).&lt;/p&gt;&lt;p class="img-holder"&gt;  &lt;img style="border:1px solid #000;" width="200" src="http://farm4.static.flickr.com/3502/5721975554_272b823481_o.png" /&gt;  &lt;img style="border:1px solid #000;" width="200" src="http://farm3.static.flickr.com/2756/5721416629_4b4e7ebaed_o.png" /&gt;  &lt;img style="border:1px solid #000;" width="200" src="http://farm3.static.flickr.com/2510/5721416689_20e25e2983_o.png" /&gt;&lt;/p&gt;</content></entry><entry><title>ValidateInputAttribute Changes in MVC3 (Beta 2)</title><updated>Sat Oct 23 23:00:00 UTC 2010</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2010/10/23/validateinputattribute-changes-in-mvc3-beta-2/"></link><id>urn:yobriefca-se:feed:post:ValidateInputAttribute Changes in MVC3 (Beta 2)</id><content type="html">
&lt;p&gt;&lt;strong&gt;This post is now redundant with the release of ASP.NET MVC 3 RC 1.  SkipRequestValidation is the new ValidateInputAttribute(Exclude="").&lt;/strong&gt;&lt;span style="color: #ff6600;"&gt;&lt;strong&gt;  &lt;a href="http://yobriefcase.posterous.com/all-change-validateinputattribute-and-skipreq"&gt;Read More.&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;The ValidateInputAttribute has received a nice little tweak in MVC 3 offering  more fine grained control over parameters of a request. &lt;/p&gt;&lt;p&gt;In MVC 2 using ValidateInputAttribute was limited to the request level, that  is all parameters in the request where either validated or not.  Lets  demonstrate this with a simple example - a simple forum posting page,&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%@ Page Language="C#" MasterPageFile="~/Views/Shared/Site.Master" Inherits="System.Web.Mvc.ViewPage&lt;span class="nt"&gt;&amp;lt;Common&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Model&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ForumPost&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;" %&amp;gt;

&lt;span class="nt"&gt;&amp;lt;asp:Content&lt;/span&gt; &lt;span class="na"&gt;ContentPlaceHolderID=&lt;/span&gt;&lt;span class="s"&gt;"TitleContent"&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
	Login
&lt;span class="nt"&gt;&amp;lt;/asp:Content&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;asp:Content&lt;/span&gt; &lt;span class="na"&gt;ContentPlaceHolderID=&lt;/span&gt;&lt;span class="s"&gt;"MainContent"&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Post Question&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% using (Html.BeginForm()) { %&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
            &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Html.LabelFor(c =&amp;gt; c.Subject)%&amp;gt;
            &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Html.TextBoxFor(c =&amp;gt; c.Subject)%&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
            &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Html.LabelFor(c =&amp;gt; c.Body)%&amp;gt;
            &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Html.TextAreaFor(c =&amp;gt; c.Body)%&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Post"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%} %&amp;gt;
&lt;span class="nt"&gt;&amp;lt;/asp:Content&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We don;t care what the controller actions actually do but lets describe them  here anyway&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HomeController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;View&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;    [HttpPost]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ForumPost&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;View&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now attempting to post any sort of markup back to the action will result in  an exception being thrown,&lt;/p&gt;&lt;p&gt;[[posterous-content:DasrjrabrrcEcDeiHdeG]]&lt;/p&gt;&lt;p&gt;If we wanted to allow markup to go through we can add the  [ValidateInput(false)] attribute to the action.  The only problem with that is  if we only wanted to allow markup in the Body and not the Subject we would have  to write our own tests in the controller to prevent this.  Not the most ideal or  clean solution.&lt;/p&gt;&lt;p&gt;MVC 3 solves this quite simply by extending the ValidateInputAttribute and  allowing use to specify exclusions.  This means we can have validation turned on  but specifically state the we don't want to validate a specific request  parameter(s) (e.g. Body).&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="na"&gt;[ValidateInput(true, Exclude = "Body")]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;A very minor tweak that makes a big leap to being able to produce cleaner more readable code.&lt;/p&gt;</content></entry><entry><title>Unobtrusive JavaScript in MVC3</title><updated>Fri Oct 22 23:00:00 UTC 2010</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2010/10/22/unobtrusive-javascript-in-mvc3/"></link><id>urn:yobriefca-se:feed:post:Unobtrusive JavaScript in MVC3</id><content type="html">
&lt;p&gt;&lt;/p&gt;&lt;p&gt;One of the "it's not new but it's cool" features that appeared in the ASP.NET  MVC3 Beta was Unobtrusive JavaScript (well actually Unobtrusive Ajax and an  unobtrusive validation adapter for the jQuery Validation plugin).  Before we  dive into how this differs from MVC2 lets talk about JavaScript in MVC.&lt;/p&gt;&lt;p&gt;First things first - jQuery is now the defacto standard for any ASP.NET MVC  solution.  In the MVC2 Project Template you got both the Microsoft Ajax Library  and jQuery.  This hasn't changed in MVC3 but the Microsoft stuff is only there  for any potential backward compatibility issues a solution may have - feel free  to just delete these files and embrace jQuery.  All the new client side stuff is  all facilitated through jQuery which means you wont have to have some other  framework on your page just because generated code mandates it.&lt;/p&gt;&lt;h2&gt;What Is It?&lt;/h2&gt;&lt;p&gt;Unobtrusive JavaScript (in the MVC3 sense) is a strategy that ensures that no  JavaScript is embedded within the markup (unless you do it yourself).  100% no  generated code muddying your markup.  No code islands, no inline event handlers,  better handling of failure cases and no dependence on any specific framework.   To me, being a web focused developer, this is HUGE and it should be to you too -  it is after all considered best practise.&lt;/p&gt;&lt;h2&gt;Turn It On&lt;/h2&gt;&lt;p&gt;There are two ways to turn Unobtrusive Ajax/Validation on,&lt;/p&gt;&lt;h3&gt;1. Web.Config&lt;/h3&gt;&lt;p&gt;Within the &amp;lt;appSettings&amp;gt; config node in Web.Config you can specify  whether unobtrusive JavaScript is on or off&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;appSettings&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;add&lt;/span&gt; &lt;span class="na"&gt;key=&lt;/span&gt;&lt;span class="s"&gt;"enableSimpleMembership"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;add&lt;/span&gt; &lt;span class="na"&gt;key=&lt;/span&gt;&lt;span class="s"&gt;"ClientValidationEnabled"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;add&lt;/span&gt; &lt;span class="na"&gt;key=&lt;/span&gt;&lt;span class="s"&gt;"UnobtrusiveJavaScriptEnabled"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; 
  &lt;span class="nt"&gt;&amp;lt;/appSettings&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2 On a Per-Page Basis&lt;/h3&gt;&lt;p&gt;Just like EnableClientValidation it is possible to activate unobtrusive  JavaScript  at a page level.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% Html.EnableUnobtrusiveJavaScript(); %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;What Does It Do&lt;/h2&gt;&lt;p&gt;Best way to show what it does is by comparison to, um, Obtrusive JavaScript.   So lets create a scenario in both MVC2 and MVC3 and seeing how they compare.   The scenario will be a simple ajaxified login form (Username and Password) with  some client validation and no server side magic.  Most of this, bar the client  side scripts, is the same across both solutions. &lt;/p&gt;&lt;h2&gt;The Model&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Credentials&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;    [Required]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="na"&gt;    [Required]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Password&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Two properties with basic [Required] validation. &lt;/p&gt;&lt;h2&gt;The Controller&lt;/h2&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HomeController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Login&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;View&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;    [HttpPost]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Credentials&lt;/span&gt; &lt;span class="n"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;EmptyResult&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;Again there isn't much going on here, this all about the client side!&lt;/p&gt;&lt;h2&gt;The View&lt;/h2&gt;&lt;h3&gt;Common Parts&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%@ Page Language="C#" MasterPageFile="~/Views/Shared/Site.Master" Inherits="System.Web.Mvc.ViewPage&lt;span class="nt"&gt;&amp;lt;Common&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Model&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Credentials&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;" %&amp;gt;

&lt;span class="nt"&gt;&amp;lt;asp:Content&lt;/span&gt; &lt;span class="na"&gt;ContentPlaceHolderID=&lt;/span&gt;&lt;span class="s"&gt;"TitleContent"&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
	Login
&lt;span class="nt"&gt;&amp;lt;/asp:Content&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;asp:Content&lt;/span&gt; &lt;span class="na"&gt;ContentPlaceHolderID=&lt;/span&gt;&lt;span class="s"&gt;"MainContent"&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Login&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% using (Ajax.BeginForm(new AjaxOptions { OnSuccess = "onSuccess" })) { %&amp;gt;
        &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Html.ValidationSummary(true)%&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
            &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Html.LabelFor(c =&amp;gt; c.Username)%&amp;gt;
            &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Html.TextBoxFor(c =&amp;gt; c.Username)%&amp;gt;
            &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Html.ValidationMessageFor(c =&amp;gt; c.Username)%&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
            &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Html.LabelFor(c =&amp;gt; c.Password)%&amp;gt;
            &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Html.PasswordFor(c =&amp;gt; c.Password)%&amp;gt;
            &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Html.ValidationMessageFor(c =&amp;gt; c.Password)%&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Login"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%} %&amp;gt;

    &lt;span class="c"&gt;&amp;lt;!-- JAVASCRIPT LIBRARIES GO HERE! --&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// logged in, carry on&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/asp:Content&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A simple view that is the same across both projects the only thing that is  going to differ is the actual libraries/scripts that do all the wiring up. &lt;/p&gt;&lt;h3&gt;MVC2&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%=Url.Content("&lt;/span&gt;&lt;span class="err"&gt;~/&lt;/span&gt;&lt;span class="na"&gt;Scripts&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;MicrosoftAjax&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;js&lt;/span&gt;&lt;span class="err"&gt;")&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;" type="&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%=Url.Content("&lt;/span&gt;&lt;span class="err"&gt;~/&lt;/span&gt;&lt;span class="na"&gt;Scripts&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;MicrosoftMvcAjax&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;js&lt;/span&gt;&lt;span class="err"&gt;")&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;" type="&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%=Url.Content("&lt;/span&gt;&lt;span class="err"&gt;~/&lt;/span&gt;&lt;span class="na"&gt;Scripts&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;MicrosoftMvcValidation&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;js&lt;/span&gt;&lt;span class="err"&gt;")%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;" type="&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using the out of the box Microsoft Ajax Library (which is now deprecated)&lt;/p&gt;&lt;h3&gt;MVC3&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%=Url.Content("&lt;/span&gt;&lt;span class="err"&gt;~/&lt;/span&gt;&lt;span class="na"&gt;Scripts&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;jquery-1&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;4&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;1&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;js&lt;/span&gt;&lt;span class="err"&gt;")%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;" type="&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%=Url.Content("&lt;/span&gt;&lt;span class="err"&gt;~/&lt;/span&gt;&lt;span class="na"&gt;Scripts&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;jquery&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;validate&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;js&lt;/span&gt;&lt;span class="err"&gt;")%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;" type="&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%=Url.Content("&lt;/span&gt;&lt;span class="err"&gt;~/&lt;/span&gt;&lt;span class="na"&gt;Scripts&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;jquery&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;unobtrusive-ajax&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;js&lt;/span&gt;&lt;span class="err"&gt;")%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;" type="&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%=Url.Content("&lt;/span&gt;&lt;span class="err"&gt;~/&lt;/span&gt;&lt;span class="na"&gt;Scripts&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;jquery&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;validate&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;unobtrusive&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;js&lt;/span&gt;&lt;span class="err"&gt;")%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;" type="&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using the out of the box jQuery plugins.&lt;/p&gt;&lt;p&gt;Done.  That's all we need for our solutions to function.  The form will be  validated on the client side and submission will be performed through ajax.   Both will behave exactly the same but the markup and code they generate will be  quite different.  I've tidied both up in terms of formatting just so it's  slightly easier to read but I've tried to keep the layout style consistent  across both.&lt;/p&gt;&lt;h2&gt;MVC2 Output&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/1999/xhtml"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Login &lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/Mvc2/Content/Site.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/Mvc2/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;
        Login&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/Mvc2/Home/Login"&lt;/span&gt; 
          &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"form0"&lt;/span&gt; 
          &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt; 
          &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"Sys.Mvc.AsyncForm.handleClick(this, new Sys.UI.DomEvent(event));"&lt;/span&gt;
          &lt;span class="na"&gt;onsubmit=&lt;/span&gt;&lt;span class="s"&gt;"Sys.Mvc.AsyncForm.handleSubmit(this, new Sys.UI.DomEvent(event), { insertionMode: Sys.Mvc.InsertionMode.replace, onSuccess: Function.createDelegate(this, onSuccess) });"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"validation-summary-valid"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"validationSummary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"display: none"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"Username"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Username&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"Username"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"Username"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"field-validation-valid"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"Username_validationMessage"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"Password"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Password&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"Password"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"Password"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"field-validation-valid"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"Password_validationMessage"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Login"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
    &lt;span class="c1"&gt;//&amp;lt;![CDATA[&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mvcClientValidationMetadata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mvcClientValidationMetadata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mvcClientValidationMetadata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="s2"&gt;"Fields"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
                &lt;span class="s2"&gt;"FieldName"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Username"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;"ReplaceValidationMessageContents"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;"ValidationMessageId"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Username_validationMessage"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;"ValidationRules"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
                    &lt;span class="s2"&gt;"ErrorMessage"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"The Username field is required."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s2"&gt;"ValidationParameters"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
                    &lt;span class="s2"&gt;"ValidationType"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"required"&lt;/span&gt;
                &lt;span class="p"&gt;}]&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;"FieldName"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Password"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;"ReplaceValidationMessageContents"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;"ValidationMessageId"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Password_validationMessage"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;"ValidationRules"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
                    &lt;span class="s2"&gt;"ErrorMessage"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"The Password field is required."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s2"&gt;"ValidationParameters"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
                    &lt;span class="s2"&gt;"ValidationType"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"required"&lt;/span&gt;
                &lt;span class="p"&gt;}]&lt;/span&gt;
            &lt;span class="p"&gt;}],&lt;/span&gt;
            &lt;span class="s2"&gt;"FormId"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"form0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"ReplaceValidationSummary"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"ValidationSummaryId"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"validationSummary"&lt;/span&gt; 
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="c1"&gt;//]]&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/Mvc2/Scripts/MicrosoftAjax.js"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/Mvc2/Scripts/MicrosoftMvcAjax.js"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/Mvc2/Scripts/MicrosoftMvcValidation.js"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// logged in, carry on&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;MVC 3 Output&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/1999/xhtml"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Login &lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/Mvc3/Content/Site.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/Mvc3/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;
        Login&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/Mvc3/Home/Login"&lt;/span&gt; 
          &lt;span class="na"&gt;data-ajax=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; 
          &lt;span class="na"&gt;data-ajax-success=&lt;/span&gt;&lt;span class="s"&gt;"onSuccess"&lt;/span&gt;
          &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"form0"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"Username"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Username&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;data-val=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;data-val-required=&lt;/span&gt;&lt;span class="s"&gt;"The Username field is required."&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"Username"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"Username"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"field-validation-valid"&lt;/span&gt; &lt;span class="na"&gt;data-valmsg-for=&lt;/span&gt;&lt;span class="s"&gt;"Username"&lt;/span&gt; &lt;span class="na"&gt;data-valmsg-replace=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"Password"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Password&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;data-val=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;data-val-required=&lt;/span&gt;&lt;span class="s"&gt;"The Password field is required."&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"Password"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"Password"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"field-validation-valid"&lt;/span&gt; &lt;span class="na"&gt;data-valmsg-for=&lt;/span&gt;&lt;span class="s"&gt;"Password"&lt;/span&gt; &lt;span class="na"&gt;data-valmsg-replace=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Login"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/Mvc3/Scripts/jquery-1.4.1.min.js"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/Mvc3/Scripts/jquery.validate.min.js"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/Mvc3/Scripts/jquery.unobtrusive-ajax.min.js"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/Mvc3/Scripts/jquery.validate.unobtrusive.min.js"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// logged in, carry on&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Analysis&lt;/h2&gt;&lt;p&gt;The first obvious thing we can see is that the UnobJS code is slightly  lighter, even with strict formatting turned it generally produces less LOC's.   But that's not really that important in the grand scheme of things, but is  important is the whole unobtrusiveness of the UnobJS source.&lt;/p&gt;&lt;p&gt;In the old MVC2 code look at those inline event handlers at lines 14 and 15,  look at that huge code island at line 33, smack bang in the middle of our HTML.   It's not wrong per say but it's certainly not best practise.  No it's always  best to keep your View (HTML) and your Code (JavaScript) separated as much as  possible.  Imagine if some wayward script was added between line 61 and 62 did  something like this&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mvcClientValidationMetadata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forms&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forms&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;onsubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OHT3HNOES END OF THE WORLD!&lt;/p&gt;&lt;p&gt;Or what if your CDN that served your scripts was down?  You are actually  going to get JavaScript errors during form submission which can, in various  browsers, prevent the form being submitted.&lt;/p&gt;&lt;p&gt;OHT3HNOES END OF THE WORLD AGAIN!&lt;/p&gt;&lt;p&gt;MVC 3/UnobJS on the other hand isn't going to error out and will fall back to  a normal form submission - progressive enhancement or just expected  behaviour?&lt;/p&gt;&lt;p&gt;On other thing... those inline event handlers pretty much need to have the MS  Ajax Library available to work (and not cause errors).  What if I was already  using jQuery for my project?  I'd still need to include MS Ajax on the page even  though only generated code required it (well I could write my own API mimicking  the required MS Ajax API but why should I?).&lt;/p&gt;&lt;p&gt;Now Unobtrusive JavaScript isn't without it's issues.  Using HTML5's data-  attributes can invalidate your HTML which can be a showstopper for some  projects.  One other issue that we may start to see is that EVERYONE is starting  to use data- attributes (e.g. jQuery Mobile) I wonder if we are going to start  seeing collisions between different libraries?&lt;/p&gt;&lt;p&gt;All in all I don't think there should be an option to turn  Unobtrusive JavaScript off, it should just be the only way of doing things :-)  but thats just me.&lt;/p&gt;</content></entry><entry><title>Practical jQuery Mobile with ASP.NET MVC</title><updated>Thu Oct 21 23:00:00 UTC 2010</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2010/10/21/practical-jquery-mobile-with-asp-dot-net-mvc/"></link><id>urn:yobriefca-se:feed:post:Practical jQuery Mobile with ASP.NET MVC</id><content type="html">
&lt;p&gt;That's a bit of a mouthful.  I wanted to write a post about creating a basic  jQuery Mobile app but as I started putting the code together MVC became more and  more involved so I combined the 2.&lt;/p&gt;&lt;p&gt;The end solution?  Lets create a phone directory with 2 main views,&lt;/p&gt;&lt;ol&gt;&lt;li&gt;A filterable list of all people with quick info (telephone extension and  name) that is grouped and sorted alphabetically, and,&lt;/li&gt;&lt;li&gt;A disclosure view of a selected person showing more details including a  photo&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;[[posterous-content:FddxCHuIgArIuezHEbcn]]&lt;/p&gt;&lt;h2&gt;MVC (The Server Side)&lt;/h2&gt;&lt;p&gt;jQuery Mobile works by progressive enhancement and uses Ajax to load and  parse external links so it has more control over page transitions and Ajax  history.  This means that we create a plain old website that will work without  jQuery Mobile, Ajax or any JavaScript.  So I started with the ASP.NET MVC 2 Web  Application Visual Studio Template and ripped out everything bar the Home  Controller and the 2 views.  I also stripped the Site.Master down to the bare  bones.&lt;/p&gt;&lt;p&gt;Next I created my model with data access methods,&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Entry&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;FirstName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Surname&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Email&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;InternalNo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Room&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;ExternalNo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;PhotoLocation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Entry&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;GetAll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// get all entries&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Entry&lt;/span&gt; &lt;span class="nf"&gt;GetById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// get a specific entry&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can implement your own data access there or just hard code some values.   Next I updated the HomeController to return the right models  to the views&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;View&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetAll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;orderby&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Surname&lt;/span&gt;
                &lt;span class="k"&gt;group&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Surname&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;into&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;
                &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;About&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;View&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;I updated the views to display the information in a straightforward way. &lt;/p&gt;&lt;p&gt;Index.aspx&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%@ Page Language="C#" MasterPageFile="~/Views/Shared/Site.Master" Inherits="System.Web.Mvc.ViewPage&lt;span class="nt"&gt;&amp;lt;IEnumerable&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;IGrouping&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;string&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="na"&gt;Kas&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;JQueryMobile&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WhosWho&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Models&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Entry&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt;" %&amp;gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%@ Import Namespace="Kainos.JQueryMobile.WhosWho.Models" %&amp;gt;
&lt;span class="nt"&gt;&amp;lt;asp:Content&lt;/span&gt; &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;"Content1"&lt;/span&gt; &lt;span class="na"&gt;ContentPlaceHolderID=&lt;/span&gt;&lt;span class="s"&gt;"TitleContent"&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Whos Who&lt;span class="nt"&gt;&amp;lt;/asp:Content&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;asp:Content&lt;/span&gt; &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;"Content2"&lt;/span&gt; &lt;span class="na"&gt;ContentPlaceHolderID=&lt;/span&gt;&lt;span class="s"&gt;"MainContent"&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;   
            &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Whos Who&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
                &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% foreach (IGrouping&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="na"&gt;Entry&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; group in Model){%&amp;gt;
                    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=group.Key%&amp;gt;&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% foreach (Entry item in group){%&amp;gt;
                        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%=Url.Action("&lt;/span&gt;&lt;span class="na"&gt;About&lt;/span&gt;&lt;span class="err"&gt;",&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;Home&lt;/span&gt;&lt;span class="err"&gt;",&lt;/span&gt; &lt;span class="na"&gt;new&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id =&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="s"&gt;item.Id&lt;/span&gt; &lt;span class="err"&gt;})&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;"&amp;gt;
                                &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=item.Title %&amp;gt;
                            &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
                                &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=item.InternalNo %&amp;gt;&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;       
                    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%} %&amp;gt;
                &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%} %&amp;gt;                               
            &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;        
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/asp:Content&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;About.aspx&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%@ Page Language="C#" MasterPageFile="~/Views/Shared/Site.Master" Inherits="System.Web.Mvc.ViewPage&lt;span class="nt"&gt;&amp;lt;Kas&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;JQueryMobile&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WhosWho&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Models&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Entry&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;" %&amp;gt;

&lt;span class="nt"&gt;&amp;lt;asp:Content&lt;/span&gt; &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;"Content1"&lt;/span&gt; &lt;span class="na"&gt;ContentPlaceHolderID=&lt;/span&gt;&lt;span class="s"&gt;"TitleContent"&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Model.Title%&amp;gt;
&lt;span class="nt"&gt;&amp;lt;/asp:Content&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;asp:Content&lt;/span&gt; &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;"Content2"&lt;/span&gt; &lt;span class="na"&gt;ContentPlaceHolderID=&lt;/span&gt;&lt;span class="s"&gt;"MainContent"&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;   
            &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Model.Title%&amp;gt;&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"background: url(&amp;lt;%=Url.Content("&lt;/span&gt;&lt;span class="err"&gt;~/&lt;/span&gt;&lt;span class="na"&gt;Images&lt;/span&gt;&lt;span class="err"&gt;/"&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="na"&gt;Model&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;PhotoLocation&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;) no-repeat top right"&amp;gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Model.Title%&amp;gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"mailto:&amp;lt;%=Model.Email%&amp;gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Model.Email%&amp;gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Model.InternalNo%&amp;gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Model.ExternalNo%&amp;gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Model.Room%&amp;gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;                       
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/asp:Content&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This leaves us with a normal, not so pretty but fully functioning site. &lt;/p&gt;&lt;p&gt;[[posterous-content:DblJukiumuFlvvqlHokq]]&lt;/p&gt;&lt;p&gt;Now lets inject some mobile niceness into it,&lt;/p&gt;&lt;h2&gt;jQuery Mobile&lt;/h2&gt;&lt;p&gt;First things first lets put reference to jQuery and jQuery Mobile  (script  and css) into our site master and update our DOCTYPE to the HTML5 DOCTYPE  leaving us with,&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%@ Master Language="C#" Inherits="System.Web.Mvc.ViewMasterPage" %&amp;gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&amp;lt;asp:ContentPlaceHolder&lt;/span&gt; &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;"TitleContent"&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;    
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%=Url.Content("&lt;/span&gt;&lt;span class="err"&gt;~/&lt;/span&gt;&lt;span class="na"&gt;ClientBin&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;jquery&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;mobile-1&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;0a1&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;css&lt;/span&gt;&lt;span class="err"&gt;")&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;" rel="stylesheet" type="text/css" /&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%=Url.Content("&lt;/span&gt;&lt;span class="err"&gt;~/&lt;/span&gt;&lt;span class="na"&gt;ClientBin&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;jquery-1&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;4&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;3&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;js&lt;/span&gt;&lt;span class="err"&gt;")%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;" type="&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%=Url.Content("&lt;/span&gt;&lt;span class="err"&gt;~/&lt;/span&gt;&lt;span class="na"&gt;ClientBin&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;jquery&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;mobile-1&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;0a1&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;js&lt;/span&gt;&lt;span class="err"&gt;")%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;" type="&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;asp:ContentPlaceHolder&lt;/span&gt; &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;"MainContent"&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we need to tell jQuery Mobile how to layout the pages and mobilise.  This  isn't necessarily done in script as you might think.  jQuery Mobile makes use of  HTML5's data- attributes to identify how the page should be laid out and mark  areas to specific roles.&lt;/p&gt;&lt;p&gt;Index.aspx&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%@ Page Language="C#" MasterPageFile="~/Views/Shared/Site.Master" Inherits="System.Web.Mvc.ViewPage&lt;span class="nt"&gt;&amp;lt;IEnumerable&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;IGrouping&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;string&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="na"&gt;Kas&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;JQueryMobile&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WhosWho&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Models&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Entry&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt;" %&amp;gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%@ Import Namespace="Kainos.JQueryMobile.WhosWho.Models" %&amp;gt;
&lt;span class="nt"&gt;&amp;lt;asp:Content&lt;/span&gt; &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;"Content1"&lt;/span&gt; &lt;span class="na"&gt;ContentPlaceHolderID=&lt;/span&gt;&lt;span class="s"&gt;"TitleContent"&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Whos Who
&lt;span class="nt"&gt;&amp;lt;/asp:Content&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;asp:Content&lt;/span&gt; &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;"Content2"&lt;/span&gt; &lt;span class="na"&gt;ContentPlaceHolderID=&lt;/span&gt;&lt;span class="s"&gt;"MainContent"&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-role=&lt;/span&gt;&lt;span class="s"&gt;"page"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-role=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;   
            &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Whos Who&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-role=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;data-role=&lt;/span&gt;&lt;span class="s"&gt;"listview"&lt;/span&gt; &lt;span class="na"&gt;data-filter=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% foreach (IGrouping&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="na"&gt;Entry&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; group in Model){%&amp;gt;
                    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;data-role=&lt;/span&gt;&lt;span class="s"&gt;"list-divider"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=group.Key%&amp;gt;&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% foreach (Entry item in group){%&amp;gt;
                        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%=Url.Action("&lt;/span&gt;&lt;span class="na"&gt;About&lt;/span&gt;&lt;span class="err"&gt;",&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;Home&lt;/span&gt;&lt;span class="err"&gt;",&lt;/span&gt; &lt;span class="na"&gt;new&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id =&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="s"&gt;item.Id&lt;/span&gt; &lt;span class="err"&gt;})&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;"&amp;gt;
                                &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=item.Title %&amp;gt;
                            &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"ui-li-aside"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                                &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=item.InternalNo %&amp;gt;&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;       
                    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%} %&amp;gt;
                &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%} %&amp;gt;                               
            &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;        
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/asp:Content&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;About.aspx&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%@ Page Language="C#" MasterPageFile="~/Views/Shared/Site.Master" Inherits="System.Web.Mvc.ViewPage&lt;span class="nt"&gt;&amp;lt;Kas&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;JQueryMobile&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WhosWho&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Models&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Entry&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;" %&amp;gt;

&lt;span class="nt"&gt;&amp;lt;asp:Content&lt;/span&gt; &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;"Content1"&lt;/span&gt; &lt;span class="na"&gt;ContentPlaceHolderID=&lt;/span&gt;&lt;span class="s"&gt;"TitleContent"&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Model.Title%&amp;gt;
&lt;span class="nt"&gt;&amp;lt;/asp:Content&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;asp:Content&lt;/span&gt; &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;"Content2"&lt;/span&gt; &lt;span class="na"&gt;ContentPlaceHolderID=&lt;/span&gt;&lt;span class="s"&gt;"MainContent"&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-role=&lt;/span&gt;&lt;span class="s"&gt;"page"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-role=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;   
            &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Model.Title%&amp;gt;&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-role=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"background: url(&amp;lt;%=Url.Content("&lt;/span&gt;&lt;span class="err"&gt;~/&lt;/span&gt;&lt;span class="na"&gt;Images&lt;/span&gt;&lt;span class="err"&gt;/"&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="na"&gt;Model&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;PhotoLocation&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;) no-repeat top right"&amp;gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Model.Title%&amp;gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"mailto:&amp;lt;%=Model.Email%&amp;gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Model.Email%&amp;gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Model.InternalNo%&amp;gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Model.ExternalNo%&amp;gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Model.Room%&amp;gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                       
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/asp:Content&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So what have we added here? &lt;/p&gt;&lt;ul&gt;&lt;li&gt;data-roles - telling jQuery Mobile what each div actually represents e.g.     &lt;ul&gt;&lt;li&gt;page - a single view (a single html page can have multiple views)&lt;/li&gt;&lt;li&gt;header - the header of a page&lt;/li&gt;&lt;li&gt;content - the pages content&lt;/li&gt;&lt;li&gt;footer - the footer of a page&lt;/li&gt;&lt;li&gt;list-view - a special role to specifying  that the content is a list&lt;/li&gt;&lt;li&gt;list-divider - a divide for a list that doesn't do anything but look  different&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;data-filter - telling jQuery Mobile that it should provide filtering on this  view&lt;/li&gt;&lt;li&gt;ui-li-aside class identifies that this is some aside information for this  list item&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;And that is it.  We have taken a static site and without writing any code  (bar markup) created a mobile app.  Probably might be a good idea to include an  application cache manifest file as well so there is some semblance of offline  capability provided.  But that's for another day.&lt;/p&gt;&lt;p&gt;[[posterous-content:pJHwwsHHmrfAkJIJFkrp]]&lt;/p&gt;</content></entry><entry><title>ASP.NET MVC3 JsonValueProviderFactory</title><updated>Wed Oct 20 23:00:00 UTC 2010</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2010/10/20/asp-dot-net-mvc3-jsonvalueproviderfactory/"></link><id>urn:yobriefca-se:feed:post:ASP.NET MVC3 JsonValueProviderFactory</id><content type="html">
&lt;p&gt;&lt;a target="_blank" href="http://www.asp.net/mvc/mvc3"&gt;ASP.NET MVC 3&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Anyone who's been involved in an ASP.NET MVC project that is quite Ajax heavy  will probably have noticed that something was always missing.  Imagine this  front end scenario,&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% using (Html.BeginForm()) { %&amp;gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
        &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Html.LabelFor(m =&amp;gt; m.Username)%&amp;gt;
        &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Html.TextBoxFor(m =&amp;gt; m.Username)%&amp;gt;
    &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
        &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Html.LabelFor(m =&amp;gt; m.Password)%&amp;gt;
        &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Html.TextBoxFor(m =&amp;gt; m.Password)%&amp;gt;
    &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%} %&amp;gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"form"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;   
        &lt;span class="c1"&gt;// extract values to submit         &lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"[name=Username]"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"[name=Password]"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="nx"&gt;Username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;Password&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"action"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;contentType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'application/json; charset=utf-8'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                
            &lt;span class="nx"&gt;dataType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                
            &lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;handleLogin&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="c1"&gt;// stop form submitting&lt;/span&gt;
        &lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which posts to the following action&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="na"&gt;[HttpPost]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LoginModel&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do login&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Success&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;We have a login screen that is submitted via ajax.  Now this is quite a  contrived example (ideally you'd be performing a normal post via ajax in  this situation) but there are many instances where this sort practise would  apply (ExtJS' RESTful DataWriters for example). &lt;/p&gt;&lt;h2&gt;MVC 2&lt;/h2&gt;&lt;p&gt;In MVC 2 this wouldn't work immediately.  The default model binder in MVC 2  uses Request parameters to bind to model properties but in this case there are  none as the ajax content is the body of the request.&lt;/p&gt;&lt;p&gt;To accommodate this sort of request in MVC 2 we had to provide a custom model  binder that knows how to deal with JSON requests,&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JsonModelBinder&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IModelBinder&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="nf"&gt;BindModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ControllerContext&lt;/span&gt; &lt;span class="n"&gt;controllerContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ModelBindingContext&lt;/span&gt; &lt;span class="n"&gt;bindingContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;HttpRequestBase&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;controllerContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HttpContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;jsonStringData&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StreamReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InputStream&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;ReadToEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;JsonConvert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DeserializeObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonStringData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bindingContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelType&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And attribute our actions model argument telling it to use this binder,&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="na"&gt;[HttpPost]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;ModelBinder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JsonModelBinder&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;&lt;span class="n"&gt;LoginModel&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It'll do the job but it's incredibly messy. &lt;/p&gt;&lt;h2&gt;MVC 3&lt;/h2&gt;&lt;p&gt;MCV3 fills this gap thanks to the JsonValueProviderFactory.  The JVPF  operates at a higher level than a model binder.  Basically what it does when a  JSON request is received is that it pulls the values out of the JSON body as key  value pairs which means they are available to the model binders including the  default model binder.  No special wiring required, no custom model binders  (unless of course you want one) just out-of-the-box workingness!&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="na"&gt;[HttpPost]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LoginModel&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do login&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Success&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;I know most of this post was taken up by MVC2 specific implementation but  isn't that really the point?  MVC3 is a nice refinement of MVC2 there isn't  anything new exactly but the core stuff that is there has been made easier and  more configurable.&lt;/p&gt;</content></entry><entry><title>&lt; HEAD &gt;ache: Including JavaScript in ASP.NET Master Pages</title><updated>Mon Oct 18 23:00:00 UTC 2010</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2010/10/18/&lt;-head-&gt;ache-including-javascript-in-asp-dot-net-master-pages/"></link><id>urn:yobriefca-se:feed:post:&lt; HEAD &gt;ache: Including JavaScript in ASP.NET Master Pages</id><content type="html">
&lt;h2&gt;Problem&lt;/h2&gt;&lt;p&gt;Include a Javascript file in the head of of an ASP.NET WebForms Master Page whose src attribute should contain an absolute (from Application Root) path e.g.http://localhost:8080/js/jquery-1.3.2.js (single application server) or &lt;a href="http://localhost:8080/MyProject/js/jquery-1.3.2.js"&gt;http://localhost:8080/MyProject/js/jquery-1.3.2.js&lt;/a&gt; (multi application server).  Sounds simple enough but it's surprisingly difficult.&lt;/p&gt;&lt;h3&gt;Attempt 1: Use a fixed path. (Partial Success)&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;?/js/jquery-1.3.2.js?&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/NIApp/js/jquery-1.3.2.js"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While this "works" it isn't exactly the most resilient to server changes - what if we move to/from a single/multi application server?  We need to re-write all our URL's&lt;/p&gt;&lt;h3&gt;Attempt 2: Use Application Root Reference (~) (Fail)&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;?~/js/jquery-1.3.2.js?&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This just plain doesn't work because script tags do not get parsed by ASP page renderer so the URL doesn't get converted and what you see here is what you end up with on the page which obviously isn't correct.&lt;/p&gt;&lt;h3&gt;Attempt 3: Use Server Code (&amp;lt;%= %&amp;gt;) (Partial Success/Fail)&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;?&amp;lt;%=Page.ResolveUrl(?~/js/jquery-1.3.2.js?)%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=?&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;&lt;span class="o"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again this is going to fail in certain situations (but not all).  This will fail when your head tag has a runat="server" attribute present.  In some cases you can simply remove the attribute but if you are using the "out-of-the-box" CSS Themes/Skins you NEED this.&lt;/p&gt;&lt;h3&gt;Attempt 4: Use a Second &amp;lt;HEAD&amp;gt; Element (Partial Success)&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;?&amp;lt;%=Page.ResolveUrl(?~/js/jquery-1.3.2.js?)%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=?&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;&lt;span class="o"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt; 
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt; 
&lt;span class="nt"&gt;&amp;lt;head&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;?server?&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; ? &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will work as you would expect - the only problem is that it isn't valid Markup and will fail if you throw it through W3C Validators.&lt;/p&gt;&lt;h3&gt;Attempt 5: Add script tags "Outside" Head Element (Partial Success)&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;?server?&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; ? &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt; 
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;?&amp;lt;%=Page.ResolveUrl(?~/js/jquery-1.3.2.js?)%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=?&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;&lt;span class="o"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt; 
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again this will work the only problem is you can never guarantee another developer won't stick code (which is dependant on your global script) BEFORE your inclusion of said script which is a bit of a &amp;lt;head&amp;gt;ache (i.e. in the &amp;lt;head&amp;gt; element - get it?).&lt;/p&gt;&lt;h3&gt;Attempt 6: Insert Script Tags via MasterPage Page_Load Event (Success)&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Page_Load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;EventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;HtmlGenericControl&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HtmlGenericControl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Attributes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;javascript&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Attributes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ResolveUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;jquery&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1.3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;2.&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Controls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I suppose this is the first real successful attempt.  It does what it says by dynamically creating new Script tag element and inserting them to the top of &amp;lt;head&amp;gt;.  I inserted everything at the top of the head so no matter where people put their scripts it's going to have all global resources available.  The only problem with this is that EVERY Page_Load event is going to dynamically inject new Elements into the head and it's not exactly a very clean separation of mark-up and code.&lt;/p&gt;&lt;h3&gt;Attempt 7/Solution 1: Use Data Binding to Evaluate src Attribute (AKA The Holmes Technique)&lt;/h3&gt;&lt;p&gt;ASPX&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;    
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;?&amp;lt;%#&lt;/span&gt; &lt;span class="na"&gt;ResolveUrl&lt;/span&gt;&lt;span class="err"&gt;("~/&lt;/span&gt;&lt;span class="na"&gt;js&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;jquery-1&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;3&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;2&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;js&lt;/span&gt;&lt;span class="err"&gt;")%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="o"&gt;?&amp;gt;&lt;/span&gt;   &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;asp:ContentPlaceHolder&lt;/span&gt; &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;"head"&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/asp:ContentPlaceHolder&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jonny Holmes &lt;a href="http://leedumond.com/blog/the-controls-collection-cannot-be-modified-because-the-control-contains-code-blocks/"&gt;uncovered&lt;/a&gt; a more elegant solution to this issue and it is described above.  It gets around the issue of not being able to use &amp;lt;%= %&amp;gt; tags by using a Data Binding Expression.  And all you have to do is perform a DataBind() during the Page_Load event and you're sorted like &lt;a href="http://www.youtube.com/watch?v=e0Mzr_A-Q0I"&gt;Ebenezer&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Page_Load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;EventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Called for the javascript references in the header of the master page&lt;/span&gt;
    &lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataBind&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;Anyone got any other methods to do this?&lt;/p&gt;</content></entry><entry><title>Webforms &amp; jQuery: A Comparison</title><updated>Sun Oct 17 23:00:00 UTC 2010</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2010/10/17/webforms-and-jquery-a-comparison/"></link><id>urn:yobriefca-se:feed:post:Webforms &amp; jQuery: A Comparison</id><content type="html">&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;This one has been pulled from the archives but I still think it is quite relevant&lt;/em&gt;&lt;/p&gt;&lt;p&gt;I tend to be a bit picky when it comes to seeing what is generated by server-side technologies. The first thing I do when I write a page (JSP, ASPX – whatever) that uses some sort of tag library or user control is check the resultant HTML/CSS/Javascript. When it comes to ASPX's this has always been a major issue for me – the code it generates, the JS it pulls down, the amount of redundant traffic, the actual quality of the code – all of it annoys me. Just out of curiosity I wanted to do a “contrast and compare” study to see the differences between the DIY approach and using Webforms…&lt;/p&gt;&lt;p&gt;The use case for the study is simple&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A simple screen with a star rating (1-5)&lt;/li&gt;&lt;li&gt;User selects a rating by clicking a star&lt;/li&gt;&lt;li&gt;The result is posted back, via ajax, to the server&lt;/li&gt;&lt;li&gt;The front end is updated with message indicating the selection and the rating system is disabled&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Technologies Used&lt;/h2&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;h3&gt;Webforms&lt;/h3&gt;&lt;/td&gt;&lt;td&gt;&lt;h3&gt;    jQuery&lt;/h3&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;ASP.NET ScriptManager Control&lt;/p&gt;&lt;p&gt;ASP.NET Update Panel Control&lt;/p&gt;&lt;p&gt;ASP.NET Ajax Toolkit Star Rating Control&lt;/p&gt;&lt;p&gt;ASP.NET Label Control&lt;/p&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;    ASP.NET MVC Framework&lt;/p&gt;&lt;p&gt;    jQuery v1.3.2&lt;/p&gt;&lt;p&gt;    &lt;a href="http://www.fyneworks.com/jquery/star-rating/"&gt;jQuery Star Rating&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;There is not much really to draw from this table except for Webforms the majority of the technology is server-side whereas the jQuery stuff is more client side focused. This is one of the big arguments that people use when arguing about webforms. It's all server side work which reduces client side scripting – but that's a bit blind. It's server-side for the developer but the end code isn't any less client side (it's simply auto-generated).&lt;/p&gt;&lt;h2&gt;Development Effort Required&lt;/h2&gt;&lt;p&gt;I'm going to end up being biased on this. I am 10,000 times more familiar with the MVC paradigm and jQuery than I am with Webforms. Ultimately it took me about the same amount of time to knock up both applications. But here are some points to note.&lt;/p&gt;&lt;h3&gt;Webforms&lt;/h3&gt;&lt;p&gt;Drag and drop of all the controls to knock up a simple page. The bulk of the work came from my lack of understanding I guess. I initially stuck the Star Rating control on the page and set up the CSS Classes, this failed as I didn't have the ScriptManager control added to the page. The next issue I faced was that my server side code wasn't actually having any effect – I had to turn AutoPostBack on for it to work but this wasn't Ajax-y. I got around this by wrapping the code in an UpdatePanel.&lt;/p&gt;&lt;p&gt;[[posterous-content:bBdcwIItewquatsyfJyv]]&lt;/p&gt;&lt;p&gt;Default.aspx&lt;/p&gt;&lt;p&gt;[[posterous-content:vfJuAxpqzbFsFoFBFwAE]]&lt;/p&gt;&lt;p&gt;Default.aspx.cs  (Code Behind)&lt;/p&gt;&lt;h3&gt;jQuery&lt;/h3&gt;&lt;p&gt;I used ASP.NET MVC framework to generate my empty page, and controller. I then added a simple one liner Action to my controller to handle the Ajax response. I included jQuery and Star Rating (JS &amp;amp; CSS) to my page and 5 radio buttons that act as the star rating (automatic progressive enhancement) and wrote the initializer code for the star rating stuff. For me that was it – completely straight forward with little configuration.&lt;/p&gt;&lt;p&gt;[[posterous-content:xqpnygHdsdJiruvDqkpf]]&lt;/p&gt;&lt;p&gt;Index.aspx&lt;/p&gt;&lt;p&gt;[[posterous-content:kgpqwhjHGDbiqHJCCvCA]]&lt;/p&gt;&lt;p&gt;RatingController.cs&lt;/p&gt;&lt;h2&gt;Resultant Page Weight &amp;amp; Render Time&lt;/h2&gt;&lt;h3&gt;Webforms&lt;/h3&gt;&lt;p&gt;[[posterous-content:uCAmokcAGoyHstBqGxsj]]&lt;/p&gt;&lt;p&gt;Page Weight&lt;/p&gt;&lt;p&gt;[[posterous-content:nDxjAJoJDbwurDtdAnvx]]&lt;/p&gt;&lt;p&gt;Render Time&lt;/p&gt;&lt;h3&gt;jQuery&lt;/h3&gt;&lt;p&gt;[[posterous-content:cHfxHIJCwxwiGDCgCIuw]]&lt;/p&gt;&lt;p&gt;Page Weight&lt;/p&gt;&lt;p&gt;[[posterous-content:zsChEvClgasifCgquBpo]]&lt;/p&gt;&lt;p&gt;Render Time&lt;/p&gt;&lt;p&gt;Now the real differences are starting to show. The jQuery Solution is light years ahead when it comes to page weight (with marginally faster render times). It's also worth noting here that the Webform solution automatically used GZIP compression for it's scripts whereas the MVC didn't so the results are actually skewed in favour of Webforms (not that it makes a difference).&lt;/p&gt;&lt;p&gt;Here in lies one of my issues with the Webform solution – it pulls down the massive ASP.NET JavaScript framework even though it doesn't use 99.9% of it. jQuery is a complete framework but it's ethos is that it gives you the bare minimum set of tools to get the job done. Look at my code (both server side and client side) – is it at all complex? Not really.&lt;/p&gt;&lt;p&gt;One argument I guess you could use here is that as the page grows the Webform solution, because it has most of the scripts it needs, shouldn't grow much bigger, where as the jQuery solution will. I haven't tested this so I could be wrong but it's a valid argument. That said given any situation I'd be willing to bet I could at the very least match page weight and render time against any Webform solution using jQuery (and MVC).&lt;/p&gt;&lt;h2&gt;Server Responses&lt;/h2&gt;&lt;h3&gt;Webforms&lt;/h3&gt;&lt;p&gt;[[posterous-content:rChlEcegkzzzEgEkxiAc]]&lt;/p&gt;&lt;p&gt;Request Parameters&lt;/p&gt;&lt;p&gt;[[posterous-content:gIgansGldxpvrcfvkapa]]&lt;/p&gt;&lt;p&gt;Response Body&lt;/p&gt;&lt;h3&gt;jQuery&lt;/h3&gt;&lt;p&gt;&lt;img src="http://blogs.kainos.com/jameshu/files/2009/04/jquery-postparams.png" height="21" alt="jquery-postparams" width="70" /&gt;&lt;/p&gt;&lt;p&gt;Request Parameters&lt;/p&gt;&lt;p&gt;&lt;img src="http://blogs.kainos.com/jameshu/files/2009/04/jquery-postresponse.png" height="21" alt="jquery-postresponse" width="70" /&gt;&lt;/p&gt;&lt;p&gt;Response Body&lt;/p&gt;&lt;p&gt;Again there is a big difference here. Because a lot of stuff is automated on the Webform side there is a lot of configuration (Viewstate etc) that needs to be passed about. Even for this simple solution the overhead is considerable – Firefox is giving me traffic (response only sans headers) of 1 byte for jQuery and 3k for Webforms – now multiply that by 2 to roughly include the request as well.&lt;/p&gt;&lt;p&gt;Which is easier to understand here?&lt;/p&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;A lot of the arguments and observations brought up here aren't purely Webform vs jQuery related – a lot have to do with Client vs Server programming but they are still valid. I admit I have a firm grasp of client side coding so the choice for me is obvious but the results here speak for themselves – there is a considerable overhead involved in the Webform world that must be accepted if you want to be able to drag and drop controls and save possibly a small amount of development time.&lt;/p&gt;&lt;p&gt;I am in no way a veteran Webform developer and I am sure there are folks out there that could strip my example down to the bare minimum and get similar results and to them I open floor – bring it – I haven't begun!&lt;/p&gt;</content></entry><entry><title>Strong Typing vs. Magic Strings (Part II)</title><updated>Sun Oct 17 23:00:00 UTC 2010</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2010/10/17/strong-typing-vs-magic-strings-part-ii/"></link><id>urn:yobriefca-se:feed:post:Strong Typing vs. Magic Strings (Part II)</id><content type="html">
&lt;p&gt;One of the problems with ASP.NET MVC is it's use of magic strings in almost every facet of the architecture.  I've mentioned this &lt;a href="http://blogs.kainos.com/jameshu/2010/03/19/avoiding-magic-strings-in-mvc2/"&gt;before&lt;/a&gt; but I have a few other things I'd like to mention.  In my last post I used T4MVC to generate static classes that layer on top of the magic strings but if these don't generate when you want them to they become out of sync and break compile time checking.  One solution is to generate the "proxy" files one every save however if you have a large project this could be a bit of a pain.&lt;/p&gt;&lt;p&gt;Other solutions exist already.  MVC2 comes with strongly typed HtmlHelpers so which turns&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Html.TextBox("FullName")%&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Into,&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Html.TextBoxFor(m =&amp;gt; m.FullName)%&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Great - compile time checking and the ability to reflect things such as attribute for generating validation etc.  Problem is they didn't really do much else.  Controller methods still suffered from Magicstringitis.  RedirectToAction still needed magic strings for controller and action names and ModelState.AddModelError still needed string for property names.&lt;/p&gt;&lt;h2&gt;MvcContrib&lt;/h2&gt;&lt;p&gt;&lt;a href="http://mvccontrib.codeplex.com/Wikipage"&gt;MvcContrib&lt;/a&gt; offers a load of non-official but excellent extensions to MVC and one of the things that comes bundled with the build is a strongly typed RedirectToAction extension method.  This lets change this,&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RedirectToAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Index"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Home"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Into&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RedirectToAction&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HomeController&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;Yet again  - compile time checking, refactoring support and no magic strings - Win.  But that leaves one last thing that still bugs me - ModelState.AddModelError.  To add an error for a particualr property of your model you still need to do something like this...&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;ModelState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddModelError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Username"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Username is already in use"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;YAMS! Yet another magic string!&lt;/p&gt;&lt;h2&gt;DIY&lt;/h2&gt;&lt;p&gt;Seeing as I couldn't find a solution from my good friend Google I decided to see if I could do it myself.  Turns out it's bloody easy.  This extension method will allow us to get rid of magic strings when expecting to map to a property of a simple class (such as a model or DTO)&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;/// Adds a model error using strongly typed lambda expressions&lt;/span&gt;
&lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;AddModelError&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TModel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;ModelStateDictionary&lt;/span&gt; &lt;span class="n"&gt;modelState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;Expression&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ArgumentNullException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"method"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
 
    &lt;span class="n"&gt;MemberExpression&lt;/span&gt; &lt;span class="n"&gt;mce&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;MemberExpression&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;property&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mce&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;modelState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddModelError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And you can now call it like this...&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;ModelState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddModelError&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Username already in use"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Neat!&lt;/p&gt;&lt;p&gt;One more bit of proof that lambda expressions are awesome - true there is reflection involved so it's going to be slower than magic strings but in my daily use I haven't really noticed any performance hits so (thanks to Jeff Atwood @ &lt;a href="http://www.codinghorror.com"&gt;codinghorror.com&lt;/a&gt;) I can give it a "Works on my Machine" badge.&lt;/p&gt;&lt;p&gt;&lt;img title="6a0120a85dcdae970b0128776ff992970c-pi[1]" src="http://codinghorror.typepad.com/.a/6a0120a85dcdae970b0128776ff992970c-pi" border="0" height="193" alt="6a0120a85dcdae970b0128776ff992970c-pi[1]" width="200" /&gt;&lt;/p&gt;</content></entry><entry><title>Multi-Touch Reactive Extensions</title><updated>Sun Oct 17 23:00:00 UTC 2010</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2010/10/17/multi-touch-reactive-extensions/"></link><id>urn:yobriefca-se:feed:post:Multi-Touch Reactive Extensions</id><content type="html">
&lt;p&gt;Link: &lt;a href="http://msdn.microsoft.com/en-us/devlabs/ee794896.aspx"&gt;Reactive Extensions for .NET&lt;/a&gt;&lt;/p&gt;&lt;p&gt;It's been a while since I've played with MultiTouch functionality so I decided it was time to dust off the old TouchSmart and put it to good use.  The purpose wasn't to play with MultiTouch functionality but more to see how we could simplify managing isolated events using &lt;a href="http://msdn.microsoft.com/en-us/devlabs/ee794896.aspx"&gt;RX&lt;/a&gt;.  The MultiTouch API is good for this because by its very nature MultiTouch requires us to collect multiple events simultaneously and wire them up to create gestures.  Unfortunately the current iteration of MultiTouch API wrappers for Silverlight and WPF (&lt;a href="http://touch.codeplex.com/"&gt;touch&lt;/a&gt;, &lt;a href="http://miria.codeplex.com/"&gt;MIRIA&lt;/a&gt; etc) are quite basic and when working with custom gestures you are forced to introduce a lot of global code such as flags etc.  Not pretty!&lt;/p&gt;&lt;p&gt;Imagine the following scenario.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;2 touch points on screen (let call them HoldRight and HoldLeft).  Both expose 2 events Hold and Release&lt;/li&gt;&lt;li&gt;When a person presses and hold a finger over BOTH points trigger an event&lt;/li&gt;&lt;li&gt;If only one is being pressed and held do not fire the event&lt;/li&gt;&lt;li&gt;If the user lifts their finger or fingers off the points and repeats the process the event should fire again.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This is a fairly simple example but actually wiring this up requires the use of nasty global variables and a bit of repetition.  Here is a very quick implementation of this.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainPage&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UserControl&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;_rightHeld&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;_leftHeld&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MainPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;HoldLeft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Hold&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;HoldLeft_Hold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;HoldRight&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Hold&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;HoldRight_Hold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;HoldLeft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Release&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;HoldLeft_Release&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;HoldRight&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Release&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;HoldRight_Release&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
 
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;HoldRight_Release&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_rightHeld&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;DoCheck&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
 
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;HoldLeft_Release&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_leftHeld&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;DoCheck&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
 
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;HoldRight_Hold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;GestureHoldEventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_rightHeld&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;DoCheck&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
 
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;HoldLeft_Hold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;GestureHoldEventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_leftHeld&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;DoCheck&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
 
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;DoCheck&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_rightHeld&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;_leftHeld&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Fire the event&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;As you can see I have made use of 2 global variables a DoCheck method that checks if the 2 canvases are currently in a "held" state and fires the event if they are.  All the event handlers do nearly the same thing.  Sure I could refactor this to use maybe 2 event handlers and inspect the sender but that starts getting messy.&lt;/p&gt;&lt;h2&gt;Reactive Extensions to the Rescue!&lt;/h2&gt;&lt;p&gt;Reactive extensions let us "compose" events so we can pass them around and filter them like first class citizens.  Because of this we can actually create custom events by combining.  Tackling the same issue as above we can achieve the same functionality without the need for dodgy global vars and boilerplate code.  Lets look at the code first.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainPage&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UserControl&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MainPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// compose events&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;leftHold&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FromEvent&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GestureHoldEventArgs&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
            &lt;span class="n"&gt;HoldLeft&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Hold"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;rightHold&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FromEvent&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GestureHoldEventArgs&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
            &lt;span class="n"&gt;HoldRight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Hold"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;rightRelease&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ObservableEx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FromMultiTouchReleaseEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HoldRight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;leftRelease&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ObservableEx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FromMultiTouchReleaseEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HoldLeft&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 
        &lt;span class="c1"&gt;// subscribe to dual hold event&lt;/span&gt;
        &lt;span class="n"&gt;leftHold&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rightHold&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;// listen until either release triggered&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TakeUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leftRelease&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Amb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rightRelease&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="c1"&gt;// trigger the event&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* trigger event */&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
 
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ObservableEx&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IObservable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IEvent&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;EventArgs&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;FromMultiTouchReleaseEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;TCanvas&lt;/span&gt; &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FromEvent&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TCanvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReleaseHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;EventArgs&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
                &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TCanvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReleaseHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
                &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Release&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Release&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First things first for some random reason the implementers of MIRIA decided to create en event the actually passed NO event args - this is not normal and could easily be considered and anti-pattern.  Because of this I had to use the long winded Observable.FromEvent which is created as a helper method.&lt;/p&gt;&lt;p&gt;So what are we doing here?&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Compose our events into first class citizens - Observables&lt;/li&gt;&lt;li&gt;Zip left and right hold events.  Zipping basically combines 2 Observables and publishes or emits a value when both observables have emitted a value.  The second argument in Zip is the transform function that converts the 2 emitted values into 1 value.  We don't care about this value so just return some arbitrary value.&lt;/li&gt;&lt;li&gt;Take the Zip generated observable and keep publishing it's values until Either the left or right release events are triggers (Amb = most ambitious - publishes first value to appear)&lt;/li&gt;&lt;li&gt;Subscribe to this super composed event.  When this happens we can fire our event&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;What actually happens on the front end is irrelevant (the solution looks like this and will spin when the two Thumb areas are pressed and held)&lt;/p&gt;&lt;p&gt;[[posterous-content:ECxarBiHmvIvJutnbJaJ]]&lt;/p&gt;&lt;p&gt;But the fact we have managed to combine 4 isolated events without having to use boilerplate is very nice.  This gives us a lot of power to create and control complex gestures - not limited to MultiTouch but any sort of UI interactions (Mouse events, Web service calls etc).&lt;/p&gt;&lt;p&gt;&lt;em&gt;* I'll keep saying this.  RX doesn't do anything new or solve any unsolvable problems but what it does do is allow us to do things in a neater way.  Now there is a bit of learning curve in it - you really need to start thinking in RX but once you wrap your head around RX is a nice tool to have on your tool belt.  No it's not complexity for complexity's sake - I honestly believe the code above, when used in the real world, will hep reduce complexity and make maintenance easier.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Good Fortune Awaits!&lt;/p&gt;</content></entry><entry><title>T4MVC: Strong Typing vs Magic Strings</title><updated>Sun Oct 17 23:00:00 UTC 2010</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2010/10/17/t4mvc-strong-typing-vs-magic-strings/"></link><id>urn:yobriefca-se:feed:post:T4MVC: Strong Typing vs Magic Strings</id><content type="html">
&lt;p&gt;Magic strings are everywhere in ASP.NET MVC 2.  Less so than in version 1 and some of the Beta and RC releases but there are still some kicking around.  The problem with literals is that they don't give you any compile time error checking or refactoring ability.  Say for example you have an action link that points you to the Edit action of the Person controller - you write it like this.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%=Html.ActionLink("Edit", "Person", new { id = 12 }) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now image you've written something like this over numerous pages and all of sudden you change the name of the Action or the Controller.  These are literal strings so you can't use the refactor tools in VS or get any compile time error when you build.  The only real way to ensure everything has been changed would be to do a quick regression test.  Nightmare.&lt;/p&gt;&lt;h2&gt;&lt;a href="http://mvccontrib.codeplex.com/wikipage?title=T4MVC&amp;amp;referringTitle=Documentation"&gt;T4MVC&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;T4MVC makes use of the Visual Studio bundled T4 Text Template Transform Toolkit (Template based code generation tool) to generate invisible classes that give you strongly typed links to Controllers, Actions, Views and even JavaScript, CSS, Images and other static links.&lt;/p&gt;&lt;p&gt;T4MVC is part of the MVCContrib project (though completely standalone).  You simply download the zip with the 2 T4 files and add them to the root of your MVC project and you are done.  Here are some examples of it in action.&lt;/p&gt;&lt;h3&gt;VIEW NAMES&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% Html.RenderPartial("DinnerForm"); %&amp;gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% Html.RenderPartial(MVC.Dinners.Views.DinnerForm); %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And within a controller&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;View&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"InvalidOwner"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;View&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InvalidOwner&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;CONTROLLER ACTIONS&lt;/h3&gt;&lt;p&gt;&lt;span style="font-weight: normal;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= Html.ActionLink("Delete Dinner", "Delete", "Dinners", new { id = Model.DinnerID }, null)%&amp;gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= Html.ActionLink("Delete Dinner", MVC.Dinners.Delete(Model.DinnerID))%&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;h3&gt;STATIC FILES&lt;/h3&gt;&lt;p&gt;You also get the ability to reference static files so that if they are moved or renamed you'll not be missing images etc. - something that is a pain to test most times.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/Content/nerd.jpg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%= Links.Content.nerd_jpg %&amp;gt;"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;Another nicety is that you also get this for JavaScript files but without having to do anything it will swap out debug (uncompressed) versions of you files for minified versions when you move into production.  As long as you have &amp;lt;filename&amp;gt;.js and &amp;lt;filename&amp;gt;-min.js side by side it will determine which one to use based on the build environment.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/Scripts/Map.js"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%= Links.Scripts.Map_js %&amp;gt;"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;h3&gt;Summing Up&lt;/h3&gt;&lt;p&gt;T4MVC is a nice tool to get around magic strings.  There are other things out there that give "fluent" syntax to methods that use literals which use delegates instead of generating any sort of proxy classes.  Which is better is a question I still can't answer confidently.  I have had some minor issues using T4MVC (mostly my fault) and I am a bit dubious about the syntax for static files but it's a decent starter for 10 and doesn't need any thought to implement and use.  Of course you could also roll own specific T4 template (or extend T4MVC) but that obviously requires a bit more work.&lt;/p&gt;</content></entry><entry><title>ASP.NET MVC 3 Preview 1 First Look</title><updated>Tue Jul 27 23:00:00 UTC 2010</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2010/07/27/asp-dot-net-mvc-3-preview-1-first-look/"></link><id>urn:yobriefca-se:feed:post:ASP.NET MVC 3 Preview 1 First Look</id><content type="html">
&lt;p style="margin-right: 0cm; margin-bottom: 16.5pt; margin-left: 0cm; line-height: 16.5pt; vertical-align: baseline;"&gt;&lt;span style="font-size: 11.5pt; font-family: Georgia,serif; color: #333333;"&gt;[[posterous-content:6xLmqhke9CMHGNqiaUG7]]&lt;/span&gt;&lt;span style="font-size: 11.5pt; font-family: Georgia,serif; color: #333333;"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;A much better read than the ramblings below:&lt;br /&gt;&lt;a href="http://weblogs.asp.net/scottgu/archive/2010/07/27/introducing-asp-net-mvc-3-preview-1.aspx"&gt;http://weblogs.asp.net/scottgu/archive/2010/07/27/introducing-asp-net-mvc-3-preview-1.aspx&lt;/a&gt;&lt;/p&gt;&lt;p&gt;So I had a chance to take ASP.NET MVC 3 Preview 1 out for a test drive today to see what was new and interesting.  For a Preview release it seems fairly solid - there is a lot of low level stuff introduced (new Interfaces etc) which is, I assume, going be used to add new features in Preview 2, 3, 4 whatever.  There is nothing MASSIVE per say in fact it really feels like the next logical step in the MVC roadmap rather than some crazy reimagining.  That's good by the way - backwards compatibility maintained and life goes on as normal.  The most obvious "issue" I have with this release is that it's NET4/VS2010 only which means if it came out tomorrow we'd probably not have the choice of making use of it due to the snails pace of the "enterprise".  Anyways enough preamble, down to the juicy stuff - what's this release giving us?&lt;/p&gt;&lt;h2&gt;Razor&lt;/h2&gt;&lt;p&gt;Preview 1 introduces Microsofts new ViewEngine, Razor, to the MVC world (WebMatrix aside).  Currently there is no syntax highlighting/intellisense for it but it'll still compile and generate views just fine.  I don't want to dive into Razor in this post but it's a weird syntax.  It's certainly feels much neater than the WebForms View Engine and for a weird reason it felt quite natural to use it - want to embed some serverside code?  Just type @ and you drop into serverside mode but with the advantage of actually still being able to embed HTML content without having to escape it.  The render just knows.  It's strange but good.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;@inherits System.Web.Mvc.WebViewPage&lt;span class="nt"&gt;&amp;lt;Models&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Person&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
@{
    View.Title = "Home Page";
    LayoutPage = "~/Views/Shared/_Layout.cshtml";
}

&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    @Html.ValidationSummary()
    @{Html.EnableClientValidation();}
    @using(Html.BeginForm()){
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Name:&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        @Html.TextBoxFor(p =&amp;gt; p.Name)
        &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;@Html.ValidationMessageFor(p =&amp;gt; p.Name)&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Submit"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    }
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Read more here: &lt;a href="http://weblogs.asp.net/scottgu/archive/2010/07/02/introducing-razor.aspx"&gt;http://weblogs.asp.net/scottgu/archive/2010/07/02/introducing-razor.aspx&lt;/a&gt;&lt;/p&gt;&lt;p&gt;On a side note when you create  a new view MVC 3 and VS2010 detects installed view engines so you can EASILY pick and choose which is very nice - though no ViewEngine currently supports this e.g.&lt;/p&gt;&lt;p&gt;[[posterous-content:Ryck0mqEkX92dSBGu1n4]]&lt;/p&gt;&lt;p&gt;Model Validation&lt;/p&gt;&lt;p&gt;There is some nice stuff in this area.  In MVC you where restricted to validating properties of a model (by default using data annotations) and if you wanted to validate entire models or perform validation in model scope (e.g. compare 2 fields) you had to write custom code.&lt;/p&gt;&lt;p&gt;MVC3 provides model-level validation in 2 ways,&lt;/p&gt;&lt;p style="" class="MsoListParagraph"&gt;&lt;span style=""&gt;1.&lt;span style="font: 7.0pt Times New Roman;"&gt;       &lt;/span&gt;&lt;/span&gt;Using Validation Attributes&lt;/p&gt;&lt;p style="" class="MsoListParagraph"&gt;&lt;span style=""&gt;2.&lt;span style="font: 7.0pt Times New Roman;"&gt;       &lt;/span&gt;&lt;/span&gt;Using the new data annotations interface IValidateObject&lt;/p&gt;&lt;p&gt;Validation attributes are the same attributes that the default validation strategy currently uses except you now have access to the model and ValidationResult has been tweaked to allow broken rules to be bound to multiple fields e.g.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PasswordsMustMatchAttribute&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ValidationAttribute&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;ValidationResult&lt;/span&gt; &lt;span class="nf"&gt;IsValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ValidationContext&lt;/span&gt; &lt;span class="n"&gt;validationContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;validationContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ObjectInstance&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Password&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PasswordConfirm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ValidationResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Success&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ValidationResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;"Password and Password Confirmation must match"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"Password"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"PasswordConfirm"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;IValidateObject interface is the new way to provide validation of a Model object across all MS technologies (EntityFramework, DynamicData, Silverlight and ADO Data Services) and it behaves much better than the decoupled attribute stuff - at least in the preview.&lt;/p&gt;&lt;p&gt;If model implement the IValidateObject interface they are expected to implement the validate(ValidationContext context) method which returns an enumerable of ValidationResults.  The Person model in my sample app gives an example of this,&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IValidatableObject&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Nickname&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Password&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;PasswordConfirm&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Age&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ValidationResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;ValidationContext&lt;/span&gt; &lt;span class="n"&gt;validationContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nickname&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ValidationResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s"&gt;"Name and Nickname cannot be the same"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Nickname"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Global Filters&lt;/h2&gt;&lt;p&gt;More of a convenience than anything, global filters allow you to apply the same Action Filters to EVERY controller action within an application.  Useful for all tha AOP style stuff like logging etc.  Taking the new KDF Action Logger we can log every action invocation by pushing the attribute type into the global filters via global.asax like so,&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="n"&gt;GlobalFilters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Filters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;LoggingFilter&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;Thats it really.  Nice and convenient.&lt;/p&gt;&lt;h2&gt;Json Model Binding&lt;/h2&gt;&lt;p&gt;Typically model bindng is done through creating an new instance of the model and attempting to bind up properties against the names of the values submitted by the client.  This doesn't really work in the Ajax world because the body of a POST request is generally a single unnamed parameter which represents a JSON encoded string of the client request data.  In MVC2 we had to write custom binders to parse the string and bind to a model but in MVC3 this is provided automatically.  Again another nice to have.&lt;/p&gt;&lt;h2&gt;Other stuff&lt;/h2&gt;&lt;p style="" class="MsoListParagraph"&gt;&lt;span style="font-family: Symbol;"&gt;&lt;span style=""&gt;·&lt;span style="font: 7.0pt Times New Roman;"&gt;         &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;Dynamic ViewModel  - Simply a dynamic bag allowing us to use ViewModel.SomeProperty vs ViewData["SomeProperty"]&lt;/p&gt;&lt;p style="" class="MsoListParagraph"&gt;&lt;span style="font-family: Symbol;"&gt;&lt;span style=""&gt;·&lt;span style="font: 7.0pt Times New Roman;"&gt;         &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;New hooks for IoC/Dependency Injection through the lifecycle&lt;/p&gt;&lt;p style="" class="MsoListParagraph"&gt;&lt;span style="font-family: Symbol;"&gt;&lt;span style=""&gt;·&lt;span style="font: 7.0pt Times New Roman;"&gt;         &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;New ways to expose Client Validation and Model Metadata which "should" allow an easier way to create a single point of validation that can be used across both client and server&lt;/p&gt;&lt;p style="" class="MsoListParagraph"&gt;&lt;span style="font-family: Symbol;"&gt;&lt;span style=""&gt;·&lt;span style="font: 7.0pt Times New Roman;"&gt;         &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;New view results - HttpStatusCodeResult and Permanent Redirects&lt;/p&gt;&lt;h2&gt;Summing up&lt;/h2&gt;&lt;p&gt;MVC3 Preview 1 is a solid enough release but ultimately it seems to be a foundation, albeit a solid one.  Given the previous release schedule I expect another release within the next few months.  What can we expect for future releases?  See &lt;a href="http://aspnet.codeplex.com/wikipage?title=Road%20Map&amp;amp;referringTitle=MVC"&gt;here&lt;/a&gt;.&lt;/p&gt;</content></entry><entry><title>.less - Dynamic CSS for .NET</title><updated>Mon Nov 23 00:00:00 UTC 2009</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2009/11/23/dot-less-dynamic-css-for-net/"></link><id>urn:yobriefca-se:feed:post:.less - Dynamic CSS for .NET</id><content type="html">
&lt;p&gt;Link: &lt;a href="http://www.dotlesscss.com/"&gt;http://www.dotlesscss.com/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;There is a &lt;a href="http://lesscss.org/"&gt;Ruby library (LESS)&lt;/a&gt; that gets a fair bit of buzz in Ruby circles.  It's purpose is to introduce the &lt;a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself"&gt;DRY principle&lt;/a&gt; into CSS but also adds a lot of other useful features.  Well now there is a &lt;a href="http://www.dotlesscss.com/"&gt;.NET port&lt;/a&gt; of it - so what can it do (ripped from the original page as this pretty much sums it up)?&lt;/p&gt;&lt;h2&gt;Variables&lt;/h2&gt;&lt;p&gt;Variables allow you to specify widely used values in a single place, and then re-use them throughout the style sheet, making global changes as easy as changing one line of code.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;@brand_color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;#4D926F&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nf"&gt;#header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;brand_color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;brand_color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;And variables are a god-send in CSS world though other people disagree (&lt;a href="http://www.w3.org/People/Bos/CSS-variables" rel="nofollow"&gt;http://www.w3.org/People/Bos/CSS-variables&lt;/a&gt;) - but at least this is still generating plain old CSS for consumption&lt;/p&gt;&lt;h2&gt;Mixins&lt;/h2&gt;&lt;p&gt;Mixins allow you to embed all the properties of a class into another class by simply including the class name as one of its properties. It's just like variables, but for whole classes.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nc"&gt;.rounded_corners&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;moz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;webkit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rounded_corners&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#footer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rounded_corners&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Operations&lt;/h2&gt;&lt;p&gt;Are some elements in your style sheet proportional to other elements? Operations let you add, subtract, divide and multiply property values and colors, giving you the power to do create complex relationships between properties.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;@the-border&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@base-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;#111&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nf"&gt;#header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;border-left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;border-right&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;border&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#footer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;#111&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Operations are "OK" i guess but I am not sold on them.&lt;/p&gt;&lt;h2&gt;Nesting&lt;/h2&gt;&lt;p&gt;Rather than constructing long selector names to specify inheritance, in Less you can simply nest selectors inside other selectors. This makes inheritance clear and style sheets shorter.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nf"&gt;#header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="k"&gt;text-decoration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I like the nesting as it moves the structure closer to the nexted DOM tree format that you are actually trying to map against&lt;/p&gt;&lt;h2&gt;Compression &amp;amp; Caching&lt;/h2&gt;&lt;p&gt;Now you can configure if you enable Caching and minifying or the CSS output.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;dotless&lt;/span&gt; 
    &lt;span class="na"&gt;minifyCss=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; 
    &lt;span class="na"&gt;cacheEnabled=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It's still in beta and I haven't had a chance to properly tinker with it but it's a great idea as CSS bloat is something that is often overlooked and can make rebranding a nightmare if not carefully managed.  I might post more on this when I get a chance to have proper play with it.&lt;/p&gt;</content></entry><entry><title>LINQPad: Don't let the name fool you</title><updated>Tue Aug 25 23:00:00 UTC 2009</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2009/08/25/linqpad-dont-let-the-name-fool-you/"></link><id>urn:yobriefca-se:feed:post:LINQPad: Don't let the name fool you</id><content type="html">&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.linqpad.net/"&gt;LINQPad Website&lt;/a&gt;&lt;/p&gt;&lt;p&gt;I've been playing with this little app for a few days now and it's exactly what I was looking for. For the last few years I was knee deep in the crazy world of Java and in my never ending attempt to be different I researched Groovy quite a bit. One of the things that came with the installation of Groovy was a console that let me write off the cuff Groovy or Java statements without having to fire up an editor and stick all that public static void main(string[] args) boilerplate around my code, compile it and run it. I used this console a lot when debugging little bits of code, testing theories, seeing a dump of an object etc and it sped up my development no end. Since getting involved in the .NET world any time I've wanted to write small test apps I've had to either create a new Unit Test or new Console Application and it's a lot slower to do achieve the same results.&lt;/p&gt;&lt;p&gt;This is where LINQPad comes in. LINQPad lets you write C# (and VB) statements, expressions, programs etc and evaluates them as they are without having to write a lot of boilerplate. If your code returns an Object it can be dumped in a very neat fashion into the output window along with the generated IL and some other stuff. LINQPad, as the name suggests also lets you hook up to SQL Server, the Entity Framework, Attachable Databases etc and perform LINQ Queries, showing you the generated SQL as well.&lt;/p&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;LINQPad reports the execution time in the status bar, so you won't have to manually create a Stopwatch class for performance testing.&lt;/li&gt;&lt;li&gt;Want to test a variation of your snippet? Ctrl+Shift+C instantly clones your snippet so you can run another version side-by-side.&lt;/li&gt;&lt;li&gt;You can return to saved queries in single click, thanks to the My Queries treeview. Some people are using LINQPad as a scripting tool!&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;The licensed version gives you full Intellisense for your code plus 2 books worth (C# in a Nutshell and LINQ in Action) of working samples. Anyways here are a few screenshots of it in action. Like I said the name nearly made me skip over it but luckily I decided to try it and found what I was after!&lt;/p&gt;&lt;p&gt;[[posterous-content:HEtroelnwcgbGuFkaJnG]]&lt;/p&gt;</content></entry><entry><title>UpdatePanels &amp; Alternatives</title><updated>Tue Apr 14 23:00:00 UTC 2009</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2009/04/14/updatepanels-and-alternatives/"></link><id>urn:yobriefca-se:feed:post:UpdatePanels &amp; Alternatives</id><content type="html">
&lt;p&gt;&lt;/p&gt;&lt;p&gt;I'm not sold on ASP.NET UpdatePanels. Conceptually they are quite nice but their implementation is nasty. So much so I'd be happy to say the should be considered an anti-pattern. My reasons? Well...&lt;/p&gt;&lt;ul&gt;&lt;li&gt;They generate too much JavaScript&lt;/li&gt;&lt;li&gt;It's too "development focused" - it puts saving time ahead of a clean performant solution&lt;/li&gt;&lt;li&gt;Ajax calls should be data focused (returning XML, JSON etc), UpdatePanels are content focused&lt;/li&gt;&lt;li&gt;Generates a massive amount of network traffic in comparison to alternative solutions (including ViewState and markup)&lt;/li&gt;&lt;li&gt;UpdatePanels use innerHTML to replace contents which orphans bound events (leakage) that need to be rebound each time (extra work).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;But what are the alternatives? Page Methods and Scripted Services are a good starting point. The good things about these alternatives is that they are lightweight - they send JSON data to and from the server so your network traffic is greatly reduced. Here is a simple example of using a page method - I'll not cover Scripted Services as they are very similar and you can find info about them on the net.&lt;/p&gt;&lt;p&gt;In your code behind you can add a [WebMethod] attributed method&lt;/p&gt;&lt;div&gt;&lt;span style="font-size: small;"&gt;&lt;span&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Web.Services&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;WebformControls&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PageMethods&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Web&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;        
&lt;span class="na"&gt;        [WebMethod]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;GetCurrentDateTime&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;p&gt;And turn on EnablePageMethods attribute of the pages ScriptManager&lt;/p&gt;&lt;div&gt;&lt;span style="font-size: small;"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/1999/xhtml"&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"form1"&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;asp:ScriptManager&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt; &lt;span class="na"&gt;EnablePageMethods=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/asp:ScriptManager&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;What happens next is that when the page is rendered a JavaScript Proxy Class will be generated called PageMethods that contains a function call GetCurrentDateAndTime. It'll look something like this.&lt;/p&gt;&lt;div&gt;&lt;span style="font-size: small;"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;PageMethods&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;PageMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initializeBase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_userContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_succeeded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_failed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;PageMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;_get_path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get_path&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;PageMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_staticInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get_path&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;GetCurrentDateTime&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;succeededCallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;failedCallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;/// &lt;/span&gt;
        &lt;span class="c1"&gt;/// &lt;/span&gt;
        &lt;span class="c1"&gt;/// &lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_get_path&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;'GetCurrentDateTime'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="nx"&gt;succeededCallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;failedCallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;PageMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/PageMethods.aspx"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;PageMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GetCurrentDateTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onFailed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;/// &lt;/span&gt;
    &lt;span class="c1"&gt;/// &lt;/span&gt;
    &lt;span class="c1"&gt;/// &lt;/span&gt;
    &lt;span class="nx"&gt;PageMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_staticInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GetCurrentDateTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onFailed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Now all we have to do is use it. This is easy...&lt;/p&gt;&lt;div&gt;&lt;span style="font-size: small;"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/1999/xhtml"&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;PageMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GetCurrentDateTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"results"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"form1"&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;asp:ScriptManager&lt;/span&gt; &lt;span class="na"&gt;runat=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt; &lt;span class="na"&gt;EnablePageMethods=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/asp:ScriptManager&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"getDate()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Get Date!&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"results"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;That wasn't too difficult now was it? But we aren't done yet. Sure this solution works but there is still one problem - We are including the ScriptManager in our page which means event though all we are doing is getting a date back from the server we are still required to pull down at least 160k (in it's most compressed &amp;amp; gzipped form) of framework 90% of which we aren't even going to use.&lt;/p&gt;&lt;h3&gt;Calling PageMethods and ScriptedServices using jQuery&lt;/h3&gt;&lt;p&gt;Obviously a request from client to server is always done through HTTP it doesn't actually matter how it is handled on the client. So it's easy to swap out the ASP.NET Ajax framework for jQuery. You'll probably be asking why? Well the long and short of it is that regardless of what the requirements say you (or someone else on the project) WILL end up writing Javascript and jQuery is the better choice...&lt;/p&gt;&lt;ul&gt;&lt;li&gt;It's a better, smaller, compact and faster framework&lt;/li&gt;&lt;li&gt;It's much better documented and easier to learn&lt;/li&gt;&lt;li&gt;It's extensible via plugins so you don't need the whole "kitchen sink" to do simple things&lt;/li&gt;&lt;li&gt;It can do everything ASP.NET Ajax can do&lt;/li&gt;&lt;li&gt;It's technology agnostic so you can jump to a Java project and use the same solutions&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I could go on, honestly I could, but that's not what this post is about. There are a few nuances in calling PageMethods and ScriptedServices, namely&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The request content-type must be &lt;code&gt;application/json; charset=utf-8&lt;/code&gt;&lt;/li&gt;&lt;li&gt;The request must be a POST request&lt;/li&gt;&lt;li&gt;Data sent to the server must be encoded as a JSON string or "{}" if empty&lt;/li&gt;&lt;li&gt;Standard ASP.NET JSON serialization doesn't convert DateTime to a proper JSON date&lt;/li&gt;&lt;li&gt;The JSON data in the request must map directly to arguments of the function&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Failure to comply with any of the above will result in either a security error or, usually, the entire page being rendered back to the response. So calling the above PageMethod using jQuery is as simple as this....&lt;/p&gt;&lt;div&gt;&lt;span style="font-size: small;"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"PageMethods.aspx/GetCurrentDateTime"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;contentType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"application/json; charset=utf-8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;dataType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'#result'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Not bad, but there is a lot of boiler plate code there. Thankfully it's easy to write a jQuery plugin to abstract out most of this and make the calls simple. So all in all even with the 2 plugins (JSON and .Net Services) and the jQuery framework we are only forced to pull down 60k of scripts (minified but NOT gzipped) so you could see this reduced to 25-30k all in with gzipping turned on.&lt;/p&gt;</content></entry></feed>