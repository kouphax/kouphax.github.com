<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><id>urn:yobriefca-se:feed:ruby</id><updated>Sun Jul 08 00:00:00 UTC 2012</updated><title type="text">Yo! Briefcase: ruby</title><link rel="self" href="https://yobriefca.se/feed/ruby.xml"></link><entry><title>Ruby by Example</title><updated>Sun Jul 08 00:00:00 UTC 2012</updated><author><name>James Hughes</name></author><link href="/presentations/ruby.pdf"></link><id>urn:yobriefca-se:feed:post:Ruby by Example</id><content type="html"></content></entry><entry><title>Ruby on Rails</title><updated>Sun Jul 08 00:00:00 UTC 2012</updated><author><name>James Hughes</name></author><link href="/presentations/rails.pdf"></link><id>urn:yobriefca-se:feed:post:Ruby on Rails</id><content type="html"></content></entry><entry><title>Strapping Young Lad v0.1.2 Released</title><updated>Thu Apr 19 23:00:00 UTC 2012</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2012/04/19/strapping-young-lad-v0-dot-1-2-released/"></link><id>urn:yobriefca-se:feed:post:Strapping Young Lad v0.1.2 Released</id><content type="html">&lt;p&gt;I have just released version 0.1.2 of &lt;a href="https://github.com/kouphax/strapping-young-lad"&gt;Strapping Young Lad&lt;/a&gt;. Now we are getting to something that works a bit better across different platforms (now I just have to prove it to you). This release sees the inclusion of multiple token replacement. For example if I create a &lt;code&gt;.ladconfig&lt;/code&gt; in the source repo with an array of tokens&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;token: ['__NAME__', '__NAMESPACE__', '__AUTHOR__']
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The user will be prompted to specify the values for these tokens before the engine goes off and does the replacement. The &lt;code&gt;__NAME__&lt;/code&gt; token is a bit special - you still need to specify the project name as part of the command line call so if SYL come across this token in the the list of configured tokens it will allow you to default that value without having to type it again, e.g.&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;lad git@github.com:strapping-young-lad/Loam.git laddy

  Cloning git repository                OK
  Loading configuration                 OK
  Parsing tokens and stuff              
    name (laddy): 
    namespace: test.lad
    author: kouphax
                                        OK
  Processing files                      OK
  Processing directories                OK
  Moving project files                  OK

  Done processing 137 file(s)
  Done processing 22 directories(s)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice I didn't need to specify the name of the project again and then I was prompted for the second and third token values. Simple stuff. &lt;/p&gt;&lt;h2&gt;Next up&lt;/h2&gt;&lt;p&gt;So there are a few outstanding efforts to go in now. Namely push some more templates into the SYL repo and spin up a site that lets you search said templates and document all the little features of SYL. They will come in time.&lt;/p&gt;&lt;p&gt;This is the life!&lt;/p&gt;</content></entry><entry><title>Strapping Young Lad - Project Template Token Replacer and Bootstrapper</title><updated>Mon Apr 16 23:00:00 UTC 2012</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2012/04/16/strapping-young-lad-project-template-token-replacer-and-bootstrapper/"></link><id>urn:yobriefca-se:feed:post:Strapping Young Lad - Project Template Token Replacer and Bootstrapper</id><content type="html">&lt;p&gt;Today I have released the super simple, rough-as-hell, barely &lt;a href="http://en.wikipedia.org/wiki/Minimum_viable_product"&gt;MVP&lt;/a&gt; &lt;a href="https://rubygems.org/gems/lad"&gt;Strapping Young Lad&lt;/a&gt;(&lt;a href="https://github.com/kouphax/strapping-young-lad"&gt;Source&lt;/a&gt;). It's fulfils a need I keep having but never really fixing. &lt;/p&gt;&lt;h2&gt;Evelvator Pitch&lt;/h2&gt;&lt;p&gt;SYL, or lad for short, will take a git repo, clone it and replace a bunch of tokens in it with the values you've supplied. &lt;/p&gt;&lt;h2&gt;Say Wha?&lt;/h2&gt;&lt;p&gt;This means you can create a bunch of base solution/project types for any language and SYL will simply do some basic file/folder renaming and file content replacing for a given token. For example doing the following,&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;lad /path/to/git/repo MyNewProject
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Will do the following things,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Clone the repo at &lt;code&gt;path/to/git/repo&lt;/code&gt; into a temporary folder&lt;/li&gt;
  &lt;li&gt;Remove the &lt;code&gt;.git&lt;/code&gt; folder from the repo&lt;/li&gt;
  &lt;li&gt;Check for the existence of a &lt;code&gt;.ladconfig&lt;/code&gt; in the freshly cloned repo&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
  &lt;li&gt;If one exists it loads the config setting&lt;/li&gt;
  &lt;li&gt;Otherwise it falls back to the defaults&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
  &lt;li&gt;Replace all instances of the configured token (eg. &lt;code&gt;__NAME__&lt;/code&gt;) in all files, directories and file contents with the project name (in our case &lt;code&gt;MyNewProject&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Copy the new folder over to your current working directory (&lt;code&gt;./MyNewProject&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;What this allows you to do is have a standard project template for pretty much anything (.NET, Ruby, Scala - listen I mean anything - if it a collection of folders and files in a git repo then you set) and create a new instance with a few keystrokes - saving you time and potential RSI.&lt;/p&gt;&lt;p&gt;SYL was inspired by &lt;a href="https://github.com/chucknorris/warmup"&gt;WarmuP&lt;/a&gt; which is itself a gem but it requires you to be running .NET which for a lot of my requirement isn't going to cut it.&lt;/p&gt;&lt;p&gt;If you want to see what a typical template project looks like try &lt;a href="https://github.com/amirrajan/Loam"&gt;Amir's Loam repo&lt;/a&gt;. This is a WarmuP project but works just fine. With SYL you can create a &lt;code&gt;.ladconfig&lt;/code&gt; file to override some of the conventions - get the source README linked above.&lt;/p&gt;&lt;h2&gt;Whats Next&lt;/h2&gt;&lt;p&gt;Yep it's pretty damn basic right now but it satifies most of my needs right now. There are a few things I want to add for myself but I didn't release this for ME, I am pretty sure this will be of use to someone in some community in some shape or form. With that in mind here are some features I think would take this to the next level,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Specifiying multiple tokens e.g. &lt;code&gt;__NAME__&lt;/code&gt; and &lt;code&gt;__NAMESPACE__&lt;/code&gt; and &lt;code&gt;__YEAR__&lt;/code&gt; etc. etc.&lt;/li&gt;
  &lt;li&gt;Post processing actions (e.g. &lt;code&gt;bundle install&lt;/code&gt; or &lt;code&gt;npm install&lt;/code&gt; or &lt;code&gt;sbt compile&lt;/code&gt; or something like that)&lt;/li&gt;
  &lt;li&gt;A catalog - I have a &lt;a href="https://github.com/strapping-young-lad"&gt;github organisation&lt;/a&gt; with no repos setup right now but this would be a brilliant place to hold a load of templates compatible with SYL, don't ya think? Then I could roll a site like rubygems or npmjs.org and make the projects searchable etc. If you build it, they will come. Maybe, who knows.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;So if you like it - HIGHFIVE - if not - it's all good. Now go break it and criticise me. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;So we'll criticise him, because he can take it.... [The Dark Knight, Approx.]&lt;/p&gt;
&lt;/blockquote&gt;</content></entry><entry><title>Rails is not a gateway drug</title><updated>Mon Apr 02 23:00:00 UTC 2012</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2012/04/02/rails-is-not-a-gateway-drug/"></link><id>urn:yobriefca-se:feed:post:Rails is not a gateway drug</id><content type="html">&lt;blockquote&gt;&lt;p&gt;WARNING!!! - a negative opinion on Rails lies ahead. Everything here needs to be taken with an &lt;strong&gt;IMHO&lt;/strong&gt; and, if you feel so inclined, tell me to go mind my own business.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;I know I'm stepping into very dangerous territory here but I've come to the very solid conclusion that &lt;a href="http://rubyonrails.org/"&gt;Rails&lt;/a&gt;, Ruby's heavily opinionated web framework, is not the gateway drug people claim. I've heard the claims that if you give &lt;a href="http://rubyonrails.org/"&gt;Rails&lt;/a&gt; a try, coming from some other web stack on any other language, you'll fall in love with Ruby and Rails and write a big long blog post about how you are leaving .NET (or Java or whatever) behind. I really dont get it.... the only feeling that Rails leaves me with - having been using it in anger for about a month now - is frustration. But before you drive rusty nails into my hands and feet let me at least explain where I am coming from.&lt;/p&gt;&lt;h2&gt;Previous attempts&lt;/h2&gt;&lt;p&gt;I've been binging on Ruby for the last few months but this hasn't been my first time - it's been my only successful time but certianly not my first. A year previous I had given Ruby/Rails a shot and it never stuck (in fact not once but at least twice). Coming from a predominantly .NET/ASP.NET MVC background I decided the best approach would be to cut my teeth on a medium sized web based project and therefore jumped right into Rails. It only took a short time before the whole effort felt like a slog full of weird semi-magic behaviour. I gave up.&lt;/p&gt;&lt;h2&gt;Doing things differently&lt;/h2&gt;&lt;p&gt;This time around I decided to do things a little differently - rather than run with a web project I just tinkered with the language and eventually tried porting a &lt;a href="http://yobriefca.se/blog/2012/03/12/sentamentalizer/"&gt;.NET project over to Ruby&lt;/a&gt;. Fair bit of Ruby code and a small &lt;a href="http://sinatrarb.com"&gt;sinatra&lt;/a&gt; app later - it clicked. I got the whole Ruby love affair, it was lovely and I was three lines into my &lt;em&gt;"F**k you .NET, you're worse than Java and I hate you and you smell"&lt;/em&gt; blog post (not factual!!) when I realised I needed to give Ruby more time to bed in and, out of fairness, I had to at least experience Rails. &lt;/p&gt;&lt;h2&gt;Present Day&lt;/h2&gt;&lt;p&gt;And with that I discovered that Rails had been my problem. I find it incredibly frustrating. I don't want to dive into bashing Rails, thats not my intent, - I'm sure people find it really productive - but it's not for me. So here is a very high level executive summary of the problems I've had with Rails&lt;/p&gt;&lt;p&gt;&lt;strong&gt;The Command Line Interface&lt;/strong&gt; &lt;/p&gt;&lt;p&gt;The CLI stuff has just a little bit too many features and options that make it a difficult thing to approach without extensive research. When I watched some of the &lt;a href="http://railscasts.com/"&gt;Railscasts&lt;/a&gt; I found myself going "wait, HOW did he do that?" more than once. Choice is good but surely Rails is supposed to be easy for the beginner? Yet I feel the default options are not the ones I would have picked. You know what - I want to be hand-held once in a while, I'm proud to admit that.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Too Much Magic&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Rails is very heavily convention based but often there is simply too much convention and I've been left baffled a few times. Some of the convention is well documented and some of it less so. When a convention is not obvious it becomes magic and it really feels Rails has a lot of "magic". Thats not something I want. To be honest I'd rather write the same 2/3 lines of boilerplate if it meant that, to a new developer, they could understand the convention better. Take this very trivial example,&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="ruby "&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HomeController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And the same in ASP.NET MVC&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="csharp "&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HomeController&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
	&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
	&lt;span class="p"&gt;{&lt;/span&gt;
		&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;View&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
	&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To me that one line &lt;code&gt;return View()&lt;/code&gt; tell me that this action will return a View, and now I can infer the convention of &lt;code&gt;home/index.cshtml&lt;/code&gt; that wee bit easier. When you start adding in more conventions, a little bit of extra code makes all the difference. Conventions don't scale unless clearly marked IMHO.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Bloatyness&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;When you generate scaffold in a Rails app, as a typical new developer would, you end up with a awful lot of files. If I generate a new entity for example this is what I am greeted with,&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="bash "&gt;--&amp;gt; rails generate scaffold MyEntity name:String age:Int                         !6580
      invoke  active_record
      create    db/migrate/20120403130542_create_my_entities.rb
      create    app/models/my_entity.rb
      invoke    test_unit
      create      &lt;span class="nb"&gt;test&lt;/span&gt;/unit/my_entity_test.rb
      create      &lt;span class="nb"&gt;test&lt;/span&gt;/fixtures/my_entities.yml
       route  resources :my_entities
      invoke  scaffold_controller
      create    app/controllers/my_entities_controller.rb
      invoke    slim
      create      app/views/my_entities
      create      app/views/my_entities/index.html.slim
      create      app/views/my_entities/edit.html.slim
      create      app/views/my_entities/show.html.slim
      create      app/views/my_entities/new.html.slim
      create      app/views/my_entities/_form.html.slim
      invoke    test_unit
      create      &lt;span class="nb"&gt;test&lt;/span&gt;/functional/my_entities_controller_test.rb
      invoke    helper
      create      app/helpers/my_entities_helper.rb
      invoke      test_unit
      create        &lt;span class="nb"&gt;test&lt;/span&gt;/unit/helpers/my_entities_helper_test.rb
      invoke  assets
      invoke    coffee
      create      app/assets/javascripts/my_entities.js.coffee
      invoke    scss
      create      app/assets/stylesheets/my_entities.css.scss
      invoke  scss
      create    app/assets/stylesheets/scaffolds.css.scss
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Don't get me wrong - it's nice to be given all these things for free, but it's ultimatley stuff I end up ripping out anyway. In .NET there is a running joke that the "Empty ASP.NET MVC Project" Template is anything but. To me this is the same issue except it's something that I'd have to clean up everytime I use the &lt;code&gt;generate scaffold&lt;/code&gt; command. This seems worse to me.&lt;/p&gt;&lt;h2&gt;Current Thoughts&lt;/h2&gt;&lt;p&gt;I'm not sure were Rails is supposed to stand. I hear it's great for beginners or for big sites but I couldn't recommend it for either right now. I realise I should really give it more time before rejecting it entirely but I feel that would be more time wasted. Rails doesn't make me more productive, at least not right now... perhaps once I repeat the same steps over and over and they become natural I'll see a greater boost in productivity (Ruby on the other hand felt natural and great right away). Perhaps if I shun the generators and roll my own stuff then I'll be more productive - but then why not use another framework that comes without all the gubbins I don't need? Sinatra is nice and simple and I can build upon it rather than breakling it apart. &lt;a href="http://ramaze.net/"&gt;Ramaze&lt;/a&gt; seems like a great "next step up" from Sinatra but without as much (perceived) bloat as Rails. I've also followed the recent &lt;a href="http://www.kickstarter.com/projects/1397300529/railsapp"&gt;Kickstarter debacle&lt;/a&gt; from Yehuda - and I agree with him and his mission.&lt;/p&gt;&lt;p&gt;So what I am trying to say is - if you are a person wanting to give the Ruby world a fair shake - DONT start on Rails. Start simpler and later, if you want, when you've been throughly sold on the Ruby way, try Rails to see what you think. Start with Ruby, port some code, write a Sinatra app, watch the &lt;a href="http://railscasts.com/"&gt;Railscasts&lt;/a&gt; as they are amazing then consider immersing yourself in Rails.&lt;/p&gt;&lt;h2&gt;Educate Me&lt;/h2&gt;&lt;p&gt;Finally - educate me. I'm not some sort of oracle proclaiming the death of a framework that thousands of people love. I'm not going to make anyone stop and think "I've been doing wrong all my life - screw Rails". If I'm wrong - tell me. If you think I need to give Rails another look - tell me why, tell me how. If you care - show me what I'm missing.&lt;/p&gt;</content></entry><entry><title>Slim Generator for Octopress</title><updated>Thu Mar 22 00:00:00 UTC 2012</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2012/03/22/slim-generator-for-octopress/"></link><id>urn:yobriefca-se:feed:post:Slim Generator for Octopress</id><content type="html">&lt;p&gt;So I've been overhauling my web site, which is based on &lt;a href="http://octopress.org"&gt;Octopress&lt;/a&gt;, lately and have had to jump into the working of Octopress/Jekyll. It's obviously not the most complicated system in the world but hey it was new to me.&lt;/p&gt;&lt;p&gt;Anyway my current setup features a lot of html based pages (the default markdown approach didn't fit due to styling needs) and it was getting rather noisy. So I wrote, as there didn't seem to be one out there, a &lt;a href="http://slim-lang.com/"&gt;Slim&lt;/a&gt; generator. And here it is, step back it's VERY COMPLEX....&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="ruby "&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Jekyll&lt;/span&gt;
  &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'slim'&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SlimConverter&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Converter&lt;/span&gt;
    &lt;span class="n"&gt;safe&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;priority&lt;/span&gt; &lt;span class="ss"&gt;:low&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;ext&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/slim/i&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;output_ext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="s2"&gt;".html"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;begin&lt;/span&gt;
        &lt;span class="ss"&gt;Slim&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;:Template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;
      &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;StandardError&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
        &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"!!! SLIM Error: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Just drop this file (call it anything) into your plugins folder in Jekyll/Octopress and any file with the &lt;code&gt;slim&lt;/code&gt; extension will use this converter to generate HTML. No more noisy HTML for me!&lt;/p&gt;</content></entry><entry><title>rbenv and CodeRunner</title><updated>Thu Mar 22 00:00:00 UTC 2012</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2012/03/22/rbenv-and-coderunner/"></link><id>urn:yobriefca-se:feed:post:rbenv and CodeRunner</id><content type="html">&lt;p&gt;You know &lt;a href="http://krillapps.com/coderunner/"&gt;CodeRunner&lt;/a&gt; right? If not maybe you should go check it out. It's and aptly named little tool for running code snippets in various languages much like what &lt;a href="http://www.linqpad.net/"&gt;LinqPad&lt;/a&gt; does for the .NET folks. I've been using it extensivley recently to test out little Ruby and Scala snippets. Thing is though - I hit a snag. By default CodeRunner will run the system ruby executable (1.8 in OSX) and I generally use &lt;a href="https://github.com/sstephenson/rbenv"&gt;rbenv&lt;/a&gt; along with version 1.9.whatever so some of my scripts started behaving a little... odd.&lt;/p&gt;&lt;p&gt;But hey it's an easy fix,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Open your CodeRunner Preferences&lt;/li&gt;
  &lt;li&gt;Select the Languages tab&lt;/li&gt;
  &lt;li&gt;Select Ruby in the Language List&lt;/li&gt;
  &lt;li&gt;Change the run command from &lt;code&gt;ruby $filename&lt;/code&gt; to &lt;code&gt;~/.rbenv/shims/ruby $filename&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Before&lt;/h2&gt;&lt;p&gt;![](/images/blog/coderunnerruby/before.png)&lt;/p&gt;&lt;h2&gt;After&lt;/h2&gt;&lt;p&gt;![](/images/blog/coderunnerruby/after.png)&lt;/p&gt;&lt;p&gt;Blam - global rbenv version is now the goto version for CodeRunner. OK so it won't work with rbenv locals but I am sure you can tweak it to make it work (I haven't needed it so never looked).&lt;/p&gt;</content></entry><entry><title>sentimentalizer: A Ruby port of Sentan</title><updated>Mon Mar 12 00:00:00 UTC 2012</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2012/03/12/sentimentalizer-a-ruby-port-of-sentan/"></link><id>urn:yobriefca-se:feed:post:sentimentalizer: A Ruby port of Sentan</id><content type="html">&lt;p&gt;In a bid to be at least 1% less stupid I decided to jump into Ruby. Properly this time, no tinkering with Rails or watching a few videos. So the first thing I did was take &lt;a href="https://twitter.com/#!/martinrue"&gt;@martinrue&lt;/a&gt;'s &lt;a href="https://github.com/martinrue/Sentan"&gt;Sentan&lt;/a&gt; project, fork it, made it run on mono (just because), ported it over to Ruby and renamed it &lt;a href="https://github.com/kouphax/sentimentalizer/"&gt;sentimentalizer&lt;/a&gt; (but keeping all necessary attribution to Martins work in the README of course).&lt;!-- more --&gt; I did this for two reasons,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;I wanted something fairly meaty to actually port over to Ruby in an effort to get a more-than-superficial feel for the language&lt;/li&gt;
  &lt;li&gt;I might have a need for such a service in an upcoming hackathon (though the original .NET version would have been fine too)&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This is in no way some sort of new project or intended for some production environment.&lt;/p&gt;&lt;p&gt;So what is it? &lt;a href="https://github.com/kouphax/sentimentalizer/"&gt;sentamentalizer&lt;/a&gt; is a quick and dirty &lt;a href="http://en.wikipedia.org/wiki/Sentiment_analysis"&gt;sentiment analysis&lt;/a&gt; tool. With it you can loosley class statements as either positive or negative (and get a breakdown of how that classification was derived). You "train" it with datasets for both negative and positive control statements and then feed it sentences you want analysed. At the minute the engine sits behind a super super super, did I say super already?, simple sinatra app that you submit statements to and it returns a simple JSON response with the sentiment result (negative, positive, neutral) and probability. If you want to train the bitch you've got to change the &lt;code&gt;api.rb&lt;/code&gt; file or update the files in the &lt;code&gt;data\positive&lt;/code&gt; and &lt;code&gt;data\negative&lt;/code&gt; folders.&lt;/p&gt;&lt;p&gt;Plans? Yeah I might poke around some more, make into more of a standalone learning service or something (again another feature I might need soon anyway). But for now - feel free to review my shitey code Rubyists (I assume there are better ways to do things, standard appraoches that I'm not using etc.) and offer suggestions.&lt;/p&gt;&lt;p&gt;Once again thanks to &lt;a href="https://twitter.com/#!/martinrue"&gt;@martinrue&lt;/a&gt; for doing all the hard-work on &lt;a href="https://github.com/martinrue/Sentan"&gt;Sentan&lt;/a&gt;&lt;/p&gt;</content></entry></feed>