<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><id>urn:yobriefca-se:feed:testing</id><updated>Sun Apr 01 23:00:00 UTC 2012</updated><title type="text">Yo! Briefcase: testing</title><link rel="self" href="https://yobriefca.se/feed/testing.xml"></link><entry><title>Setting the Selected Option in a Select with Selenium in Scala</title><updated>Sun Apr 01 23:00:00 UTC 2012</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2012/04/01/setting-the-selected-option-in-a-select-with-selenium-in-scala/"></link><id>urn:yobriefca-se:feed:post:Setting the Selected Option in a Select with Selenium in Scala</id><content type="html">&lt;p&gt;Almost a perfect bit of alliteration there in that title - right? Anyway I've been doing a bit of work with bare-metal Selenium stuff in Scala recently and one of the things that kept me stumped for a while was setting the selected &lt;code&gt;option&lt;/code&gt; for a particular &lt;code&gt;select&lt;/code&gt; element.&lt;/p&gt;&lt;p&gt;I looked around the interwebs and didn't really find anything - now I'm not saying it isn't out there, I am certain it is, but I couldn't find it. So I decided to document how I did it in case any lone sole is stuck in a similar situation...&lt;/p&gt;
&lt;pre class="highlight"&gt;&lt;code class="scala"&gt;  &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findElement&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"year"&lt;/span&gt;&lt;span class="o"&gt;)).&lt;/span&gt;
    &lt;span class="n"&gt;findElements&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tagName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"option"&lt;/span&gt;&lt;span class="o"&gt;)).&lt;/span&gt;
    &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;
    &lt;span class="n"&gt;setSelected&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So here I am simply finding the second &lt;code&gt;option&lt;/code&gt; of the "year" &lt;code&gt;select&lt;/code&gt; element and setting it selected. I know it looks obvious now but trust me I was scratching my head for an age on this one.&lt;/p&gt;&lt;p&gt;I hope it helps some one, eventually :)&lt;/p&gt;</content></entry><entry><title>Behaviour Driven (Development|Design) in .NET</title><updated>Wed Mar 28 00:00:00 UTC 2012</updated><author><name>James Hughes</name></author><link href="/presentations/bdd-in-dotnet.pdf"></link><id>urn:yobriefca-se:feed:post:Behaviour Driven (Development|Design) in .NET</id><content type="html"></content></entry><entry><title>Chutzpah 1.3 Released</title><updated>Sun Nov 27 00:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/11/27/chutzpah-1-dot-3-released/"></link><id>urn:yobriefca-se:feed:post:Chutzpah 1.3 Released</id><content type="html">&lt;p&gt;I missed the announcement last week the &lt;a href="http://matthewmanela.com/blog/chutzpah-1-3-0-released/"&gt;Chutzpah 1.3 has been released&lt;/a&gt;. This is a big release as it brings support for &lt;a href="http://pivotal.github.com/jasmine"&gt;Jasmine&lt;/a&gt; - my BDD framework of choice for JavaScript.&lt;/p&gt;&lt;p&gt;&lt;a href="http://chutzpah.codeplex.com/"&gt;Chutzpah&lt;/a&gt; is available as a plugin for Visual Studio but more importantly as a command line runner which allows us to integrate JavaScript testing into our continuious integration builds. Excellent stuff!&lt;/p&gt;</content></entry><entry><title>Speaking at DevWeek 2012</title><updated>Thu Nov 17 00:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/11/17/speaking-at-devweek-2012/"></link><id>urn:yobriefca-se:feed:post:Speaking at DevWeek 2012</id><content type="html">&lt;p&gt;&lt;img src="http://www.devweek.com/pix/dwbanner2012c.jpg" style="width:100%" /&gt;&lt;/p&gt;&lt;p&gt;So it's been officially announced that I am talking at &lt;a href="http://devweek.com"&gt;DevWeek&lt;/a&gt; 2012 in London (26th - 30th March). Looking at the names on the billing it's quite weird seeing my name thrown in there, perhaps some one made a mistake :-P&lt;/p&gt;
&lt;!--more--&gt;
&lt;blockquote&gt;&lt;h3&gt;BDD and .NET&lt;/h3&gt;&lt;p&gt;Behaviour Driven Design/Development is an interesting premise, but does it really work? What benefits does it offer and how can we successfully apply its principles in the .NET world? We can answer these questions by reviewing the principles around BDD and diving into the technologies that exist in the .NET world that support these principles.&lt;/p&gt;&lt;p&gt;From low-level unit focused testing technologies all the way up to the more abstract integration and acceptance level suite of specifications, automated testing and continuous integration, we will see that .NET isn't lacking in choice. As a bonus we will address the oft ignored testing of our JavaScript project components using tools such as Jasmine and QUnit.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;The brief was written in haste and sounds a bit boilerplate but I will be giving it my all and really pull off an engaging session. I've been at the attendee end of a few bad sessions and I will do my damnedest not to put anyone through that kind of ordeal.&lt;/p&gt;&lt;p&gt;The &lt;a href="http://www.devweek.com/sessions/"&gt;line-up for DevWeek&lt;/a&gt; looks excellent and the pre/post conference workshops all look stellar - so much choice, I just need to find a way to clone myself.&lt;/p&gt;&lt;p&gt;If you're going - see you there, catch up with me and come throw tomatoes and/or abuse during my session. If you're not going, well sucks to be you then!&lt;/p&gt;</content></entry><entry><title>Debugging NSpec Tests: The DebuggerShim</title><updated>Mon Jul 04 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/07/04/debugging-nspec-tests-the-debuggershim/"></link><id>urn:yobriefca-se:feed:post:Debugging NSpec Tests: The DebuggerShim</id><content type="html">
&lt;p&gt;Busy busy busy.  I've been working away on a lot of projects and not had a lot of time to stick anything up on this blog in a while.  I've got a growing "To Blog" list but no time to do it, woe is me!!!&lt;br /&gt;&lt;img src="/images/woeisme.png" style="float:right;" /&gt;&lt;/p&gt;&lt;p&gt;Enough about my perfectly normal life, well almost.  Some of my current work has me going full tilt with &lt;span class="caps"&gt;TDD&lt;/span&gt; on a little C# project and I decided that &lt;a href="http://nspec.org"&gt;NSpec&lt;/a&gt; would help me with unit testing.  So I went about writing failing tests, writing code, passing tests on and on and on.  Things went along fairly well until I hit a little bit of a wall around a little edge case.  My tests kept failing and I couldn't understand why.  The stack trace made little to no sense and my code looked sound.  The problem I had was that &lt;a href="http://nspec.org"&gt;NSpec&lt;/a&gt;, out of the box at least, doesn't have any nice integration with Visual Studio or TestDriven.&lt;span class="caps"&gt;NET&lt;/span&gt;.  Initially I was using a throw away console application and debugging through it but as you can imagine that was time consuming.&lt;/p&gt;&lt;p&gt;It wasn't long though until I was pointed in the &lt;a href="http://twitter.com/#!/amirrajan/status/87174922782253056"&gt;right direction&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;!-- http://twitter.com/#!/amirrajan/status/87174922782253056 --&gt; &lt;style type="text/css"&gt;.bbpBox87174922782253056 {background:url(http://a0.twimg.com/images/themes/theme1/bg.png) #C0DEED;padding:20px;} p.bbpTweet{background:#fff;padding:10px 12px 10px 12px;margin:0;min-height:48px;color:#000;font-size:18px !important;line-height:22px;-moz-border-radius:5px;-webkit-border-radius:5px} p.bbpTweet span.metadata{display:block;width:100%;clear:both;margin-top:8px;padding-top:12px;height:40px;border-top:1px solid #fff;border-top:1px solid #e6e6e6} p.bbpTweet span.metadata span.author{line-height:19px} p.bbpTweet span.metadata span.author img{float:left;margin:0 7px 0 0px;width:38px;height:38px} p.bbpTweet a:hover{text-decoration:underline}p.bbpTweet span.timestamp{font-size:12px;display:block}&lt;/style&gt; &lt;/p&gt;&lt;div class="bbpBox87174922782253056"&gt;&lt;p class="bbpTweet"&gt;If you want to have debugger support for you NSpec specifications, use this: &lt;a href="http://t.co/6SwZcVL" rel="nofollow"&gt;http://t.co/6SwZcVL&lt;/a&gt; /cc @&lt;a class="tweet-url username" href="http://twitter.com/kouphax" rel="nofollow"&gt;kouphax&lt;/a&gt; @&lt;a class="tweet-url username" href="http://twitter.com/mattflo" rel="nofollow"&gt;mattflo&lt;/a&gt;&lt;span class="timestamp"&gt;&lt;a title="Sat Jul 02 15:04:55 +0000 2011" href="http://twitter.com/#!/amirrajan/status/87174922782253056"&gt;less than a minute ago&lt;/a&gt; via web &lt;a href="http://twitter.com/intent/favorite?tweet_id=87174922782253056"&gt;&lt;img src="http://si0.twimg.com/images/dev/cms/intents/icons/favorite.png" /&gt; Favorite&lt;/a&gt; &lt;a href="http://twitter.com/intent/retweet?tweet_id=87174922782253056"&gt;&lt;img src="http://si0.twimg.com/images/dev/cms/intents/icons/retweet.png" /&gt; Retweet&lt;/a&gt; &lt;a href="http://twitter.com/intent/tweet?in_reply_to=87174922782253056"&gt;&lt;img src="http://si0.twimg.com/images/dev/cms/intents/icons/reply.png" /&gt; Reply&lt;/a&gt;&lt;/span&gt;&lt;span class="metadata"&gt;&lt;span class="author"&gt;&lt;a href="http://twitter.com/amirrajan"&gt;&lt;img src="http://a2.twimg.com/profile_images/1326219901/1613d80124a605829d755d9df0fc8b9e_normal.jpeg" /&gt;&lt;/a&gt;&lt;strong&gt;&lt;a href="http://twitter.com/amirrajan"&gt;Amir Rajan&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;amirrajan&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;!-- end of tweet --&gt;&lt;p&gt;The gist, in full below, provides a simple debugger shim over nspec that allows you to hook into the Visual Studio debugger (through something like TestDriven.&lt;span class="caps"&gt;NET&lt;/span&gt; for example).  I simply right clicked on the shim and select "Run With Debugger" and boom my stupid mistake was displayed to me rather quickly.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;NUnit.Framework&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;NSpec.Domain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Reflection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;NSpec&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;DynamicBlog.Tests&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;    [TestFixture]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DebuggerShim&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;        [Test]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//the specification class you want to test&lt;/span&gt;
            &lt;span class="c1"&gt;//this can be a regular expression&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;testClassYouWantToDebug&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"describe_Blog"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="c1"&gt;//initialize NSpec's specfinder&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;finder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SpecFinder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;Assembly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetExecutingAssembly&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Reflector&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; 
                &lt;span class="n"&gt;testClassYouWantToDebug&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            
            &lt;span class="c1"&gt;//initialize NSpec's builder&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ContextBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;finder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;DefaultConventions&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

            &lt;span class="c1"&gt;//this line runs the tests you specified in the filter&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ContextRunner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ConsoleFormatter&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Handy until a more concrete solution appears.  One more thing - really enjoying nspec, it seems to be fitting well with the way I work.&lt;/p&gt;</content></entry><entry><title>Further Adventures in Unit Testing Technologies</title><updated>Mon May 16 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/05/16/further-adventures-in-unit-testing-technologies/"></link><id>urn:yobriefca-se:feed:post:Further Adventures in Unit Testing Technologies</id><content type="html">
&lt;p&gt;This post is a follow up to &lt;a href="/blog/2011/04/04/a-tale-of-unit-testing-technologies/"&gt;A Tale of Unit Testing Technologies&lt;/a&gt;.  Information about the project repository can be found on my &lt;a href="http://github.com/kouphax/unit-testing"&gt;project page&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I've finally managed to slog through the long and slightly tedious process of re-writing the same suite of tests in a number of C# and JavaScript unit testing technologies - the results of which can be seen on the &lt;a href="http://github.com/kouphax/unit-testing"&gt;project GitHub page&lt;/a&gt;.  My conclusion, especially in the .&lt;span class="caps"&gt;NET&lt;/span&gt; world, is that it doesn't really matter that much.  I know it's not that much of a brilliant ending but what did you expect?  Fireworks?&lt;/p&gt;&lt;p&gt;Anyways before I start amazing you all with more awe inspiring revelations let me run through the remaining technologies (until such times as more are added at least) and summarise their good and bad points.  The other technologies I brought on board include,&lt;/p&gt;&lt;ul&gt;	&lt;li&gt;&lt;a href="http://www.nunit.org/"&gt;NUnit&lt;/a&gt;&lt;/li&gt;	&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/ms182486.aspx"&gt;MSTest&lt;/a&gt;&lt;/li&gt;	&lt;li&gt;&lt;a href="http://nspec.org/"&gt;NSpec&lt;/a&gt;&lt;/li&gt;	&lt;li&gt;&lt;a href="https://github.com/robconery/Quixote"&gt;Quixote&lt;/a&gt;&lt;/li&gt;	&lt;li&gt;&lt;a href="http://pivotal.github.com/jasmine/"&gt;Jasmine&lt;/a&gt;&lt;/li&gt;	&lt;li&gt;&lt;a href="http://docs.jquery.com/Qunit"&gt;QUnit&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Some obvious ones there just to round out the comparisons and a few JavaScript based ones.&lt;/p&gt;&lt;h2&gt;&lt;a href="http://www.nunit.org/"&gt;NUnit&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Good old &lt;a href="http://www.nunit.org/"&gt;NUnit&lt;/a&gt;.  Whats not to love?  Mark a class as a fixture and mark your methods as a test.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="na"&gt;[TestFixture]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TagTest&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;    [Test]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;TagNameNormalisationTest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"My Tag Name"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AreEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NormalisedName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"mytagname"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No point in mentioning too much about NUnit as most people will know the ins and outs of it already.  It has VS integration (via &lt;a href="http://testdriven.net/"&gt;TestDriven&lt;/a&gt;) and a nice NUnit runner capable of watching changes to DLL's and automatically rerunning the test contained within.  One caveat around that is often NUnit hangs on to the &lt;span class="caps"&gt;DLL&lt;/span&gt; reference and requires a restart so Visual Studio can rebuild the &lt;span class="caps"&gt;DLL&lt;/span&gt; which kind of misses the point - but it doesn't happen too often.&lt;/p&gt;&lt;p&gt;The framework itself would lend itself to a bit of betterification through sugar such as &lt;a href="http://should.codeplex.com/"&gt;Should and Should.Fluent&lt;/a&gt; but it does what it says on the tin.&lt;/p&gt;&lt;h2&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/ms182486.aspx"&gt;MSTest&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Another staple for many people.  I'd never really used it too much prior to doing this post because of the general negative opinion of it.  I must admit I kind of agree with some of these things.  It's pretty much the MS equivalent of NUnit (in terms of features and look and feel)&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="na"&gt;[TestClass]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TagTest&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;    [TestMethod]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;TagNameNormalisationTest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"My Tag Name"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AreEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NormalisedName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"mytagname"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So why do so many people prefer NUnit over MSTest?  Well I think the main problem is that it is &lt;a href="http://www.richard-banks.org/2010/03/mstest-sucks-for-unit-tests.html"&gt;quite slow&lt;/a&gt; in comparison (from Visual Studio at least) but my main gripe is the amount of &lt;a href="http://en.wiktionary.org/wiki/flob"&gt;flob&lt;/a&gt; it generates for each test run and configuration.  It even produces solution folders for holding test runs and other files. If I want you to create those I'll ask you - don't force it on me.  It also has a very limited set of Assertion methods much like NUnit.&lt;/p&gt;&lt;p&gt;Enough moaning - surely it must have some benefits?  Well yes it does of course.  The main benefit &lt;span class="caps"&gt;IMHO&lt;/span&gt; is that it has very nice integration into Visual Studio which offers some very clean feedback.  This is something that requires &lt;a href="http://testdriven.net/"&gt;TestDriven&lt;/a&gt; for NUNit and the other frameworks which may or may not be free depending on your situation.&lt;/p&gt;&lt;h2&gt;&lt;a href="http://nspec.org/"&gt;NSpec&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Not to be confused with the &lt;a href="http://nspec.tigris.org/"&gt;first hit on Google&lt;/a&gt; which seems to be pretty much a dead project &lt;a href="http://nspec.org"&gt;NSpec&lt;/a&gt; (.org) is an attempt to bring &lt;a href="http://rspec.info"&gt;RSpec&lt;/a&gt; into the .&lt;span class="caps"&gt;NET&lt;/span&gt; world.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;describe_Tag&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nspec&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;when_setting_the_tag_name_to_My_Tag_Name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_tag&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Tag&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"My Tag Name"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"should normalise the tag name to mytagname"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; 
            &lt;span class="n"&gt;_tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NormalisedName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;should_be&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mytagname"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Tag&lt;/span&gt; &lt;span class="n"&gt;_tag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is somewhat similar to &lt;a href="https://github.com/machine/machine.specifications"&gt;MSpec&lt;/a&gt; I mentioned in the last post.  My bugbear with MSpec however was that it didn't feel natural to me.  The equivalent MSpec test for the above looks like this,&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="na"&gt;[Subject("Normalise Tag Name")]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;when_a_tag_is_created&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Tag&lt;/span&gt; &lt;span class="n"&gt;_tag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;Establish&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;_tag&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;Because&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;_tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"New Test Tag"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;should_have_a_normalised_name_of_newtesttag&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;_tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NormalisedName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ShouldEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"newtesttag"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Maybe it's just me but it doesn't read as well as the NSpec version.  I even found it easier to write the NSpec version - more natural.&lt;/p&gt;&lt;p&gt;NSpec also has a lot of extra goodies.  Currently there is no integration into Visual Studio yet but the runner is simple to enough to spin up from the NuGet Package Manager Console and it has an added bonus of a file watcher.  &lt;a href="http://nspec.org/continuoustesting"&gt;SpecWatchr&lt;/a&gt; is similar to NUnit it can watch for changes and automatically run the specs.  It differs from NUnit in that it watches changes to the code files rather than the &lt;span class="caps"&gt;DLL&lt;/span&gt; - so need to wait for builds to happen etc.  Nice.&lt;/p&gt;&lt;p&gt;One minor gripe with it (bar the lack of VS support - even TestDriven support would be good) is the &lt;code&gt;should&lt;/code&gt; syntax. I prefer the Should.Fluent style syntax &lt;code&gt;Should.Be()&lt;/code&gt; rather than the current &lt;code&gt;should_be&lt;/code&gt; syntax.  It's not Ruby and we should accept that :-P.&lt;/p&gt;&lt;p&gt;It's still quite early for NSpec and hopefully it keeps it's momentum as it would be one of my frameworks of choice.&lt;/p&gt;&lt;h2&gt;&lt;a href="https://github.com/robconery/Quixote"&gt;Quixote&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Quixote by Rob Conery follows on from his current slew of ultra lightweight solutions to common problems (like &lt;a href="https://github.com/robconery/Massive"&gt;Massive&lt;/a&gt; and &lt;a href="https://github.com/robconery/Sugar"&gt;Sugar&lt;/a&gt;).  Quixote blends the &lt;span class="caps"&gt;HTML&lt;/span&gt; reporting directly with the framework and you write tests right in a Razor file.  This is the definition of lightweight.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;@using Quixote;
@using CodeSlice.UnitTesting.Model;

&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;'@Url.Content("~/Styles/quixote.css")'&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

@TheFollowing.Describes("Tags")
    @They.Should("Normalise the Tag Name", () =&amp;gt; {
        return new Tag { Name = "Test Name" }.NormalisedName.ShouldEqual("testname");
    })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The obvious problem with this is that you don't get continuous integration or build support.  There is no need to rebuild anything just refresh your page and the tests re-run.  Still CI/Build integration would be nice for a framework.&lt;/p&gt;&lt;h2&gt;&lt;a href="http://pivotal.github.com/jasmine/"&gt;Jasmine&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Ah Jasmine.  Jasmine is what I wanted out of a JavaScript testing framework.  Rather than going the JSpec route of creating a preprocessed &lt;acronym title="Domain Specific Language"&gt;&lt;span class="caps"&gt;DSL&lt;/span&gt;&lt;/acronym&gt; Jasmine makes use of JavaScripts dynamic nature and "functions as 1st class citizens" feature to create framework that behaves like RSpec but embraces JavaScript.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Tag'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;beforeEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"should normalise a tag name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A Tag Name'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNormalisedName&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'atagname'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Out of the box you get an extensible framework (custom matchers etc), mocking and asynchronous support.  Ajax faking isn't directly available but I recommend using &lt;a href="http://sinonjs.org"&gt;Sinon&lt;/a&gt; for this as it has an amazing FakeServer object that is fully configurable.&lt;/p&gt;&lt;p&gt;Another big advantage of Jasmine is it's build integration.  Be it node.js, Java or Ruby you can integrate Jasmine specs into your build process.  .&lt;span class="caps"&gt;NET&lt;/span&gt; integration isn't available yet but &lt;a href="http://jurassic.codeplex.com"&gt;Jurassic&lt;/a&gt; would be a suitable host if anyone wants to make it happen (hint, hint :-P).&lt;/p&gt;&lt;h2&gt;&lt;a href="http://docs.jquery.com/Qunit"&gt;QUnit&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;And finally QUnit.  QUnit is the NUnit/JUnit equivalent for the JavaScript world.  Well known and mature project with some very nice &lt;span class="caps"&gt;HTML&lt;/span&gt; output.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Tag Model Validation'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Tag name normalisation'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'A Tag Name'&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="nx"&gt;normalisedName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNormalisedName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'atagname'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;normalisedName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Not much else to say on this one right now.... must be running out of steam.&lt;/p&gt;&lt;h2&gt;Summing Up&lt;/h2&gt;&lt;p&gt;And there you have it.  The first real post since the move and it's a bit of a waffly long one.  Anyways what would be my recommendations?  Well for .&lt;span class="caps"&gt;NET&lt;/span&gt; I'm torn.  Currently I'd say NUnit with Should.Fluent extensions.  This is a nice combo for creating simple tests that people can execute from within Visual Studio.  However NSpec has potential - I'd like to see it grow a bit more and I'll keep watching it.  Visual Studio integration would be aces though.  JavaScript on the other hand I have a clear cut winner.  Jasmine is awesome.  It's boosted my code quality and productivity no end on recent projects and with the help of &lt;a href="http://sinonjs.org"&gt;Sinon&lt;/a&gt; for mocking and controlling Ajax it'll be a long time before I am this happy with a .&lt;span class="caps"&gt;NET&lt;/span&gt; equivalent tech.  Fingers crossed for NSpec on that front.&lt;/p&gt;</content></entry><entry><title>A Tale of Unit Testing Technologies</title><updated>Sun Apr 03 23:00:00 UTC 2011</updated><author><name>James Hughes</name></author><link href="https://yobriefca.se/blog/2011/04/03/a-tale-of-unit-testing-technologies/"></link><id>urn:yobriefca-se:feed:post:A Tale of Unit Testing Technologies</id><content type="html">
&lt;p&gt;I've had a big bad dirty secret for a while now.  One I've kept hidden from my friend and colleagues for years.  But now its time to come clean...... here goes..... hold onto your pants.&lt;/p&gt;&lt;blockquote&gt;&amp;lt;pause for dramatic effect&amp;gt;&lt;br /&gt;I hardly ever write unit tests!&lt;br /&gt;&amp;lt;gasps&amp;gt;&lt;/blockquote&gt;&lt;p&gt;I've come clean and it feels good.  Another reason why it feels good is that it is slowly but surely becoming a falsehood.  I've had my eyes opened recently to the art of BDD and discovered that I've simply been doing it wrong - I was so busy writing code first and then tests to fit my, possibly incorrect, assumptions that tests failed to hold any worthwhile value — time wasted in my mind.  Also when writing said tests I was too worried on the internal mechanics of the "unit" being tested and not about its intended behaviour — essentially missing the point and time wasted once more.  Being a man that has no time for, well, time wasting I feel I have come full circle on why I didn't test.  In the past at least....&lt;/p&gt;&lt;p&gt;But I digress.... Where was I?  Ah yes I've had my eyes opened - I've been doing it right.  Yep I've gone all TDD/BDD - write a failing test, write some code to make it work, make the test fail again and so on and so forth.  Its been a good experience.  I finally see the benefit in it.  Yes, it takes slightly longer and it's hard to break old habits but the amount of times I've been tripped up by assumptions and edge cases that would only normally be found during system testing after a frustrating debugging session with plenty of hair pulling and swearing.&lt;/p&gt;&lt;p&gt;Since the whole behaviour driven enlightenment I've been trying to find a suitable set of technologies that allow me to perfect my new found approach and turn me into a fast and effective code cutting machine.  NUnit is fine — it does the job but it's a task in itself to express what you want out of a test which slows things down.  No if you're going to do it right you want the best tools.  So I have decided to jump in head first and discover what testing tools are the most effective.  I've been through a few already , including,&lt;/p&gt;&lt;ul&gt;&lt;li&gt;SpecFlow (C#)&lt;/li&gt;&lt;li&gt;MSpec (Machine.Specifications) (C#) &lt;/li&gt;&lt;li&gt;JSpec  (JavaScript)&lt;/li&gt;&lt;li&gt;Should/Should.Fluent (C#)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Here are a few of my thoughts so far. &lt;/p&gt;&lt;h2&gt;SpecFlow (&lt;a href="http://www.specflow.org/"&gt;http://www.specflow.org/&lt;/a&gt;)&lt;/h2&gt;&lt;p&gt;SpecFlow is essentially the .NET equivalent of Cucumber (from the Ruby world).  Offering natural language syntax for defining scenarios that make up the behaviour of a feature.  Its better as an example,&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;Feature:&lt;/span&gt;&lt;span class="nf"&gt; Tags&lt;/span&gt;

&lt;span class="k"&gt;Scenario:&lt;/span&gt;&lt;span class="nf"&gt; Normalise Tag Name&lt;/span&gt;
&lt;span class="k"&gt;	Given &lt;/span&gt;&lt;span class="nf"&gt;I have created a new tag&lt;/span&gt;
&lt;span class="nf"&gt;	&lt;/span&gt;&lt;span class="k"&gt;When &lt;/span&gt;&lt;span class="nf"&gt;I set its name to "&lt;/span&gt;&lt;span class="s"&gt;New Test Tag&lt;/span&gt;&lt;span class="nf"&gt;"&lt;/span&gt;
&lt;span class="nf"&gt;	&lt;/span&gt;&lt;span class="k"&gt;Then &lt;/span&gt;&lt;span class="nf"&gt;it should have a normalised name of "&lt;/span&gt;&lt;span class="s"&gt;newtesttag&lt;/span&gt;&lt;span class="nf"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;So you see the test here is written in pretty much straight english.  It's easy to understand and this means even domain experts (aka "the business folk") can help write them.  So how does this end up being turned into executable tests.  Well, initially you need to do a bit of wiring up using Step Definitions.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="na"&gt;[Binding]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TagSteps&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt; &lt;span class="n"&gt;_tag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="na"&gt;    [Given(@"I have created a new tag")]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;GivenIHaveCreatedANewTag&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_tag&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;    
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;    [When(@"I set its name to ""(.*)""")]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;WhenISetItsNameToNewTestTag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;    [Then(@"it should have a normalised name of ""(.*)""")]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ThenItShouldHaveANormalisedNameOfNewtestag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;normalisedname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NormalisedName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normalisedname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see we can match up each line of the feature file with an appropriate executable action.  We even have the power of regular expressions at our disposal - allowing us to reuse steps and build up a decent library that comes with us across projects.  Some very very powerful stuff here — we can get everyone involved in writing these things,&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Developers and business users during design&lt;/li&gt;&lt;li&gt;Developers during development&lt;/li&gt;&lt;li&gt;Testers during system test — in fact why not write a feature as the "Steps to reproduce"?  Win, win!&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The thing is...... well.... Technically speaking SpecFlow isn't really aimed at the fine grained, unit test level of testing.  It's more about the higher level integration testing.  I mean it's useable but it does become a bit awkward to express things in a reusable manner.  The problem with that is things start feeling quite heavy weight and you need to do a lot of extra work to get them to fit.  No I think, while SpecFlow is great for many things (automated testing, integration testing, system testing etc.) it's not the best fit for what I am looking for in this article - unit testing tools.&lt;/p&gt;&lt;h2&gt;MSpec (&lt;a href="https://github.com/machine/machine.specifications"&gt;https://github.com/machine/machine.specifications&lt;/a&gt;)&lt;/h2&gt;&lt;p&gt;Machine.Specifications (MSpec for short) is a Context/Specification framework geared towards 	removing language noise and simplifying tests. &lt;/p&gt;&lt;p&gt;Thats the official intention and I must admit I was initially taken by it.  Rather than having a single huge class filled with methods representing tests MSpec takes the approach that a single class represents a single scenario and uses lambda expressions to offer the BDD style syntax (Because/It/Subject etc.).  So lets take the Tag scenario described above and convert it to MSpec format,&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="na"&gt;[Subject("Normalise Tag Name")]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;when_a_tag_is_created&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Tag&lt;/span&gt; &lt;span class="n"&gt;_tag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;Establish&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;_tag&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;Because&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;_tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"New Test Tag"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;should_have_a_normalised_name_of_newtesttag&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;_tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NormalisedName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ShouldEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"newtesttag"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It's quite simple and it really forces you to ensure your tests are as simple as possible.  To be honest having used it on a project I'm not 100% sold.  I think its down to my personal coding style.  I honestly think while it reduces line count it doesn't necessarily reduce language noise.  Also having used on a project I found it quite awkward to write — the style is different to what I am used to and I guess with training that would change.  As I say this is a personal opinion and I am happy to be shown a better approach.&lt;/p&gt;&lt;h2&gt;JSpec (&lt;a href="http://visionmedia.github.com/jspec/"&gt;http://visionmedia.github.com/jspec/&lt;/a&gt;)&lt;/h2&gt;&lt;p&gt;JSpec is a clever little JavaScript testing framework.  I's no longer supported by it's creators (booooo!) but honestly its stable enough to use anyway.  JSpec takes the RSpec DSL (a decent subset at least) and is capable of converting it to JavaScript for execution in the browser.  It's got a heap of stuff in it,&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Mock Ajax&lt;/li&gt;&lt;li&gt;Stubbing&lt;/li&gt;&lt;li&gt;Fake timers&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Lets take a look at a simple example,&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;"Utils.Arrays.compare method"&lt;/span&gt;    
    &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;"should compare and sort 2 numeric arrays successfully"&lt;/span&gt;
        &lt;span class="nx"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="nx"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                
        &lt;span class="nx"&gt;Utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Arrays&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;        
    &lt;span class="nx"&gt;end&lt;/span&gt;            
    
    &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;"should compare 2 numeric arrays unsuccesfully when not sorted"&lt;/span&gt;
        &lt;span class="nx"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="nx"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                
        &lt;span class="nx"&gt;Utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Arrays&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;        
        &lt;span class="nx"&gt;Utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Arrays&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;        
    &lt;span class="nx"&gt;end&lt;/span&gt;        
&lt;span class="nx"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;People who have used RSpec before will feel right at home.  People who haven't should be able to understand exactly what is going on.  Pretty - right?  I thought so.  For the people who think — "ugh we don't need another dialect/language" - wise up!  Out of all the testing techs I've used recently this one has been the most successful and the output it generates is nice and clean.&lt;/p&gt;&lt;h2&gt;Should/Should.Fluent (&lt;a href="http://should.codeplex.com/"&gt;http://should.codeplex.com/&lt;/a&gt;)&lt;/h2&gt;&lt;p&gt;This little gem isn't a framework in itself and can be used with any framework you care to use.  Should provides a more expressive way of stating assertions in your code by making the code closer to natural language using extensions methods and nicer method names.  Example I hear you say?  Why certainly sirs and madams,&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Should_fluent_assertions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Null&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OfType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Null&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SameAs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OfType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"x"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"y"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"z"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"z"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SameAs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"x"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="s"&gt;"This String"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Contain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="s"&gt;"This String"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="s"&gt;"This String"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Contain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"foobar"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Contain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Should&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Contain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I stole this one from the Should Codeplex site (linked above) and it makes use of the fluent syntax (optional).  OK technically it doesn't do much but it really helps when trying to express assertions in your tests.  Highly recommend this one.&lt;/p&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Thats the first lot of technologies covered but there are still plenty out there.  I think my next port of call is to actually spin up IronRuby and get RSpec involved.  After all it is the marker by which I am comparing these things so why did I not jump on it first of all?  Perhaps I like to build up suspense :-P&lt;/p&gt;&lt;p&gt;Also worth pointing out is that I haven't touched upon technologies for mocking and stubbing - that is for another time.&lt;/p&gt;&lt;p&gt;As always heap criticism my way and I'll happily fight my corner and stubbornly refuse to back down :-P (second smilie within a few paragraphs time to end this post).&lt;/p&gt;&lt;p&gt;UPDATE:  I've pushed some of my code to GitHub and intend to expand on this using the various other technologies.  The repository can be found on my &lt;a href="https://github.com/kouphax/unit-testing"&gt;repo on GitHub&lt;/a&gt;&lt;/p&gt;</content></entry></feed>